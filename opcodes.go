package mach85

type op struct {
	inst string
	mode Mode
}

var opcodes = map[uint8]op{
	0x00: op{"brk", Implied},
	0x01: op{"ora", IndirectX},
	0x05: op{"ora", ZeroPage},
	0x06: op{"asl", ZeroPage},
	0x08: op{"php", Implied},
	0x09: op{"ora", Immediate},
	0x0a: op{"asl", Accumulator},
	0x0d: op{"ora", Absolute},
	0x0e: op{"asl", Absolute},

	0x10: op{"bpl", Relative},
	0x11: op{"ora", IndirectY},
	0x15: op{"ora", ZeroPageX},
	0x16: op{"asl", ZeroPageX},
	0x18: op{"clc", Implied},
	0x19: op{"ora", AbsoluteY},
	0x1d: op{"ora", AbsoluteX},
	0x1e: op{"asl", AbsoluteX},

	0x20: op{"jsr", Absolute},
	0x21: op{"and", IndirectX},
	0x24: op{"bit", ZeroPage},
	0x25: op{"and", ZeroPage},
	0x26: op{"rol", ZeroPage},
	0x28: op{"plp", Implied},
	0x29: op{"and", Immediate},
	0x2a: op{"rol", Accumulator},
	0x2c: op{"bit", Absolute},
	0x2d: op{"and", Absolute},
	0x2e: op{"rol", Absolute},

	0x30: op{"bmi", Relative},
	0x31: op{"and", IndirectY},
	0x35: op{"and", ZeroPageX},
	0x36: op{"rol", ZeroPageX},
	0x38: op{"sec", Implied},
	0x39: op{"and", AbsoluteY},
	0x3d: op{"and", AbsoluteX},
	0x3e: op{"rol", AbsoluteX},

	0x40: op{"rti", Implied},
	0x41: op{"eor", IndirectX},
	0x45: op{"eor", ZeroPage},
	0x46: op{"lsr", ZeroPage},
	0x48: op{"pha", Implied},
	0x49: op{"eor", Immediate},
	0x4a: op{"lsr", Accumulator},
	0x4c: op{"jmp", Absolute},
	0x4d: op{"eor", Absolute},
	0x4e: op{"lsr", Absolute},

	0x50: op{"bvc", Relative},
	0x51: op{"eor", IndirectY},
	0x55: op{"eor", ZeroPageX},
	0x56: op{"lsr", ZeroPageX},
	0x58: op{"cli", Implied},
	0x59: op{"eor", AbsoluteY},
	0x5d: op{"eor", AbsoluteX},
	0x5e: op{"lsr", AbsoluteX},

	0x60: op{"rts", Implied},
	0x61: op{"adc", IndirectX},
	0x65: op{"adc", ZeroPage},
	0x66: op{"ror", ZeroPage},
	0x68: op{"pla", Implied},
	0x69: op{"adc", Immediate},
	0x6a: op{"ror", Accumulator},
	0x6c: op{"jmp", Indirect},
	0x6d: op{"adc", Absolute},
	0x6e: op{"ror", Absolute},

	0x70: op{"bvs", Relative},
	0x71: op{"adc", IndirectY},
	0x75: op{"adc", ZeroPageX},
	0x76: op{"ror", ZeroPageX},
	0x78: op{"sei", Implied},
	0x79: op{"adc", AbsoluteY},
	0x7d: op{"adc", AbsoluteX},
	0x7e: op{"ror", AbsoluteX},

	0x81: op{"sta", IndirectX},
	0x84: op{"sty", ZeroPage},
	0x85: op{"sta", ZeroPage},
	0x86: op{"stx", ZeroPage},
	0x88: op{"dey", Implied},
	0x8a: op{"txa", Implied},
	0x8c: op{"sty", Absolute},
	0x8d: op{"sta", Absolute},
	0x8e: op{"stx", Absolute},

	0x90: op{"bcc", Relative},
	0x91: op{"sta", IndirectY},
	0x94: op{"sty", ZeroPageX},
	0x95: op{"sta", ZeroPageX},
	0x96: op{"stx", ZeroPageY},
	0x98: op{"tya", Implied},
	0x99: op{"sta", AbsoluteY},
	0x9a: op{"txs", Implied},
	0x9d: op{"sta", AbsoluteX},

	0xa0: op{"ldy", Immediate},
	0xa1: op{"lda", IndirectX},
	0xa2: op{"ldx", Immediate},
	0xa4: op{"ldy", ZeroPage},
	0xa5: op{"lda", ZeroPage},
	0xa6: op{"ldx", ZeroPage},
	0xa8: op{"tay", Implied},
	0xa9: op{"lda", Immediate},
	0xaa: op{"tax", Implied},
	0xac: op{"ldy", Absolute},
	0xad: op{"lda", Absolute},
	0xae: op{"ldx", Absolute},

	0xb0: op{"bcs", Relative},
	0xb1: op{"lda", IndirectY},
	0xb4: op{"ldy", ZeroPageX},
	0xb5: op{"lda", ZeroPageX},
	0xb6: op{"ldx", ZeroPageY},
	0xb8: op{"clv", Implied},
	0xb9: op{"lda", AbsoluteY},
	0xba: op{"tsx", Implied},
	0xbd: op{"lda", AbsoluteX},
	0xbc: op{"ldy", AbsoluteX},
	0xbe: op{"ldx", AbsoluteY},

	0xc0: op{"cpy", Immediate},
	0xc1: op{"cmp", IndirectX},
	0xc4: op{"cpy", ZeroPage},
	0xc5: op{"cmp", ZeroPage},
	0xc6: op{"dec", ZeroPage},
	0xc8: op{"iny", Implied},
	0xc9: op{"cmp", Immediate},
	0xca: op{"dex", Implied},
	0xcc: op{"cpx", Absolute},
	0xcd: op{"cmp", Absolute},
	0xce: op{"dec", Absolute},

	0xd0: op{"bne", Relative},
	0xd1: op{"cmp", IndirectY},
	0xd5: op{"cmp", ZeroPageX},
	0xd6: op{"dec", ZeroPageX},
	0xd8: op{"cld", Implied},
	0xd9: op{"cmp", AbsoluteY},
	0xdd: op{"cmp", AbsoluteX},
	0xde: op{"dec", AbsoluteX},

	0xe0: op{"cpx", Immediate},
	0xe1: op{"sbc", IndirectX},
	0xe4: op{"cpx", ZeroPage},
	0xe5: op{"sbc", ZeroPage},
	0xe6: op{"inc", ZeroPage},
	0xe8: op{"inx", Implied},
	0xe9: op{"sbc", Immediate},
	0xea: op{"nop", Implied},
	0xec: op{"cpx", Absolute},
	0xed: op{"sbc", Absolute},
	0xee: op{"inc", Absolute},

	0xf0: op{"beq", Relative},
	0xf1: op{"sbc", IndirectY},
	0xf5: op{"sbc", ZeroPageX},
	0xf6: op{"inc", ZeroPageX},
	0xf8: op{"sed", Implied},
	0xf9: op{"sbc", AbsoluteY},
	0xfd: op{"sbc", AbsoluteX},
	0xfe: op{"inc", AbsoluteX},
}

var executors = map[uint8]func(c *CPU){
	0x00: func(c *CPU) { brk(c) },
	0x01: func(c *CPU) { ora(c, c.loadIndirectX) },
	0x05: func(c *CPU) { ora(c, c.loadZeroPage) },
	0x06: func(c *CPU) { asl(c, c.loadZeroPage) },
	0x08: func(c *CPU) { c.push(c.SR()) }, // php
	0x09: func(c *CPU) { ora(c, c.loadImmediate) },
	0x0a: func(c *CPU) { asl(c, c.loadAccumulator) },
	0x0d: func(c *CPU) { ora(c, c.loadAbsolute) },
	0x0e: func(c *CPU) { asl(c, c.loadAbsolute) },

	0x10: func(c *CPU) { branch(c, !c.N) }, // bpl
	0x11: func(c *CPU) { ora(c, c.loadIndirectY) },
	0x15: func(c *CPU) { ora(c, c.loadZeroPageX) },
	0x16: func(c *CPU) { asl(c, c.loadZeroPageX) },
	0x18: func(c *CPU) { c.C = false }, // clc
	0x19: func(c *CPU) { ora(c, c.loadAbsoluteY) },
	0x1d: func(c *CPU) { ora(c, c.loadAbsoluteX) },
	0x1e: func(c *CPU) { asl(c, c.loadAbsoluteX) },

	0x20: func(c *CPU) { jsr(c) },
	0x21: func(c *CPU) { and(c, c.loadIndirectX) },
	0x24: func(c *CPU) { bit(c, c.loadZeroPage) },
	0x25: func(c *CPU) { and(c, c.loadZeroPage) },
	0x26: func(c *CPU) { rol(c, c.loadZeroPage) },
	0x28: func(c *CPU) { c.SetSR(c.pull()) }, // plp
	0x29: func(c *CPU) { and(c, c.loadImmediate) },
	0x2a: func(c *CPU) { rol(c, c.loadAccumulator) },
	0x2c: func(c *CPU) { bit(c, c.loadAbsolute) },
	0x2d: func(c *CPU) { and(c, c.loadAbsolute) },
	0x2e: func(c *CPU) { rol(c, c.loadAbsolute) },

	0x30: func(c *CPU) { branch(c, c.N) }, // bmi
	0x31: func(c *CPU) { and(c, c.loadIndirectY) },
	0x35: func(c *CPU) { and(c, c.loadZeroPageX) },
	0x36: func(c *CPU) { rol(c, c.loadZeroPageX) },
	0x38: func(c *CPU) { c.C = true }, // sec
	0x39: func(c *CPU) { and(c, c.loadAbsoluteY) },
	0x3d: func(c *CPU) { and(c, c.loadAbsoluteX) },
	0x3e: func(c *CPU) { rol(c, c.loadAbsoluteX) },

	0x40: func(c *CPU) { rti(c) },
	0x41: func(c *CPU) { eor(c, c.loadIndirectX) },
	0x45: func(c *CPU) { eor(c, c.loadZeroPage) },
	0x46: func(c *CPU) { lsr(c, c.loadZeroPage) },
	0x48: func(c *CPU) { c.push(c.A) }, // pha
	0x49: func(c *CPU) { eor(c, c.loadImmediate) },
	0x4a: func(c *CPU) { lsr(c, c.loadAccumulator) },
	0x4c: func(c *CPU) { jmp(c) },
	0x4d: func(c *CPU) { eor(c, c.loadAbsolute) },
	0x4e: func(c *CPU) { lsr(c, c.loadAbsolute) },

	0x50: func(c *CPU) { branch(c, !c.V) }, // bvc
	0x51: func(c *CPU) { eor(c, c.loadIndirectY) },
	0x55: func(c *CPU) { eor(c, c.loadZeroPageX) },
	0x56: func(c *CPU) { lsr(c, c.loadZeroPageX) },
	0x58: func(c *CPU) { c.I = false }, // cli
	0x59: func(c *CPU) { eor(c, c.loadAbsoluteY) },
	0x5d: func(c *CPU) { eor(c, c.loadAbsoluteX) },
	0x5e: func(c *CPU) { lsr(c, c.loadAbsoluteX) },

	0x60: func(c *CPU) { c.PC = c.pull16() }, // rts
	0x61: func(c *CPU) { adc(c, c.loadIndirectX) },
	0x65: func(c *CPU) { adc(c, c.loadZeroPage) },
	0x66: func(c *CPU) { ror(c, c.loadZeroPage) },
	0x68: func(c *CPU) { pla(c) },
	0x69: func(c *CPU) { adc(c, c.loadImmediate) },
	0x6a: func(c *CPU) { ror(c, c.loadAccumulator) },
	0x6c: func(c *CPU) { jmpIndirect(c) },
	0x6d: func(c *CPU) { adc(c, c.loadAbsolute) },
	0x6e: func(c *CPU) { ror(c, c.loadAbsolute) },

	0x70: func(c *CPU) { branch(c, c.V) }, // bvs
	0x71: func(c *CPU) { adc(c, c.loadIndirectY) },
	0x75: func(c *CPU) { adc(c, c.loadZeroPageX) },
	0x76: func(c *CPU) { ror(c, c.loadZeroPageX) },
	0x78: func(c *CPU) { c.I = true }, // sei
	0x79: func(c *CPU) { adc(c, c.loadAbsoluteY) },
	0x7d: func(c *CPU) { adc(c, c.loadAbsoluteX) },
	0x7e: func(c *CPU) { ror(c, c.loadAbsoluteX) },

	0x81: func(c *CPU) { sta(c, c.storeIndirectX) },
	0x84: func(c *CPU) { sty(c, c.storeZeroPage) },
	0x85: func(c *CPU) { sta(c, c.storeZeroPage) },
	0x86: func(c *CPU) { stx(c, c.storeZeroPage) },
	0x88: func(c *CPU) { dey(c) },
	0x8a: func(c *CPU) { transfer(c, c.X, &c.A) },
	0x8c: func(c *CPU) { sty(c, c.storeAbsolute) },
	0x8d: func(c *CPU) { sta(c, c.storeAbsolute) },
	0x8e: func(c *CPU) { stx(c, c.storeAbsolute) },

	0x90: func(c *CPU) { branch(c, !c.C) }, // bcc
	0x91: func(c *CPU) { sta(c, c.storeIndirectY) },
	0x94: func(c *CPU) { sty(c, c.storeZeroPageX) },
	0x95: func(c *CPU) { sta(c, c.storeZeroPageX) },
	0x96: func(c *CPU) { stx(c, c.storeZeroPageY) },
	0x98: func(c *CPU) { transfer(c, c.Y, &c.A) },
	0x99: func(c *CPU) { sta(c, c.storeAbsoluteY) },
	0x9a: func(c *CPU) { c.SP = c.X }, // txs
	0x9d: func(c *CPU) { sta(c, c.storeAbsoluteX) },

	0xa0: func(c *CPU) { ldy(c, c.loadImmediate) },
	0xa1: func(c *CPU) { lda(c, c.loadIndirectX) },
	0xa2: func(c *CPU) { ldx(c, c.loadImmediate) },
	0xa4: func(c *CPU) { ldy(c, c.loadZeroPage) },
	0xa5: func(c *CPU) { lda(c, c.loadZeroPage) },
	0xa6: func(c *CPU) { ldx(c, c.loadZeroPage) },
	0xa8: func(c *CPU) { transfer(c, c.A, &c.Y) },
	0xa9: func(c *CPU) { lda(c, c.loadImmediate) },
	0xaa: func(c *CPU) { transfer(c, c.A, &c.X) },
	0xac: func(c *CPU) { ldy(c, c.loadAbsolute) },
	0xad: func(c *CPU) { lda(c, c.loadAbsolute) },
	0xae: func(c *CPU) { ldx(c, c.loadAbsolute) },

	0xb0: func(c *CPU) { branch(c, c.C) }, // bcs
	0xb1: func(c *CPU) { lda(c, c.loadIndirectY) },
	0xb4: func(c *CPU) { ldy(c, c.loadZeroPageX) },
	0xb5: func(c *CPU) { lda(c, c.loadZeroPageX) },
	0xb6: func(c *CPU) { ldx(c, c.loadZeroPageY) },
	0xb8: func(c *CPU) { c.V = false }, // clv
	0xb9: func(c *CPU) { lda(c, c.loadAbsoluteY) },
	0xba: func(c *CPU) { transfer(c, c.SP, &c.X) }, // tsx
	0xbd: func(c *CPU) { lda(c, c.loadAbsoluteX) },
	0xbc: func(c *CPU) { ldy(c, c.loadAbsoluteX) },
	0xbe: func(c *CPU) { ldx(c, c.loadAbsoluteY) },

	0xc0: func(c *CPU) { cmp(c, c.Y, c.loadImmediate) },
	0xc1: func(c *CPU) { cmp(c, c.A, c.loadIndirectX) },
	0xc4: func(c *CPU) { cmp(c, c.Y, c.loadZeroPage) },
	0xc5: func(c *CPU) { cmp(c, c.A, c.loadZeroPage) },
	0xc6: func(c *CPU) { dec(c, c.loadZeroPage) },
	0xc8: func(c *CPU) { iny(c) },
	0xc9: func(c *CPU) { cmp(c, c.A, c.loadImmediate) },
	0xca: func(c *CPU) { dex(c) },
	0xcc: func(c *CPU) { cmp(c, c.Y, c.loadAbsolute) },
	0xcd: func(c *CPU) { cmp(c, c.A, c.loadAbsolute) },
	0xce: func(c *CPU) { dec(c, c.loadAbsolute) },

	0xd0: func(c *CPU) { branch(c, !c.Z) }, // bne
	0xd1: func(c *CPU) { cmp(c, c.A, c.loadIndirectY) },
	0xd5: func(c *CPU) { cmp(c, c.A, c.loadZeroPageX) },
	0xd6: func(c *CPU) { dec(c, c.loadZeroPageX) },
	0xd8: func(c *CPU) { c.D = false }, // cld
	0xd9: func(c *CPU) { cmp(c, c.A, c.loadAbsoluteY) },
	0xdd: func(c *CPU) { cmp(c, c.A, c.loadAbsoluteX) },
	0xde: func(c *CPU) { dec(c, c.loadAbsoluteX) },

	0xe0: func(c *CPU) { cmp(c, c.X, c.loadImmediate) },
	0xe1: func(c *CPU) { sbc(c, c.loadIndirectX) },
	0xe4: func(c *CPU) { cmp(c, c.X, c.loadZeroPage) },
	0xe5: func(c *CPU) { sbc(c, c.loadZeroPage) },
	0xe6: func(c *CPU) { inc(c, c.loadZeroPage) },
	0xe8: func(c *CPU) { inx(c) },
	0xe9: func(c *CPU) { sbc(c, c.loadImmediate) },
	0xea: func(c *CPU) {}, // nop
	0xec: func(c *CPU) { cmp(c, c.X, c.loadAbsolute) },
	0xed: func(c *CPU) { sbc(c, c.loadAbsolute) },
	0xee: func(c *CPU) { inc(c, c.loadAbsolute) },

	0xf0: func(c *CPU) { branch(c, c.Z) }, // beq
	0xf1: func(c *CPU) { sbc(c, c.loadIndirectY) },
	0xf5: func(c *CPU) { sbc(c, c.loadZeroPageX) },
	0xf6: func(c *CPU) { inc(c, c.loadZeroPageX) },
	0xf8: func(c *CPU) { c.D = true }, // sed
	0xf9: func(c *CPU) { sbc(c, c.loadAbsoluteY) },
	0xfd: func(c *CPU) { sbc(c, c.loadAbsoluteX) },
	0xfe: func(c *CPU) { inc(c, c.loadAbsoluteX) },
}
