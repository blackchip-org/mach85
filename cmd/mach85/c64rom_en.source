{"comments":{"41866":"copy stack pointer","41867":"+1 pass return address","41868":"+2 pass return address","41869":"+3 pass calling routine return address","41870":"+4 pass calling routine return address","41871":"get the token byte from the stack","41874":"is it the FOR token","41876":"if not FOR token just exit\nit was the FOR token","41878":"get FOR/NEXT variable pointer high byte","41880":"branch if not null","41882":"get FOR variable pointer low byte","41885":"save FOR/NEXT variable pointer low byte","41887":"get FOR variable pointer high byte","41890":"save FOR/NEXT variable pointer high byte","41892":"compare variable pointer with stacked variable pointer\nhigh byte","41895":"branch if no match","41897":"get FOR/NEXT variable pointer low byte","41899":"compare variable pointer with stacked variable pointer\nlow byte","41902":"exit if match found","41904":"copy index","41905":"clear carry for add","41906":"add FOR stack use size","41908":"copy back to index","41909":"loop if not at start of stack","41912":"check available memory, do out of memory error if no room","41915":"set end of arrays low byte","41917":"set end of arrays high byte\nopen up a space in the memory, don't set the array end","41919":"set carry for subtract","41920":"get block end low byte","41922":"subtract block start low byte","41924":"save MOD(block length/$100) byte","41926":"copy MOD(block length/$100) byte to Y","41927":"get block end high byte","41929":"subtract block start high byte","41931":"copy block length high byte to X","41932":"+1 to allow for count=0 exit","41933":"copy block length low byte to A","41934":"branch if length low byte=0\nblock is (X-1)*256+Y bytes, do the Y bytes first","41936":"get block end low byte","41938":"set carry for subtract","41939":"subtract MOD(block length/$100) byte","41941":"save corrected old block end low byte","41943":"branch if no underflow","41945":"else decrement block end high byte","41947":"set carry for subtract","41948":"get destination end low byte","41950":"subtract MOD(block length/$100) byte","41952":"save modified new block end low byte","41954":"branch if no underflow","41956":"else decrement block end high byte","41958":"branch always","41960":"get byte from source","41962":"copy byte to destination","41964":"decrement index","41965":"loop until Y=0\nnow do Y=0 indexed byte","41967":"get byte from source","41969":"save byte to destination","41971":"decrement source pointer high byte","41973":"decrement destination pointer high byte","41975":"decrement block count","41976":"loop until count = $0","41979":"*2","41980":"need at least $3E bytes free","41982":"if overflow go do out of memory error then warm start","41984":"save result in temp byte","41986":"copy stack","41987":"compare new limit with stack","41989":"if stack \u003c limit do out of memory error then warm start","41992":"compare with bottom of string space high byte","41994":"if less then exit (is ok)","41996":"skip next test if greater (tested \u003c)\nhigh byte was =, now do low byte","41998":"compare with bottom of string space low byte","42000":"if less then exit (is ok)\naddress is \u003e string storage ptr (oops!)","42002":"push address low byte","42003":"set index to save $57 to $60 inclusive","42005":"copy address high byte (to push on stack)\nsave misc numeric work area","42006":"push byte","42007":"get byte from $57 to $60","42009":"decrement index","42010":"loop until all done","42012":"do garbage collection routine\nrestore misc numeric work area","42015":"set index to restore bytes","42017":"pop byte","42018":"save byte to $57 to $60","42020":"increment index","42021":"loop while -ve","42023":"pop address high byte","42024":"copy back to Y","42025":"pop address low byte","42026":"compare with bottom of string space high byte","42028":"if less then exit (is ok)","42030":"if greater do out of memory error then warm start\nhigh byte was =, now do low byte","42032":"compare with bottom of string space low byte","42034":"if \u003e= do out of memory error then warm start\nok exit, carry clear","42037":"error code $10, out of memory error\ndo error #X then warm start","42039":"do error message","42042":"copy error number","42043":"*2","42044":"copy to index","42045":"get error message pointer low byte","42048":"save it","42050":"get error message pointer high byte","42053":"save it","42055":"close input and output channels","42058":"clear A","42060":"clear current I/O channel, flag default","42062":"print CR/LF","42065":"print \"?\"","42068":"clear index","42070":"get byte from message","42072":"save status","42073":"mask 0xxx xxxx, clear b7","42075":"output character","42078":"increment index","42079":"restore status","42080":"loop if character was not end marker","42082":"flush BASIC stack and clear continue pointer","42085":"set \" ERROR\" pointer low byte","42087":"set \" ERROR\" pointer high byte","42089":"print null terminated string","42092":"get current line number high byte","42094":"increment it","42095":"branch if was in immediate mode","42097":"do \" IN \" line number message","42100":"set \"READY.\" pointer low byte","42102":"set \"READY.\" pointer high byte","42104":"print null terminated string","42107":"set for control messages only","42109":"control kernal messages","42112":"do BASIC warm start","42115":"call for BASIC input","42118":"save BASIC execute pointer low byte","42120":"save BASIC execute pointer high byte","42122":"increment and scan memory","42125":"copy byte to set flags","42126":"loop if no input\ngot to interpret the input line now ....","42128":"current line high byte to -1, indicates immediate mode","42130":"set current line number high byte","42132":"if numeric character go handle new BASIC line\nno line number .. immediate mode","42134":"crunch keywords into BASIC tokens","42137":"go scan and interpret code","42140":"get fixed-point number into temporary integer","42143":"crunch keywords into BASIC tokens","42146":"save index pointer to end of crunched line","42148":"search BASIC for temporary integer line number","42151":"if not found skip the line delete\nline # already exists so delete it","42153":"set index to next line pointer high byte","42155":"get next line pointer high byte","42157":"save it","42159":"get start of variables low byte","42161":"save it","42163":"get found line pointer high byte","42165":"save it","42167":"get found line pointer low byte","42169":"decrement index","42170":"subtract next line pointer low byte","42172":"clear carry for add","42173":"add start of variables low byte","42175":"set start of variables low byte","42177":"save destination pointer low byte","42179":"get start of variables high byte","42181":"-1 + carry","42183":"set start of variables high byte","42185":"subtract found line pointer high byte","42187":"copy to block count","42188":"set carry for subtract","42189":"get found line pointer low byte","42191":"subtract start of variables low byte","42193":"copy to bytes in first block count","42194":"branch if no underflow","42196":"increment block count, correct for = 0 loop exit","42197":"decrement destination high byte","42199":"clear carry for add","42200":"add source pointer low byte","42202":"branch if no overflow","42204":"else decrement source pointer high byte","42206":"clear carry\nclose up memory to delete old line","42207":"get byte from source","42209":"copy to destination","42211":"increment index","42212":"while \u003c\u003e 0 do this block","42214":"increment source pointer high byte","42216":"increment destination pointer high byte","42218":"decrement block count","42219":"loop until all done\ngot new line in buffer and no existing same #","42221":"reset execution to start, clear variables, flush stack\nand return","42224":"rebuild BASIC line chaining","42227":"get first byte from buffer","42230":"if no line go do BASIC warm start\nelse insert line into memory","42232":"clear carry for add","42233":"get start of variables low byte","42235":"save as source end pointer low byte","42237":"add index pointer to end of crunched line","42239":"save as destination end pointer low byte","42241":"get start of variables high byte","42243":"save as source end pointer high byte","42245":"branch if no carry to high byte","42247":"else increment high byte","42248":"save as destination end pointer high byte","42250":"open up space in memory\nmost of what remains to do is copy the crunched line into the space opened up in memory,\nhowever, before the crunched line comes the next line pointer and the line number. the\nline number is retrieved from the temporary integer and stored in memory, this\noverwrites the bottom two bytes on the stack. next the line is copied and the next line\npointer is filled with whatever was in two bytes above the line number in the stack.\nthis is ok because the line pointer gets fixed in the line chain re-build.","42253":"get line number low byte","42255":"get line number high byte","42257":"save line number low byte before crunched line","42260":"save line number high byte before crunched line","42263":"get end of arrays low byte","42265":"get end of arrays high byte","42267":"set start of variables low byte","42269":"set start of variables high byte","42271":"get index to end of crunched line","42273":"-1","42274":"get byte from crunched line","42277":"save byte to memory","42279":"decrement index","42280":"loop while more to do\nreset execution, clear variables, flush stack, rebuild BASIC chain and do warm start","42282":"reset execution to start, clear variables and flush stack","42285":"rebuild BASIC line chaining","42288":"go do BASIC warm start","42291":"get start of memory low byte","42293":"get start of memory high byte","42295":"set line start pointer low byte","42297":"set line start pointer high byte","42299":"clear carry for add","42300":"set index to pointer to next line high byte","42302":"get pointer to next line high byte","42304":"exit if null, [EOT]","42306":"point to first code byte of line\nthere is always 1 byte + [EOL] as null entries are deleted","42308":"next code byte","42309":"get byte","42311":"loop if not [EOL]","42313":"point to byte past [EOL], start of next line","42314":"copy it","42315":"add line start pointer low byte","42317":"copy to X","42318":"clear index, point to this line's next line pointer","42320":"set next line pointer low byte","42322":"get line start pointer high byte","42324":"add any overflow","42326":"increment index to high byte","42327":"set next line pointer high byte","42329":"set line start pointer low byte","42331":"set line start pointer high byte","42333":"go do next line, branch always","42336":"set channel $00, keyboard","42338":"input character from channel with error check","42341":"compare with [CR]","42343":"if [CR] set XY to $200 - 1, print [CR] and exit\ncharacter was not [CR]","42345":"save character to buffer","42348":"increment buffer index","42349":"compare with max+1","42351":"branch if \u003c max+1","42353":"error $17, string too long error","42355":"do error #X then warm start","42358":"set XY to $200 - 1 and print [CR]","42361":"do crunch BASIC tokens","42364":"get BASIC execute pointer low byte","42366":"set save index","42368":"clear open quote/DATA flag","42370":"get a byte from the input buffer","42373":"if b7 clear go do crunching","42375":"compare with the token for PI, this toke is input\ndirectly from the keyboard as the PI character","42377":"if PI save byte then continue crunching\nthis is the bit of code that stops you being able to enter\nsome keywords as just single shifted characters. If this\ndropped through you would be able to enter GOTO as just\n[SHIFT]G","42379":"increment read index","42380":"loop if more to do, branch always","42382":"compare with [SPACE]","42384":"if [SPACE] save byte then continue crunching","42386":"save buffer byte as search character","42388":"compare with quote character","42390":"if quote go copy quoted string","42392":"get open quote/DATA token flag","42394":"branch if b6 of Oquote set, was DATA\ngo save byte then continue crunching","42396":"compare with \"?\" character","42398":"if not \"?\" continue crunching","42400":"else the keyword token is $99, PRINT","42402":"go save byte then continue crunching, branch always","42404":"compare with \"0\"","42406":"branch if \u003c, continue crunching","42408":"compare with \"\u003c\"","42410":"if \u003c, 0123456789:; go save byte then continue crunching\ngets here with next character not numeric, \";\" or \":\"","42412":"copy save index","42414":"clear table pointer","42416":"clear word index","42418":"adjust for pre increment loop","42419":"save BASIC execute pointer low byte, buffer index","42421":"adjust for pre increment loop","42422":"next table byte","42423":"next buffer byte","42424":"get byte from input buffer","42427":"set carry for subtract","42428":"subtract table byte","42431":"go compare next if match","42433":"was it end marker match ?","42435":"branch if not, not found keyword\nactually this works even if the input buffer byte is the\nend marker, i.e. a shifted character. As you can't enter\nany keywords as a single shifted character, see above,\nyou can enter keywords in shorthand by shifting any\ncharacter after the first. so RETURN can be entered as\nR[SHIFT]E, RE[SHIFT]T, RET[SHIFT]U or RETU[SHIFT]R.\nRETUR[SHIFT]N however will not work because the [SHIFT]N\nwill match the RETURN end marker so the routine will try\nto match the next character.\nelse found keyword","42437":"OR with word index, +$80 in A makes token","42439":"restore save index\nsave byte then continue crunching","42441":"increment buffer read index","42442":"increment save index","42443":"save byte to output","42446":"get byte from output, set flags","42449":"branch if was null [EOL]\nA holds the token here","42451":"set carry for subtract","42452":"subtract \":\"","42454":"branch if it was (is now $00)\nA now holds token-':'","42456":"compare with the token for DATA-':'","42458":"if not DATA go try REM\ntoken was : or DATA","42460":"save the token-$3A","42462":"set carry for subtract","42463":"subtract the token for REM-':'","42465":"if wasn't REM crunch next bit of line","42467":"else was REM so set search for [EOL]\nloop for \"...\" etc.","42469":"get byte from input buffer","42472":"if null [EOL] save byte then continue crunching","42474":"compare with stored character","42476":"if match save byte then continue crunching","42478":"increment save index","42479":"save byte to output","42482":"increment buffer index","42483":"loop while \u003c\u003e 0, should never reach 0\nnot found keyword this go","42485":"restore BASIC execute pointer low byte","42487":"increment word index (next word)\nnow find end of this word in the table","42489":"increment table index","42490":"get table byte","42493":"loop if not end of word yet","42495":"get byte from keyword table","42498":"go test next word if not zero byte, end of table\nreached end of table with no match","42500":"restore byte from input buffer","42503":"branch always, all unmatched bytes in the buffer are\n$00 to $7F, go save byte in output and continue crunching\nreached [EOL]","42505":"save [EOL]","42508":"decrement BASIC execute pointer high byte","42510":"point to start of buffer-1","42512":"set BASIC execute pointer low byte","42515":"get start of memory low byte","42517":"get start of memory high byte","42519":"set index to next line pointer high byte","42521":"save low byte as current","42523":"save high byte as current","42525":"get next line pointer high byte from address","42527":"pointer was zero so done, exit","42529":"increment index ...","42530":"... to line # high byte","42531":"get temporary integer high byte","42533":"compare with line # high byte","42535":"exit if temp \u003c this line, target line passed","42537":"go check low byte if =","42539":"else decrement index","42540":"branch always","42542":"get temporary integer low byte","42544":"decrement index to line # low byte","42545":"compare with line # low byte","42547":"exit if temp \u003c this line, target line passed","42549":"exit if temp = (found line#)\nnot quite there yet","42551":"decrement index to next line pointer high byte","42552":"get next line pointer high byte","42554":"copy to X","42555":"decrement index to next line pointer low byte","42556":"get next line pointer low byte","42558":"go search for line # in temporary integer\nfrom AX, carry always set","42560":"clear found flag","42562":"exit if following byte to allow syntax error","42564":"clear A","42566":"clear index","42567":"clear pointer to next line low byte","42569":"increment index","42570":"clear pointer to next line high byte, erase program","42572":"get start of memory low byte","42574":"clear carry for add","42575":"add null program length","42577":"set start of variables low byte","42579":"get start of memory high byte","42581":"add carry","42583":"set start of variables high byte","42585":"set BASIC execute pointer to start of memory - 1","42588":"set Zb for CLR entry","42590":"exit if following byte to allow syntax error","42592":"close all channels and files","42595":"get end of memory low byte","42597":"get end of memory high byte","42599":"set bottom of string space low byte, clear strings","42601":"set bottom of string space high byte","42603":"get start of variables low byte","42605":"get start of variables high byte","42607":"set end of variables low byte, clear variables","42609":"set end of variables high byte","42611":"set end of arrays low byte, clear arrays","42613":"set end of arrays high byte","42615":"perform RESTORE","42618":"get the descriptor stack start","42620":"set the descriptor stack pointer","42622":"pull the return address low byte","42623":"copy it","42624":"pull the return address high byte","42625":"set the cleared stack pointer","42627":"set the stack","42628":"push the return address high byte","42629":"restore the return address low byte","42630":"push the return address low byte","42631":"clear A","42633":"clear the continue pointer high byte","42635":"clear the subscript/FNX flag","42638":"clear carry for add","42639":"get start of memory low byte","42641":"add -1 low byte","42643":"set BASIC execute pointer low byte","42645":"get start of memory high byte","42647":"add -1 high byte","42649":"save BASIC execute pointer high byte","42652":"branch if next character not token (LIST n...)","42654":"branch if next character [NULL] (LIST)","42656":"compare with token for -","42658":"exit if not - (LIST -m)\nLIST [[n][-m]]\nthis bit sets the n , if present, as the start and end","42660":"get fixed-point number into temporary integer","42663":"search BASIC for temporary integer line number","42666":"scan memory","42669":"branch if no more chrs\nthis bit checks the - is present","42671":"compare with token for -","42673":"return if not \"-\" (will be SN error)\nLIST [n]-m\nthe - was there so set m as the end value","42675":"increment and scan memory","42678":"get fixed-point number into temporary integer","42681":"exit if not ok","42683":"dump return address low byte, exit via warm start","42684":"dump return address high byte","42685":"get temporary integer low byte","42687":"OR temporary integer high byte","42689":"branch if start set","42691":"set for -1","42693":"set temporary integer low byte","42695":"set temporary integer high byte","42697":"set index for line","42699":"clear open quote flag","42701":"get next line pointer high byte","42703":"if null all done so exit","42705":"do CRTL-C check vector","42708":"print CR/LF","42711":"increment index for line","42712":"get line number low byte","42714":"copy to X","42715":"increment index","42716":"get line number high byte","42718":"compare with temporary integer high byte","42720":"branch if no high byte match","42722":"compare with temporary integer low byte","42724":"branch if = last line to do, \u003c will pass next branch\nelse","42726":"if greater all done so exit","42728":"save index for line","42730":"print XA as unsigned integer","42733":"space is the next character","42735":"get index for line","42737":"mask top out bit of character","42739":"go print the character","42742":"was it \" character","42744":"if not skip the quote handle\nwe are either entering or leaving a pair of quotes","42746":"get open quote flag","42748":"toggle it","42750":"save it back","42752":"increment index","42753":"line too long so just bail out and do a warm start","42755":"get next byte","42757":"if not [EOL] (go print character)\nwas [EOL]","42759":"else clear index","42760":"get next line pointer low byte","42762":"copy to X","42763":"increment index","42764":"get next line pointer high byte","42766":"set pointer to line low byte","42768":"set pointer to line high byte","42770":"go do next line if not [EOT]\nelse ...","42772":"do warm start","42775":"do uncrunch BASIC tokens","42778":"just go print it if not token byte\nelse was token byte so uncrunch it","42780":"compare with the token for PI. in this case the token\nis the same as the PI character so it just needs printing","42782":"just print it if so","42784":"test the open quote flag","42786":"just go print character if open quote set","42788":"else set carry for subtract","42789":"reduce token range to 1 to whatever","42791":"copy token # to X","42792":"save index for line","42794":"start from -1, adjust for pre increment","42796":"decrement token #","42797":"if now found go do printing","42799":"else increment index","42800":"get byte from keyword table","42803":"loop until keyword end marker","42805":"go test if this is required keyword, branch always\nfound keyword, it's the next one","42807":"increment keyword table index","42808":"get byte from table","42811":"go restore index, mask byte and print if\nbyte was end marker","42813":"else go print the character","42816":"go get next character, branch always","42818":"set FNX","42820":"set subscript/FNX flag","42822":"perform LET","42825":"search the stack for FOR or GOSUB activity","42828":"branch if FOR, this variable, not found\nFOR, this variable, was found so first we dump the old one","42830":"copy index","42831":"add FOR structure size-2","42833":"copy to index","42834":"set stack (dump FOR structure (-2 bytes))","42835":"pull return address","42836":"pull return address","42837":"we need 18d bytes !","42839":"check room on stack for 2*A bytes","42842":"scan for next BASIC statement ([:] or [EOL])","42845":"clear carry for add","42846":"copy index to A","42847":"add BASIC execute pointer low byte","42849":"push onto stack","42850":"get BASIC execute pointer high byte","42852":"add carry","42854":"push onto stack","42855":"get current line number high byte","42857":"push onto stack","42858":"get current line number low byte","42860":"push onto stack","42861":"set \"TO\" token","42863":"scan for CHR$(A), else do syntax error then warm start","42866":"check if source is numeric, else do type mismatch","42869":"evaluate expression and check is numeric, else do\ntype mismatch","42872":"get FAC1 sign (b7)","42874":"set all non sign bits","42876":"and FAC1 mantissa 1","42878":"save FAC1 mantissa 1","42880":"set return address low byte","42882":"set return address high byte","42884":"save return address low byte","42886":"save return address high byte","42888":"round FAC1 and put on stack, returns to next instruction","42891":"set 1 pointer low address, default step size","42893":"set 1 pointer high address","42895":"unpack memory (AY) into FAC1","42898":"scan memory","42901":"compare with STEP token","42903":"if not \"STEP\" continue\nwas step so ....","42905":"increment and scan memory","42908":"evaluate expression and check is numeric, else do\ntype mismatch","42911":"get FAC1 sign, return A = $FF -ve, A = $01 +ve","42914":"push sign, round FAC1 and put on stack","42917":"get FOR/NEXT variable pointer high byte","42919":"push on stack","42920":"get FOR/NEXT variable pointer low byte","42922":"push on stack","42923":"get FOR token","42925":"push on stack","42926":"do CRTL-C check vector","42929":"get the BASIC execute pointer low byte","42931":"get the BASIC execute pointer high byte","42933":"compare the high byte with $02xx","42935":"unused byte","42936":"if immediate mode skip the continue pointer save","42938":"save the continue pointer low byte","42940":"save the continue pointer high byte","42942":"clear the index","42944":"get a BASIC byte","42946":"if not [EOL] go test for \":\"","42948":"else set the index","42950":"get next line pointer high byte","42952":"clear carry for no \"BREAK\" message","42953":"branch if not end of program","42955":"else go to immediate mode,was immediate or [EOT] marker","42958":"increment index","42959":"get line number low byte","42961":"save current line number low byte","42963":"increment index","42964":"get line # high byte","42966":"save current line number high byte","42968":"A now = 4","42969":"add BASIC execute pointer low byte, now points to code","42971":"save BASIC execute pointer low byte","42973":"branch if no overflow","42975":"else increment BASIC execute pointer high byte","42977":"do start new BASIC code","42980":"increment and scan memory","42983":"go interpret BASIC code from BASIC execute pointer","42986":"loop","42989":"if the first byte is null just exit","42991":"normalise the token","42993":"if wasn't token go do LET","42995":"compare with token for TAB(-$80","42997":"branch if \u003e= TAB(","42999":"*2 bytes per vector","43000":"copy to index","43001":"get vector high byte","43004":"push on stack","43005":"get vector low byte","43008":"push on stack","43009":"increment and scan memory and return. the return in\nthis case calls the command code, the return from\nthat will eventually return to the interpreter inner\nloop above","43012":"perform LET\nwas not [EOL]","43015":"comapre with \":\"","43017":"if \":\" go execute new code\nelse ...","43019":"do syntax error then warm start\ntoken was \u003e= TAB(","43022":"compare with the token for GO","43024":"if not \"GO\" do syntax error then warm start\nelse was \"GO\"","43026":"increment and scan memory","43029":"set \"TO\" token","43031":"scan for CHR$(A), else do syntax error then warm start","43034":"perform GOTO","43037":"set carry for subtract","43038":"get start of memory low byte","43040":"-1","43042":"get start of memory high byte","43044":"branch if no rollunder","43046":"else decrement high byte","43047":"set DATA pointer low byte","43049":"set DATA pointer high byte","43052":"scan stop key","43055":"if carry set do BREAK instead of just END","43057":"clear carry","43058":"return if wasn't CTRL-C","43060":"get BASIC execute pointer low byte","43062":"get BASIC execute pointer high byte","43064":"get current line number high byte","43066":"increment it","43067":"branch if was immediate mode","43069":"save continue pointer low byte","43071":"save continue pointer high byte","43073":"get current line number low byte","43075":"get current line number high byte","43077":"save break line number low byte","43079":"save break line number high byte","43081":"dump return address low byte","43082":"dump return address high byte","43083":"set [CR][LF]\"BREAK\" pointer low byte","43085":"set [CR][LF]\"BREAK\" pointer high byte","43087":"if was program end skip the print string","43089":"print string and do warm start","43092":"do warm start","43095":"exit if following byte to allow syntax error","43097":"error code $1A, can't continue error","43099":"get continue pointer high byte","43101":"go do continue if we can","43103":"else do error #X then warm start\nwe can continue so ...","43106":"get continue pointer low byte","43108":"save BASIC execute pointer low byte","43110":"save BASIC execute pointer high byte","43112":"get break line low byte","43114":"get break line high byte","43116":"set current line number low byte","43118":"set current line number high byte","43121":"save status","43122":"no control or kernal messages","43124":"control kernal messages","43127":"restore status","43128":"branch if RUN n","43130":"reset execution to start, clear variables, flush stack\nand return","43133":"go do \"CLEAR\"","43136":"get n and do GOTO n","43139":"need 6 bytes for GOSUB","43141":"check room on stack for 2*A bytes","43144":"get BASIC execute pointer high byte","43146":"save it","43147":"get BASIC execute pointer low byte","43149":"save it","43150":"get current line number high byte","43152":"save it","43153":"get current line number low byte","43155":"save it","43156":"token for GOSUB","43158":"save it","43159":"scan memory","43162":"perform GOTO","43165":"go do interpreter inner loop","43168":"get fixed-point number into temporary integer","43171":"scan for next BASIC line","43174":"set carry for subtract","43175":"get current line number low byte","43177":"subtract temporary integer low byte","43179":"get current line number high byte","43181":"subtract temporary integer high byte","43183":"if current line number \u003e= temporary integer, go search\nfrom the start of memory","43185":"else copy line index to A","43186":"set carry (+1)","43187":"add BASIC execute pointer low byte","43189":"get BASIC execute pointer high byte","43191":"branch if no overflow to high byte","43193":"increment high byte","43194":"branch always (can never be carry)","43196":"get start of memory low byte","43198":"get start of memory high byte","43200":"search Basic for temp integer line number from AX","43203":"if carry clear go do unsdefined statement error\ncarry all ready set for subtract","43205":"get pointer low byte","43207":"-1","43209":"save BASIC execute pointer low byte","43211":"get pointer high byte","43213":"subtract carry","43215":"save BASIC execute pointer high byte","43218":"exit if following token to allow syntax error","43220":"set byte so no match possible","43222":"save FOR/NEXT variable pointer high byte","43224":"search the stack for FOR or GOSUB activity,\nget token off stack","43227":"correct the stack","43228":"compare with GOSUB token","43230":"if matching GOSUB go continue RETURN","43232":"else error code $04, return without gosub error","43235":"error code $11, undefined statement error","43237":"do error #X then warm start","43240":"do syntax error then warm start\nwas matching GOSUB token","43243":"dump token byte","43244":"pull return line low byte","43245":"save current line number low byte","43247":"pull return line high byte","43248":"save current line number high byte","43250":"pull return address low byte","43251":"save BASIC execute pointer low byte","43253":"pull return address high byte","43254":"save BASIC execute pointer high byte","43256":"scan for next BASIC statement ([:] or [EOL])","43259":"copy index to A","43260":"clear carry for add","43261":"add BASIC execute pointer low byte","43263":"save BASIC execute pointer low byte","43265":"skip increment if no carry","43267":"else increment BASIC execute pointer high byte","43270":"set look for character = \":\"","43273":"set alternate search character = [EOL]","43275":"store alternate search character","43277":"set search character = [EOL]","43279":"save the search character","43281":"get search character","43283":"get alternate search character","43285":"make search character = alternate search character","43287":"make alternate search character = search character","43289":"get BASIC byte","43291":"exit if null [EOL]","43293":"compare with search character","43295":"exit if found","43297":"else increment index","43298":"compare current character with open quote","43300":"if found go swap search character for alternate search\ncharacter","43302":"loop for next character, branch always","43304":"evaluate expression","43307":"scan memory","43310":"compare with \"GOTO\" token","43312":"if it was  the token for GOTO go do IF ... GOTO\nwasn't IF ... GOTO so must be IF ... THEN","43314":"set \"THEN\" token","43316":"scan for CHR$(A), else do syntax error then warm start","43319":"get FAC1 exponent","43321":"if result was non zero continue execution\nelse REM rest of line","43323":"scan for next BASIC line","43326":"add Y to the BASIC execute pointer and return, branch\nalways\nresult was non zero so do rest of line","43328":"scan memory","43331":"branch if not numeric character, is variable or keyword","43333":"else perform GOTO n\nis variable or keyword","43336":"interpret BASIC code from BASIC execute pointer","43339":"get byte parameter","43342":"push next character","43343":"compare with GOSUB token","43345":"if GOSUB go see if it should be executed","43347":"compare with GOTO token","43349":"if not GOTO do syntax error then warm start\nnext character was GOTO or GOSUB, see if it should be executed","43351":"decrement the byte value","43353":"if not zero go see if another line number exists","43355":"pull keyword token","43356":"go execute it","43359":"increment and scan memory","43362":"get fixed-point number into temporary integer\nskip this n","43365":"compare next character with \",\"","43367":"loop if \",\"","43369":"else pull keyword token, ran out of options","43371":"clear X","43373":"clear temporary integer low byte","43375":"clear temporary integer high byte","43377":"return if carry set, end of scan, character was not 0-9","43379":"subtract $30, $2F+carry, from byte","43381":"store #","43383":"get temporary integer high byte","43385":"save it for now","43387":"compare with $19","43389":"branch if \u003e= this makes the maximum line number 63999\nbecause the next bit does $1900 * $0A = $FA00 = 64000\ndecimal. the branch target is really the SYNTAX error\nat $A8E8 but that is too far so an intermediate\ncompare and branch to that location is used. the problem\nwith this is that line number that gives a partial result\nfrom $8900 to $89FF, 35072x to 35327x, will pass the new\ntarget compare and will try to execute the remainder of\nthe ON n GOTO/GOSUB. a solution to this is to copy the\nbyte in A before the branch to X and then branch to\n$A955 skipping the second compare","43391":"get temporary integer low byte","43393":"*2 low byte","43394":"*2 high byte","43396":"*2 low byte","43397":"*2 high byte (*4)","43399":"+ low byte (*5)","43401":"save it","43403":"get high byte temp","43405":"+ high byte (*5)","43407":"save it","43409":"*2 low byte (*10d)","43411":"*2 high byte (*10d)","43413":"get low byte","43415":"add #","43417":"save low byte","43419":"branch if no overflow to high byte","43421":"else increment high byte","43423":"increment and scan memory","43426":"loop for next character","43429":"get variable address","43432":"save variable address low byte","43434":"save variable address high byte","43436":"$B2 is \"=\" token","43438":"scan for CHR$(A), else do syntax error then warm start","43441":"get data type flag, $80 = integer, $00 = float","43443":"push data type flag","43444":"get data type flag, $FF = string, $00 = numeric","43446":"push data type flag","43447":"evaluate expression","43450":"pop data type flag","43451":"string bit into carry","43452":"do type match check","43455":"branch if string","43457":"pop integer/float data type flag\nassign value to numeric variable","43458":"branch if float\nexpression is numeric integer","43460":"round FAC1","43463":"evaluate integer expression, no sign check","43466":"clear index","43468":"get FAC1 mantissa 3","43470":"save as integer variable low byte","43472":"increment index","43473":"get FAC1 mantissa 4","43475":"save as integer variable high byte","43478":"pack FAC1 into variable pointer and return\nassign value to numeric variable","43481":"dump integer/float data type flag","43482":"get variable pointer high byte","43484":"was it TI$ pointer","43486":"branch if not\nelse it's TI$ = \u003cexpr$\u003e","43488":"pop string off descriptor stack, or from top of string\nspace returns with A = length, X = pointer low byte,\nY = pointer high byte","43491":"compare length with 6","43493":"if length not 6 do illegal quantity error then warm start","43495":"clear index","43497":"clear FAC1 exponent","43499":"clear FAC1 sign (b7)","43501":"save index","43503":"check and evaluate numeric digit","43506":"multiply FAC1 by 10","43509":"increment index","43511":"restore index","43513":"check and evaluate numeric digit","43516":"round and copy FAC1 to FAC2","43519":"copy FAC1 exponent","43520":"branch if FAC1 zero","43522":"increment index, * 2","43523":"copy back to A","43524":"FAC1 = (FAC1 + (FAC2 * 2)) * 2 = FAC1 * 6","43527":"get index","43529":"increment index","43530":"compare index with 6","43532":"loop if not 6","43534":"multiply FAC1 by 10","43537":"convert FAC1 floating to fixed","43540":"get FAC1 mantissa 3","43542":"get FAC1 mantissa 2","43544":"get FAC1 mantissa 4","43546":"set real time clock and return","43549":"get byte from string","43551":"clear Cb if numeric. this call should be to $84\nas the code from $80 first comapres the byte with\n[SPACE] and does a BASIC increment and get if it is","43554":"branch if numeric","43556":"do illegal quantity error then warm start","43559":"subtract $2F + carry to convert ASCII to binary","43561":"evaluate new ASCII digit and return","43564":"index to string pointer high byte","43566":"get string pointer high byte","43568":"compare with bottom of string space high byte","43570":"branch if string pointer high byte is less than bottom\nof string space high byte","43572":"branch if string pointer high byte is greater than\nbottom of string space high byte\nelse high bytes were equal","43574":"decrement index to string pointer low byte","43575":"get string pointer low byte","43577":"compare with bottom of string space low byte","43579":"branch if string pointer low byte is less than bottom\nof string space low byte","43581":"get descriptor pointer high byte","43583":"compare with start of variables high byte","43585":"branch if less, is on string stack","43587":"if greater make space and copy string\nelse high bytes were equal","43589":"get descriptor pointer low byte","43591":"compare with start of variables low byte","43593":"if greater or equal make space and copy string","43595":"get descriptor pointer low byte","43597":"get descriptor pointer high byte","43599":"go copy descriptor to variable","43602":"clear index","43604":"get string length","43606":"copy descriptor pointer and make string space A bytes long","43609":"copy old descriptor pointer low byte","43611":"copy old descriptor pointer high byte","43613":"save old descriptor pointer low byte","43615":"save old descriptor pointer high byte","43617":"copy string from descriptor to utility pointer","43620":"get descriptor pointer low byte","43622":"get descriptor pointer high byte","43624":"save descriptor pointer low byte","43626":"save descriptor pointer high byte","43628":"clean descriptor stack, YA = pointer","43631":"clear index","43633":"get string length from new descriptor","43635":"copy string length to variable","43637":"increment index","43638":"get string pointer low byte from new descriptor","43640":"copy string pointer low byte to variable","43642":"increment index","43643":"get string pointer high byte from new descriptor","43645":"copy string pointer high byte to variable","43648":"perform CMD","43651":"close input and output channels and return","43654":"get byte parameter","43657":"branch if following byte is \":\" or [EOT]","43659":"set \",\"","43661":"scan for CHR$(A), else do syntax error then warm start","43664":"save status","43665":"set current I/O channel","43667":"open channel for output with error check","43670":"restore status","43671":"perform PRINT","43674":"print string from utility pointer","43677":"scan memory","43680":"if nothing following just print CR/LF","43682":"exit if nothing following, end of PRINT branch","43684":"compare with token for TAB(","43686":"if TAB( go handle it","43688":"compare with token for SPC(","43690":"flag SPC(","43691":"if SPC( go handle it","43693":"compare with \",\"","43695":"if \",\" go skip to the next TAB position","43697":"compare with \";\"","43699":"if \";\" go continue the print loop","43701":"evaluate expression","43704":"test data type flag, $FF = string, $00 = numeric","43706":"if string go print string, scan memory and continue PRINT","43708":"convert FAC1 to ASCII string result in (AY)","43711":"print \" terminated string to utility pointer","43714":"print string from utility pointer","43717":"print [SPACE] or [CURSOR RIGHT]","43720":"go scan memory and continue PRINT, branch always","43722":"clear A","43724":"clear first byte of input buffer","43727":"$0200 - 1 low byte","43729":"$0200 - 1 high byte","43731":"get current I/O channel","43733":"exit if not default channel","43735":"set [CR]","43737":"print the character","43740":"test current I/O channel","43742":"if ?? toggle A, EOR #$FF and return","43744":"set [LF]","43746":"print the character\ntoggle A","43749":"invert A","43752":"set Cb for read cursor position","43753":"read/set X,Y cursor position","43756":"copy cursor Y","43757":"set carry for subtract","43758":"subtract one TAB length","43760":"loop if result was +ve","43762":"complement it","43764":"+1, twos complement","43766":"always print A spaces, result is never $00","43768":"save TAB( or SPC( status","43769":"set Cb for read cursor position","43770":"read/set X,Y cursor position","43773":"save current cursor position","43775":"scan and get byte parameter","43778":"compare with \")\"","43780":"if not \")\" do syntax error","43782":"restore TAB( or SPC( status","43783":"branch if was SPC(\nelse was TAB(","43785":"copy TAB() byte to A","43786":"subtract current cursor position","43788":"go loop for next if already past requited position","43790":"copy [SPACE] count to X","43791":"increment count","43792":"decrement count","43793":"branch if count was not zero\nwas \";\" or [SPACES] printed","43795":"increment and scan memory","43798":"continue print loop","43801":"print [SPACE] or [CURSOR RIGHT]","43804":"loop, branch always","43806":"print \" terminated string to utility pointer","43809":"pop string off descriptor stack, or from top of string\nspace returns with A = length, X = pointer low byte,\nY = pointer high byte","43812":"copy length","43813":"clear index","43815":"increment length, for pre decrement loop","43816":"decrement length","43817":"exit if done","43819":"get byte from string","43821":"print the character","43824":"increment index","43825":"compare byte with [CR]","43827":"loop if not [CR]","43829":"toggle A, EOR #$FF. what is the point of this ??","43832":"loop","43835":"get current I/O channel","43837":"if default channel go output [CURSOR RIGHT]","43839":"else output [SPACE]","43842":"set [CURSOR RIGHT]","43845":"set \"?\"","43847":"output character to channel with error check","43850":"set the flags on A","43853":"get INPUT mode flag, $00 = INPUT, $40 = GET, $98 = READ","43855":"branch if INPUT","43857":"branch if READ\nelse was GET","43859":"set current line high byte to -1, indicate immediate mode","43861":"branch always","43863":"get current DATA line number low byte","43865":"get current DATA line number high byte","43867":"set current line number low byte","43869":"set current line number high byte","43871":"do syntax error then warm start\nwas INPUT","43874":"get current I/O channel","43876":"branch if default channel","43878":"else error $18, file data error","43880":"do error #X then warm start","43883":"set \"?REDO FROM START\" pointer low byte","43885":"set \"?REDO FROM START\" pointer high byte","43887":"print null terminated string","43890":"get continue pointer low byte","43892":"get continue pointer high byte","43894":"save BASIC execute pointer low byte","43896":"save BASIC execute pointer high byte","43899":"check not Direct, back here if ok","43902":"compare with \"#\"","43904":"branch if not GET#","43906":"increment and scan memory","43909":"get byte parameter","43912":"set \",\"","43914":"scan for CHR$(A), else do syntax error then warm start","43917":"set current I/O channel","43919":"open channel for input with error check","43922":"set pointer low byte","43924":"set pointer high byte","43926":"clear A","43928":"ensure null terminator","43931":"input mode = GET","43933":"perform the GET part of READ","43936":"get current I/O channel","43938":"if not default channel go do channel close and return","43941":"get byte parameter","43944":"set \",\"","43946":"scan for CHR$(A), else do syntax error then warm start","43949":"set current I/O channel","43951":"open channel for input with error check","43954":"perform INPUT with no prompt string","43957":"get current I/O channel","43959":"close input and output channels","43962":"clear X","43964":"clear current I/O channel, flag default","43967":"compare next byte with open quote","43969":"if no prompt string just do INPUT","43971":"print \"...\" string","43974":"load A with \";\"","43976":"scan for CHR$(A), else do syntax error then warm start","43979":"print string from utility pointer\ndone with prompt, now get data","43982":"check not Direct, back here if ok","43985":"set \",\"","43987":"save to start of buffer - 1","43990":"print \"? \" and get BASIC input","43993":"get current I/O channel","43995":"branch if default I/O channel","43997":"read I/O status word","44000":"mask no DSR/timeout","44002":"branch if not error","44004":"close input and output channels","44007":"perform DATA","44010":"get first byte in input buffer","44013":"branch if not null\nelse ..","44015":"get current I/O channel","44017":"if not default channel go get BASIC input","44019":"scan for next BASIC statement ([:] or [EOL])","44022":"add Y to the BASIC execute pointer and return","44025":"get current I/O channel","44027":"skip \"?\" prompt if not default channel","44029":"print \"?\"","44032":"print [SPACE] or [CURSOR RIGHT]","44035":"call for BASIC input and return","44038":"get DATA pointer low byte","44040":"get DATA pointer high byte","44042":"set input mode = READ","44045":"set input mode = INPUT","44047":"set input mode flag, $00 = INPUT, $40 = GET, $98 = READ","44049":"save READ pointer low byte","44051":"save READ pointer high byte\nREAD, GET or INPUT next variable from list","44053":"get variable address","44056":"save address low byte","44058":"save address high byte","44060":"get BASIC execute pointer low byte","44062":"get BASIC execute pointer high byte","44064":"save BASIC execute pointer low byte","44066":"save BASIC execute pointer high byte","44068":"get READ pointer low byte","44070":"get READ pointer high byte","44072":"save as BASIC execute pointer low byte","44074":"save as BASIC execute pointer high byte","44076":"scan memory","44079":"branch if not null\npointer was to null entry","44081":"test input mode flag, $00 = INPUT, $40 = GET, $98 = READ","44083":"branch if not GET\nelse was GET","44085":"get character from input device with error check","44088":"save to buffer","44091":"set pointer low byte","44093":"set pointer high byte","44095":"go interpret single character","44097":"branch if READ\nelse was INPUT","44099":"get current I/O channel","44101":"skip \"?\" prompt if not default channel","44103":"print \"?\"","44106":"print \"? \" and get BASIC input","44109":"save BASIC execute pointer low byte","44111":"save BASIC execute pointer high byte","44113":"increment and scan memory, execute pointer now points to\nstart of next data or null terminator","44116":"test data type flag, $FF = string, $00 = numeric","44118":"branch if numeric\ntype is string","44120":"test INPUT mode flag, $00 = INPUT, $40 = GET, $98 = READ","44122":"branch if not GET\nelse do string GET","44124":"clear X ??","44125":"save BASIC execute pointer low byte","44127":"clear A","44129":"clear search character","44131":"branch always\nis string INPUT or string READ","44133":"save search character","44135":"compare with \"","44137":"branch if quote\nstring is not in quotes so \":\", \",\" or $00 are the\ntermination characters","44139":"set \":\"","44141":"set search character","44143":"set \",\"","44145":"clear carry for add","44146":"set scan quotes flag","44148":"get BASIC execute pointer low byte","44150":"get BASIC execute pointer high byte","44152":"add to pointer low byte. this add increments the pointer\nif the mode is INPUT or READ and the data is a \"...\"\nstring","44154":"branch if no rollover","44156":"else increment pointer high byte","44157":"print string to utility pointer","44160":"restore BASIC execute pointer from temp","44163":"perform string LET","44166":"continue processing command\nGET, INPUT or READ is numeric","44169":"get FAC1 from string","44172":"get data type flag, $80 = integer, $00 = float","44174":"assign value to numeric variable","44177":"scan memory","44180":"branch if \":\" or [EOL]","44182":"comparte with \",\"","44184":"branch if \",\"","44186":"else go do bad input routine\nstring terminated with \":\", \",\" or $00","44189":"get BASIC execute pointer low byte","44191":"get BASIC execute pointer high byte","44193":"save READ pointer low byte","44195":"save READ pointer high byte","44197":"get saved BASIC execute pointer low byte","44199":"get saved BASIC execute pointer high byte","44201":"restore BASIC execute pointer low byte","44203":"restore BASIC execute pointer high byte","44205":"scan memory","44208":"branch if \":\" or [EOL]","44210":"scan for \",\", else do syntax error then warm start","44213":"go READ or INPUT next variable from list\nwas READ","44216":"scan for next BASIC statement ([:] or [EOL])","44219":"increment index to next byte","44220":"copy byte to X","44221":"branch if \":\"","44223":"else set error $0D, out of data error","44225":"increment index to next line pointer high byte","44226":"get next line pointer high byte","44228":"branch if program end, eventually does error X","44230":"increment index","44231":"get next line # low byte","44233":"save current DATA line low byte","44235":"increment index","44236":"get next line # high byte","44238":"increment index","44239":"save current DATA line high byte","44241":"add Y to the BASIC execute pointer","44244":"scan memory","44247":"copy the byte","44248":"compare it with token for DATA","44250":"loop if not DATA","44252":"continue evaluating READ","44255":"get READ pointer low byte","44257":"get READ pointer high byte","44259":"get INPUT mode flag, $00 = INPUT, $40 = GET, $98 = READ","44261":"branch if INPUT or GET","44263":"else set data pointer and exit","44266":"clear index","44268":"get READ byte","44270":"exit if [EOL]","44272":"get current I/O channel","44274":"exit if not default channel","44276":"set \"?EXTRA IGNORED\" pointer low byte","44278":"set \"?EXTRA IGNORED\" pointer high byte","44280":"print null terminated string","44318":"branch if NEXT variable","44320":"else clear Y","44322":"branch always\nNEXT variable","44324":"get variable address","44327":"save FOR/NEXT variable pointer low byte","44329":"save FOR/NEXT variable pointer high byte\n(high byte cleared if no variable defined)","44331":"search the stack for FOR or GOSUB activity","44334":"branch if FOR, this variable, found","44336":"else set error $0A, next without for error","44338":"do error #X then warm start\nfound this FOR variable","44341":"update stack pointer","44342":"copy stack pointer","44343":"clear carry for add","44344":"point to STEP value","44346":"save it","44347":"point to TO value","44349":"save pointer to TO variable for compare","44351":"restore pointer to STEP value","44352":"point to stack page","44354":"unpack memory (AY) into FAC1","44357":"get stack pointer back","44358":"get step sign","44361":"save FAC1 sign (b7)","44363":"get FOR/NEXT variable pointer low byte","44365":"get FOR/NEXT variable pointer high byte","44367":"add FOR variable to FAC1","44370":"pack FAC1 into FOR variable","44373":"point to stack page","44375":"compare FAC1 with TO value","44378":"get stack pointer back","44379":"set carry for subtract","44380":"subtract step sign","44383":"branch if =, loop complete\nloop back and do it all again","44385":"get FOR line low byte","44388":"save current line number low byte","44390":"get FOR line high byte","44393":"save current line number high byte","44395":"get BASIC execute pointer low byte","44398":"save BASIC execute pointer low byte","44400":"get BASIC execute pointer high byte","44403":"save BASIC execute pointer high byte","44405":"go do interpreter inner loop\nNEXT loop comlete","44408":"stack copy to A","44409":"add $12, $11 + carry, to dump FOR structure","44411":"copy back to index","44412":"copy to stack pointer","44413":"scan memory","44416":"compare with \",\"","44418":"if not \",\" go do interpreter inner loop\nwas \",\" so another NEXT variable to do","44420":"increment and scan memory","44423":"do NEXT variable","44426":"evaluate expression\ncheck if source and destination are numeric","44431":"destination is string\ntype match check, set C for string, clear C for numeric","44432":"test data type flag, $FF = string, $00 = numeric","44434":"branch if string","44436":"if destiantion is numeric do type missmatch error","44439":"exit if destination is string\ndo type missmatch error","44441":"error code $16, type missmatch error","44443":"do error #X then warm start","44446":"get BASIC execute pointer low byte","44448":"skip next if not zero","44450":"else decrement BASIC execute pointer high byte","44452":"decrement BASIC execute pointer low byte","44454":"set null precedence, flag done","44457":"push compare evaluation byte if branch to here","44458":"copy precedence byte","44459":"push precedence byte","44460":"2 bytes","44462":"check room on stack for A*2 bytes","44465":"get value from line","44468":"clear A","44470":"clear comparrison evaluation flag","44472":"scan memory","44475":"set carry for subtract","44476":"subtract the token for \"\u003e\"","44478":"branch if \u003c \"\u003e\"","44480":"compare with \"\u003e\" to +3","44482":"branch if \u003e= 3\nwas token for \"\u003e\" \"=\" or \"\u003c\"","44484":"compare with token for =","44486":"*2, b0 = carry (=1 if token was = or \u003c)","44487":"toggle b0","44489":"EOR with comparrison evaluation flag","44491":"compare with comparrison evaluation flag","44493":"if \u003c saved flag do syntax error then warm start","44495":"save new comparrison evaluation flag","44497":"increment and scan memory","44500":"go do next character","44503":"get comparrison evaluation flag","44505":"branch if compare function","44507":"go do functions\nelse was \u003c TK_GT so is operator or lower","44509":"add # of operators (+, -, *, /, ^, AND or OR)","44511":"branch if \u003c + operator\ncarry was set so token was +, -, *, /, ^, AND or OR","44513":"add data type flag, $FF = string, $00 = numeric","44515":"branch if not string or not + token\nwill only be $00 if type is string and token was +","44517":"add strings, string 1 is in the descriptor, string 2\nis in line, and return","44520":"-1 (corrects for carry add)","44522":"save it","44524":"*2","44525":"*3","44527":"copy to index","44528":"pull previous precedence","44529":"compare with precedence byte","44532":"branch if A \u003e=","44534":"check if source is numeric, else do type mismatch","44537":"save precedence","44538":"get vector, execute function then continue evaluation","44541":"restore precedence","44542":"get precedence stacked flag","44544":"branch if stacked values","44546":"copy precedence, set flags","44547":"exit if done","44549":"else pop FAC2 and return, branch always","44551":"clear data type flag, $FF = string, $00 = numeric","44553":"copy compare function flag","44554":"\u003c\u003c1, shift data type flag into b0, 1 = string, 0 = num","44555":"get BASIC execute pointer low byte","44557":"branch if no underflow","44559":"else decrement BASIC execute pointer high byte","44561":"decrement BASIC execute pointer low byte","44565":"save new comparrison evaluation flag","44567":"branch always","44569":"compare with stacked function precedence","44572":"if A \u003e=, pop FAC2 and return","44574":"else go stack this one and continue, branch always","44576":"get function vector high byte","44579":"onto stack","44580":"get function vector low byte","44583":"onto stack\nnow push sign, round FAC1 and put on stack","44584":"function will return here, then the next RTS will call\nthe function","44587":"get comparrison evaluation flag","44589":"continue evaluating expression","44592":"do syntax error then warm start","44595":"get FAC1 sign (b7)","44597":"get precedence byte","44600":"copy sign","44601":"get return address low byte","44602":"save it","44604":"increment it as return-1 is pushed\nnote, no check is made on the high byte so if the calling\nroutine ever assembles to a page edge then this all goes\nhorribly wrong!","44606":"get return address high byte","44607":"save it","44609":"restore sign","44610":"push sign","44611":"round FAC1","44614":"get FAC1 mantissa 4","44616":"save it","44617":"get FAC1 mantissa 3","44619":"save it","44620":"get FAC1 mantissa 2","44622":"save it","44623":"get FAC1 mantissa 1","44625":"save it","44626":"get FAC1 exponent","44628":"save it","44629":"return, sort of","44632":"flag function","44634":"pull precedence byte","44635":"exit if done","44637":"compare previous precedence with $64","44639":"branch if was $64 (\u003c function)","44641":"check if source is numeric, else do type mismatch","44644":"save precedence stacked flag\npop FAC2 and return","44646":"pop byte","44647":"shift out comparison evaluation lowest bit","44648":"save the comparison evaluation flag","44650":"pop exponent","44651":"save FAC2 exponent","44653":"pop mantissa 1","44654":"save FAC2 mantissa 1","44656":"pop mantissa 2","44657":"save FAC2 mantissa 2","44659":"pop mantissa 3","44660":"save FAC2 mantissa 3","44662":"pop mantissa 4","44663":"save FAC2 mantissa 4","44665":"pop sign","44666":"save FAC2 sign (b7)","44668":"EOR FAC1 sign (b7)","44670":"save sign compare (FAC1 EOR FAC2)","44672":"get FAC1 exponent","44675":"get arithmetic element","44678":"clear byte","44680":"clear data type flag, $FF = string, $00 = numeric","44682":"increment and scan memory","44685":"branch if not numeric character\nelse numeric string found (e.g. 123)","44687":"get FAC1 from string and return\nget value from line .. continued\nwasn't a number so ...","44690":"check byte, return Cb = 0 if\u003c\"A\" or \u003e\"Z\"","44693":"branch if not variable name","44695":"variable name set-up and return","44698":"compare with token for PI","44700":"branch if not PI","44702":"get PI pointer low byte","44704":"get PI pointer high byte","44706":"unpack memory (AY) into FAC1","44709":"increment and scan memory and return","44717":"compare with \".\"","44719":"if so get FAC1 from string and return, e.g. was .123\nwasn't .123 so ...","44721":"compare with token for -","44723":"branch if - token, do set-up for functions\nwasn't -123 so ...","44725":"compare with token for +","44727":"branch if + token, +1 = 1 so ignore leading +\nit wasn't any sort of number so ...","44729":"compare with \"","44731":"branch if not open quote\nwas open quote so get the enclosed string","44733":"get BASIC execute pointer low byte","44735":"get BASIC execute pointer high byte","44737":"add carry to low byte","44739":"branch if no overflow","44741":"increment high byte","44742":"print \" terminated string to utility pointer","44745":"restore BASIC execute pointer from temp and return\nget value from line .. continued\nwasn't a string so ...","44748":"compare with token for NOT","44750":"branch if not token for NOT\nwas NOT token","44752":"offset to NOT function","44754":"do set-up for function then execute, branch always\ndo = compare","44756":"evaluate integer expression, no sign check","44759":"get FAC1 mantissa 4","44761":"invert it","44763":"copy it","44764":"get FAC1 mantissa 3","44766":"invert it","44768":"convert fixed integer AY to float FAC1 and return\nget value from line .. continued\nwasn't a string or NOT so ...","44771":"compare with token for FN","44773":"branch if not token for FN","44775":"else go evaluate FNx\nget value from line .. continued\nwasn't a string, NOT or FN so ...","44778":"compare with token for SGN","44780":"if less than SGN token evaluate expression in parentheses\nelse was a function token","44782":"go set up function references, branch always\nget value from line .. continued\nif here it can only be something in brackets so ....\nevaluate expression within parentheses","44785":"scan for \"(\", else do syntax error then warm start","44788":"evaluate expression\nall the 'scan for' routines return the character after the sought character\nscan for \")\", else do syntax error then warm start","44791":"load A with \")\"","44794":"load A with \"(\"","44797":"load A with \",\"\nscan for CHR$(A), else do syntax error then warm start","44799":"clear index","44801":"compare with BASIC byte","44803":"if not expected byte do syntax error then warm start","44805":"else increment and scan memory and return\nsyntax error then warm start","44808":"error code $0B, syntax error","44810":"do error #X then warm start","44813":"set offset from base to \u003e operator","44815":"dump return address low byte","44816":"dump return address high byte","44817":"execute function then continue evaluation","44820":"set carry for subtract","44821":"get variable address low byte","44823":"subtract $A000 low byte","44825":"get variable address high byte","44827":"subtract $A000 high byte","44829":"exit if address \u003c $A000","44831":"get end of BASIC marker low byte","44833":"subtract variable address low byte","44835":"get end of BASIC marker high byte","44837":"subtract variable address high byte","44840":"get variable address","44843":"save variable pointer low byte","44845":"save variable pointer high byte","44847":"get current variable name first character","44849":"get current variable name second character","44851":"get data type flag, $FF = string, $00 = numeric","44853":"branch if numeric\nvariable is string","44855":"else clear A","44857":"clear FAC1 rounding byte","44859":"check address range","44862":"exit if not in BASIC ROM","44864":"compare variable name first character with \"T\"","44866":"exit if not \"T\"","44868":"compare variable name second character with \"I$\"","44870":"exit if not \"I$\"\nvariable name was \"TI$\"","44872":"read real time clock into FAC1 mantissa, 0HML","44875":"clear exponent count adjust","44877":"Y = $FF","44878":"set output string index, -1 to allow for pre increment","44880":"HH:MM:SS is six digits","44882":"set number of characters before the decimal point","44886":"convert jiffy count to string","44889":"exit via STR$() code tail","44893":"test data type flag, $80 = integer, $00 = float","44895":"branch if float","44897":"clear index","44899":"get integer variable low byte","44901":"copy to X","44902":"increment index","44903":"get integer variable high byte","44905":"copy to Y","44906":"copy loa byte to A","44907":"convert fixed integer AY to float FAC1 and return\nvariable name set-up, variable is float","44910":"check address range","44913":"if not in BASIC ROM get pointer and unpack into FAC1","44915":"compare variable name first character with \"T\"","44917":"branch if not \"T\"","44919":"compare variable name second character with \"I\"","44921":"branch if not \"I\"\nvariable name was \"TI\"","44923":"read real time clock into FAC1 mantissa, 0HML","44926":"clear A","44927":"set exponent to 32 bit value","44929":"set exponent = X and normalise FAC1","44932":"read real time clock","44935":"save jiffy clock mid byte as  FAC1 mantissa 3","44937":"save jiffy clock high byte as  FAC1 mantissa 2","44939":"save jiffy clock low byte as  FAC1 mantissa 4","44941":"clear Y","44943":"clear FAC1 mantissa 1","44946":"compare variable name first character with \"S\"","44948":"if not \"S\" go do normal floating variable","44950":"compare variable name second character with \"","44952":"if not \"T\" go do normal floating variable\nvariable name was \"ST\"","44954":"read I/O status word","44957":"save A as integer byte and return\nvariable is float","44960":"get variable pointer low byte","44962":"get variable pointer high byte","44964":"unpack memory (AY) into FAC1","44967":"*2 (2 bytes per function address)","44968":"save function offset","44969":"copy function offset","44970":"increment and scan memory","44973":"compare function offset to CHR$ token offset+1","44975":"branch if \u003c LEFT$ (can not be =)\nget value from line .. continued\nwas LEFT$, RIGHT$ or MID$ so..","44977":"scan for \"(\", else do syntax error then warm start","44980":"evaluate, should be string, expression","44983":"scan for \",\", else do syntax error then warm start","44986":"check if source is string, else do type mismatch","44989":"restore function offset","44990":"copy it","44991":"get descriptor pointer high byte","44993":"push string pointer high byte","44994":"get descriptor pointer low byte","44996":"push string pointer low byte","44997":"restore function offset","44998":"save function offset","44999":"get byte parameter","45002":"restore function offset","45003":"copy function offset","45004":"copy byte parameter to A","45005":"push byte parameter","45006":"go call function\nget value from line .. continued\nwas SGN() to CHR$() so..","45009":"evaluate expression within parentheses","45012":"restore function offset","45013":"copy to index","45014":"get function jump vector low byte","45017":"save functions jump vector low byte","45019":"get function jump vector high byte","45022":"save functions jump vector high byte","45024":"do function call","45027":"check if source is numeric and RTS, else do type mismatch\nstring functions avoid this by dumping the return address","45030":"set Y for OR","45033":"clear Y for AND","45035":"set AND/OR invert value","45037":"evaluate integer expression, no sign check","45040":"get FAC1 mantissa 3","45042":"EOR low byte","45044":"save it","45046":"get FAC1 mantissa 4","45048":"EOR high byte","45050":"save it","45052":"copy FAC2 to FAC1, get 2nd value in expression","45055":"evaluate integer expression, no sign check","45058":"get FAC1 mantissa 4","45060":"EOR high byte","45062":"AND with expression 1 high byte","45064":"EOR result high byte","45066":"save in Y","45067":"get FAC1 mantissa 3","45069":"EOR low byte","45071":"AND with expression 1 low byte","45073":"EOR result low byte","45075":"convert fixed integer AY to float FAC1 and return","45078":"type match check, set C for string","45081":"branch if string\ndo numeric \u003c compare","45083":"get FAC2 sign (b7)","45085":"set all non sign bits","45087":"and FAC2 mantissa 1 (AND in sign bit)","45089":"save FAC2 mantissa 1","45091":"set pointer low byte to FAC2","45093":"set pointer high byte to FAC2","45095":"compare FAC1 with (AY)","45098":"copy the result","45099":"go evaluate result\ndo string \u003c compare","45102":"clear byte","45104":"clear data type flag, $FF = string, $00 = numeric","45106":"clear \u003c bit in comparrison evaluation flag","45108":"pop string off descriptor stack, or from top of string\nspace returns with A = length, X = pointer low byte,\nY = pointer high byte","45111":"save length","45113":"save string pointer low byte","45115":"save string pointer high byte","45117":"get descriptor pointer low byte","45119":"get descriptor pointer high byte","45121":"pop (YA) descriptor off stack or from top of string space\nreturns with A = length, X = pointer low byte,\nY = pointer high byte","45124":"save string pointer low byte","45126":"save string pointer high byte","45128":"copy length","45129":"set carry for subtract","45130":"subtract string 1 length","45132":"branch if str 1 length = string 2 length","45134":"set str 1 length \u003e string 2 length","45136":"branch if so","45138":"get string 1 length","45140":"set str 1 length \u003c string 2 length","45142":"save length compare","45144":"set index","45146":"adjust for loop","45147":"increment index","45148":"decrement count","45149":"branch if still bytes to do","45151":"get length compare back","45153":"branch if str 1 \u003c str 2","45155":"flag str 1 \u003c= str 2","45156":"go evaluate result","45158":"get string 2 byte","45160":"compare with string 1 byte","45162":"loop if bytes =","45164":"set str 1 \u003c string 2","45166":"branch if so","45168":"set str 1 \u003e string 2","45170":"x = 0, 1 or 2","45171":"copy to A","45172":"* 2 (1, 2 or 4)","45173":"AND with the comparison evaluation flag","45175":"branch if 0 (compare is false)","45177":"else set result true","45179":"save A as integer byte and return","45182":"scan for \",\", else do syntax error then warm start","45185":"copy \"DIM\" flag to X","45186":"search for variable","45189":"scan memory","45192":"scan for \",\" and loop if not null","45195":"set DIM flag = $00","45197":"scan memory, 1st character","45200":"save DIM flag","45202":"save 1st character","45204":"scan memory","45207":"check byte, return Cb = 0 if\u003c\"A\" or \u003e\"Z\"","45210":"branch if ok","45212":"else syntax error then warm start\nwas variable name so ...","45215":"clear 2nd character temp","45217":"clear data type flag, $FF = string, $00 = numeric","45219":"clear data type flag, $80 = integer, $00 = float","45221":"increment and scan memory, 2nd character","45224":"if character = \"0\"-\"9\" (ok) go save 2nd character\n2nd character wasn't \"0\" to \"9\" so ...","45226":"check byte, return Cb = 0 if\u003c\"A\" or \u003e\"Z\"","45229":"branch if \u003c\"A\" or \u003e\"Z\" (go check if string)","45231":"copy 2nd character\nignore further (valid) characters in the variable name","45232":"increment and scan memory, 3rd character","45235":"loop if character = \"0\"-\"9\" (ignore)","45237":"check byte, return Cb = 0 if\u003c\"A\" or \u003e\"Z\"","45240":"loop if character = \"A\"-\"Z\" (ignore)\ncheck if string variable","45242":"compare with \"$\"","45244":"branch if not string\ntype is string","45246":"set data type = string","45248":"set data type flag, $FF = string, $00 = numeric","45250":"branch always","45252":"compare with \"%\"","45254":"branch if not integer","45256":"get subscript/FNX flag","45258":"if ?? do syntax error then warm start","45260":"set integer type","45262":"set data type = integer","45264":"OR current variable name first byte","45266":"save current variable name first byte","45268":"get 2nd character back","45269":"set top bit, indicate string or integer variable","45271":"copy back to 2nd character temp","45272":"increment and scan memory","45275":"save 2nd character","45277":"set carry for subtract","45278":"or with subscript/FNX flag - or FN name","45280":"subtract \"(\"","45282":"branch if not \"(\"","45284":"go find, or make, array\neither find or create variable\nvariable name wasn't xx(.... so look for plain variable","45287":"clear A","45289":"clear subscript/FNX flag","45291":"get start of variables low byte","45293":"get start of variables high byte","45295":"save search address high byte","45297":"save search address low byte","45299":"compare with end of variables high byte","45301":"skip next compare if \u003c\u003e\nhigh addresses were = so compare low addresses","45303":"compare low address with end of variables low byte","45305":"if not found go make new variable","45307":"get 1st character of variable to find","45309":"compare with variable name 1st character","45311":"branch if no match\n1st characters match so compare 2nd character","45313":"get 2nd character of variable to find","45315":"index to point to variable name 2nd character","45316":"compare with variable name 2nd character","45318":"branch if match (found variable)","45320":"else decrement index (now = $00)","45321":"clear carry for add","45322":"get search address low byte","45324":"+7, offset to next variable name","45326":"loop if no overflow to high byte","45328":"else increment high byte","45329":"loop always, RAM doesn't extend to $FFFF\ncheck byte, return Cb = 0 if\u003c\"A\" or \u003e\"Z\"","45331":"compare with \"A\"","45333":"exit if less\ncarry is set","45335":"subtract \"Z\"+1","45337":"set carry","45338":"subtract $A5 (restore byte)\ncarry clear if byte \u003e $5A","45341":"pop return address low byte","45342":"push return address low byte","45343":"compare with expected calling routine return low byte","45345":"if not get variable go create new variable\nthis will only drop through if the call was from $AF28 and is only called\nfrom there if it is searching for a variable from the right hand side of a LET a=b\nstatement, it prevents the creation of variables not assigned a value.\nvalue returned by this is either numeric zero, exponent byte is $00, or null string,\ndescriptor length byte is $00. in fact a pointer to any $00 byte would have done.\nelse return dummy null value","45347":"set result pointer low byte","45349":"set result pointer high byte","45352":"get variable name first character","45354":"get variable name second character","45356":"compare first character with \"T\"","45358":"branch if not \"T\"","45360":"compare second character with \"I$\"","45362":"if \"I$\" return null value","45364":"compare second character with \"I\"","45366":"branch if not \"I\"\nif name is \"TI\" do syntax error","45368":"do syntax error then warm start","45371":"compare first character with \"S\"","45373":"branch if not \"S\"","45375":"compare second character with \"T\"","45377":"if name is \"ST\" do syntax error","45379":"get end of variables low byte","45381":"get end of variables high byte","45383":"save old block start low byte","45385":"save old block start high byte","45387":"get end of arrays low byte","45389":"get end of arrays high byte","45391":"save old block end low byte","45393":"save old block end high byte","45395":"clear carry for add","45396":"+7, space for one variable","45398":"branch if no overflow to high byte","45400":"else increment high byte","45401":"set new block end low byte","45403":"set new block end high byte","45405":"open up space in memory","45408":"get new start low byte","45410":"get new start high byte (-$100)","45412":"correct high byte","45413":"set end of variables low byte","45415":"set end of variables high byte","45417":"clear index","45419":"get variable name 1st character","45421":"save variable name 1st character","45423":"increment index","45424":"get variable name 2nd character","45426":"save variable name 2nd character","45428":"clear A","45430":"increment index","45431":"initialise variable byte","45433":"increment index","45434":"initialise variable byte","45436":"increment index","45437":"initialise variable byte","45439":"increment index","45440":"initialise variable byte","45442":"increment index","45443":"initialise variable byte\nfound a match for variable","45445":"get variable address low byte","45447":"clear carry for add","45448":"+2, offset past variable name bytes","45450":"get variable address high byte","45452":"branch if no overflow from add","45454":"else increment high byte","45455":"save current variable pointer low byte","45457":"save current variable pointer high byte","45460":"get # of dimensions (1, 2 or 3)","45462":"*2 (also clears the carry !)","45463":"+5 (result is 7, 9 or 11 here)","45465":"add array start pointer low byte","45467":"get array pointer high byte","45469":"branch if no overflow","45471":"else increment high byte","45472":"save array data pointer low byte","45474":"save array data pointer high byte","45482":"evaluate integer expression, no sign check","45485":"get result low byte","45487":"get result high byte","45490":"increment and scan memory","45493":"evaluate expression\nevaluate integer expression, sign check","45496":"check if source is numeric, else do type mismatch","45499":"get FAC1 sign (b7)","45501":"do illegal quantity error if -ve\nevaluate integer expression, no sign check","45503":"get FAC1 exponent","45505":"compare with exponent = 2^16 (n\u003e2^15)","45507":"if n\u003c2^16 go convert FAC1 floating to fixed and return","45509":"set pointer low byte to -32768","45511":"set pointer high byte to -32768","45513":"compare FAC1 with (AY)","45516":"if \u003c\u003e do illegal quantity error then warm start","45518":"convert FAC1 floating to fixed and return","45521":"get DIM flag","45523":"OR with data type flag","45525":"push it","45526":"get data type flag, $FF = string, $00 = numeric","45528":"push it","45529":"clear dimensions count\nnow get the array dimension(s) and stack it (them) before the data type and DIM flag","45531":"copy dimensions count","45532":"save it","45533":"get array name 2nd byte","45535":"save it","45536":"get array name 1st byte","45538":"save it","45539":"evaluate integer expression","45542":"pull array name 1st byte","45543":"restore array name 1st byte","45545":"pull array name 2nd byte","45546":"restore array name 2nd byte","45548":"pull dimensions count","45549":"restore it","45550":"copy stack pointer","45551":"get DIM flag","45554":"push it","45555":"get data type flag","45558":"push it","45559":"get this dimension size high byte","45561":"stack before flag bytes","45564":"get this dimension size low byte","45566":"stack before flag bytes","45569":"increment dimensions count","45570":"scan memory","45573":"compare with \",\"","45575":"if found go do next dimension","45577":"store dimensions count","45579":"scan for \")\", else do syntax error then warm start","45582":"pull data type flag","45583":"restore data type flag, $FF = string, $00 = numeric","45585":"pull data type flag","45586":"restore data type flag, $80 = integer, $00 = float","45588":"mask dim flag","45590":"restore DIM flag","45592":"set end of variables low byte\n(array memory start low byte)","45594":"set end of variables high byte\n(array memory start high byte)\nnow check to see if we are at the end of array memory, we would be if there were\nno arrays.","45596":"save as array start pointer low byte","45598":"save as array start pointer high byte","45600":"compare with end of arrays high byte","45602":"branch if not reached array memory end","45604":"else compare with end of arrays low byte","45606":"go build array if not found\nsearch for array","45608":"clear index","45610":"get array name first byte","45612":"increment index to second name byte","45613":"compare with this array name first byte","45615":"branch if no match","45617":"else get this array name second byte","45619":"compare with array name second byte","45621":"array found so branch\nno match","45623":"increment index","45624":"get array size low byte","45626":"clear carry for add","45627":"add array start pointer low byte","45629":"copy low byte to X","45630":"increment index","45631":"get array size high byte","45633":"add array memory pointer high byte","45635":"if no overflow go check next array","45637":"error $12, bad subscript error","45640":"error $0E, illegal quantity error","45642":"do error #X then warm start","45645":"set error $13, double dimension error","45647":"get DIM flag","45649":"if we are trying to dimension it do error #X then warm\nstart\nfound the array and we're not dimensioning it so we must find an element in it","45651":"set-up array pointer to first element in array","45654":"get dimensions count","45656":"set index to array's # of dimensions","45658":"compare with no of dimensions","45660":"if wrong do bad subscript error","45662":"found array so go get element\narray not found, so build it","45665":"set-up array pointer to first element in array","45668":"check available memory, do out of memory error if no room","45671":"clear Y","45673":"clear array data size high byte","45675":"set default element size","45677":"get variable name 1st byte","45679":"save array name 1st byte","45681":"branch if not string or floating point array","45683":"decrement element size, $04","45684":"increment index","45685":"get variable name 2nd byte","45687":"save array name 2nd byte","45689":"branch if not integer or string","45691":"decrement element size, $03","45692":"decrement element size, $02","45693":"save element size","45695":"get dimensions count","45697":"increment index ..","45698":".. to array  ..","45699":".. dimension count","45700":"save array dimension count","45702":"set default dimension size low byte","45704":"set default dimension size high byte","45706":"test DIM flag","45708":"branch if default to be used","45710":"pull dimension size low byte","45711":"clear carry for add","45712":"add 1, allow for zeroeth element","45714":"copy low byte to X","45715":"pull dimension size high byte","45716":"add carry to high byte","45718":"incement index to dimension size high byte","45719":"save dimension size high byte","45721":"incement index to dimension size low byte","45722":"copy dimension size low byte","45723":"save dimension size low byte","45725":"compute array size","45728":"save result low byte","45730":"save result high byte","45732":"restore index","45734":"decrement dimensions count","45736":"loop if not all done","45738":"add array data pointer high byte","45740":"if overflow do out of memory error then warm start","45742":"save array data pointer high byte","45744":"copy array data pointer high byte","45745":"copy array size low byte","45746":"add array data pointer low byte","45748":"branch if no rollover","45750":"else increment next array pointer high byte","45751":"if rolled over do out of memory error then warm start","45753":"check available memory, do out of memory error if no room","45756":"set end of arrays low byte","45758":"set end of arrays high byte\nnow the aray is created we need to zero all the elements in it","45760":"clear A for array clear","45762":"increment array size high byte, now block count","45764":"get array size low byte, now index to block","45766":"branch if $00","45768":"decrement index, do 0 to n-1","45769":"clear array element byte","45771":"loop until this block done","45773":"decrement array pointer high byte","45775":"decrement block count high byte","45777":"loop until all blocks done","45779":"correct for last loop","45781":"set carry for subtract","45782":"get end of arrays low byte","45784":"subtract array start low byte","45786":"index to array size low byte","45788":"save array size low byte","45790":"get end of arrays high byte","45792":"index to array size high byte","45793":"subtract array start high byte","45795":"save array size high byte","45797":"get default DIM flag","45799":"exit if this was a DIM command\nelse, find element","45801":"set index to # of dimensions, the dimension indeces\nare on the stack and will be removed as the position\nof the array element is calculated","45802":"get array's dimension count","45804":"save it","45806":"clear byte","45808":"clear array data pointer low byte","45810":"save array data pointer high byte","45812":"increment index, point to array bound high byte","45813":"pull array index low byte","45814":"copy to X","45815":"save index low byte to FAC1 mantissa 3","45817":"pull array index high byte","45818":"save index high byte to FAC1 mantissa 4","45820":"compare with array bound high byte","45822":"branch if within bounds","45824":"if outside bounds do bad subscript error\nelse high byte was = so test low bytes","45826":"index to array bound low byte","45827":"get array index low byte","45828":"compare with array bound low byte","45830":"branch if within bounds","45832":"do bad subscript error","45835":"do out of memory error then warm start","45838":"index to array bound low byte","45839":"get array data pointer high byte","45841":"OR with array data pointer low byte","45843":"clear carry for either add, carry always clear here ??","45844":"branch if array data pointer = null, skip multiply","45846":"compute array size","45849":"get result low byte","45850":"add index low byte from FAC1 mantissa 3","45852":"save result low byte","45853":"get result high byte","45854":"restore index","45856":"add index high byte from FAC1 mantissa 4","45858":"save array data pointer low byte","45860":"decrement dimensions count","45862":"loop if dimensions still to do","45864":"save array data pointer high byte","45866":"set default element size","45868":"get variable name 1st byte","45870":"branch if not string or floating point array","45872":"decrement element size, $04","45873":"get variable name 2nd byte","45875":"branch if not integer or string","45877":"decrement element size, $03","45878":"decrement element size, $02","45879":"save dimension size low byte","45881":"clear dimension size high byte","45883":"compute array size","45886":"copy array size low byte","45887":"add array data start pointer low byte","45889":"save as current variable pointer low byte","45891":"copy array size high byte","45892":"add array data start pointer high byte","45894":"save as current variable pointer high byte","45896":"copy high byte to Y","45897":"get current variable pointer low byte\npointer to element is now in AY","45900":"save index","45902":"get dimension size low byte","45904":"save dimension size low byte","45906":"decrement index","45907":"get dimension size high byte","45909":"save dimension size high byte","45911":"count = $10 (16 bit multiply)","45913":"save bit count","45915":"clear result low byte","45917":"clear result high byte","45919":"get result low byte","45920":"*2","45921":"save result low byte","45922":"get result high byte","45923":"*2","45924":"save result high byte","45925":"if overflow go do \"Out of memory\" error","45927":"shift element size low byte","45929":"shift element size high byte","45931":"skip add if no carry","45933":"else clear carry for add","45934":"get result low byte","45935":"add dimension size low byte","45937":"save result low byte","45938":"get result high byte","45939":"add dimension size high byte","45941":"save result high byte","45942":"if overflow go do \"Out of memory\" error","45944":"decrement bit count","45946":"loop until all done","45949":"get data type flag, $FF = string, $00 = numeric","45951":"branch if numeric","45953":"pop string off descriptor stack, or from top of string\nspace returns with A = length, X=$71=pointer low byte,\nY=$72=pointer high byte\nFRE(n) was numeric so do this","45956":"go do garbage collection","45959":"set carry for subtract","45960":"get bottom of string space low byte","45962":"subtract end of arrays low byte","45964":"copy result to Y","45965":"get bottom of string space high byte","45967":"subtract end of arrays high byte","45969":"set type = numeric","45971":"clear data type flag, $FF = string, $00 = numeric","45973":"save FAC1 mantissa 1","45975":"save FAC1 mantissa 2","45977":"set exponent=2^16 (integer)","45979":"set exp = X, clear FAC1 3 and 4, normalise and return","45982":"set Cb for read cursor position","45983":"read/set X,Y cursor position","45986":"clear high byte","45988":"convert fixed integer AY to float FAC1, branch always\ncheck not Direct, used by DEF and INPUT","45990":"get current line number high byte","45992":"increment it","45993":"return if not direct mode\nelse do illegal direct error","45995":"error $15, illegal direct error","45998":"error $1B, undefined function error","46000":"do error #X then warm start","46003":"check FNx syntax","46006":"check not direct, back here if ok","46009":"scan for \"(\", else do syntax error then warm start","46012":"set flag for FNx","46014":"save subscript/FNx flag","46016":"get variable address","46019":"check if source is numeric, else do type mismatch","46022":"scan for \")\", else do syntax error then warm start","46025":"get = token","46027":"scan for CHR$(A), else do syntax error then warm start","46030":"push next character","46031":"get current variable pointer high byte","46033":"push it","46034":"get current variable pointer low byte","46036":"push it","46037":"get BASIC execute pointer high byte","46039":"push it","46040":"get BASIC execute pointer low byte","46042":"push it","46043":"perform DATA","46046":"put execute pointer and variable pointer into function\nand return","46049":"set FN token","46051":"scan for CHR$(A), else do syntax error then warm start","46054":"set FN flag bit","46056":"save FN name","46058":"search for FN variable","46061":"save function pointer low byte","46063":"save function pointer high byte","46065":"check if source is numeric and return, else do type\nmismatch","46068":"check FNx syntax","46071":"get function pointer high byte","46073":"push it","46074":"get function pointer low byte","46076":"push it","46077":"evaluate expression within parentheses","46080":"check if source is numeric, else do type mismatch","46083":"pop function pointer low byte","46084":"restore it","46086":"pop function pointer high byte","46087":"restore it","46089":"index to variable pointer high byte","46091":"get variable address low byte","46093":"save current variable pointer low byte","46095":"copy address low byte","46096":"index to variable address high byte","46097":"get variable pointer high byte","46099":"branch if high byte zero","46101":"save current variable pointer high byte","46103":"index to mantissa 3\nnow stack the function variable value before use","46104":"get byte from variable","46106":"stack it","46107":"decrement index","46108":"loop until variable stacked","46110":"get current variable pointer high byte","46112":"pack FAC1 into (XY)","46115":"get BASIC execute pointer high byte","46117":"push it","46118":"get BASIC execute pointer low byte","46120":"push it","46121":"get function execute pointer low byte","46123":"save BASIC execute pointer low byte","46125":"index to high byte","46126":"get function execute pointer high byte","46128":"save BASIC execute pointer high byte","46130":"get current variable pointer high byte","46132":"push it","46133":"get current variable pointer low byte","46135":"push it","46136":"evaluate expression and check is numeric, else do\ntype mismatch","46139":"pull variable address low byte","46140":"save variable address low byte","46142":"pull variable address high byte","46143":"save variable address high byte","46145":"scan memory","46148":"branch if null (should be [EOL] marker)","46150":"else syntax error then warm start","46153":"pull BASIC execute pointer low byte","46154":"save BASIC execute pointer low byte","46156":"pull BASIC execute pointer high byte","46157":"save BASIC execute pointer high byte\nput execute pointer and variable pointer into function","46159":"clear index","46161":"pull BASIC execute pointer low byte","46162":"save to function","46164":"pull BASIC execute pointer high byte","46165":"increment index","46166":"save to function","46168":"pull current variable address low byte","46169":"increment index","46170":"save to function","46172":"pull current variable address high byte","46173":"increment index","46174":"save to function","46176":"pull ??","46177":"increment index","46178":"save to function","46181":"check if source is numeric, else do type mismatch","46184":"set string index","46186":"convert FAC1 to string","46189":"dump return address (skip type check)","46190":"dump return address (skip type check)","46191":"set result string low pointer","46193":"set result string high pointer","46195":"print null terminated string to utility pointer","46197":"get descriptor pointer low byte","46199":"get descriptor pointer high byte","46201":"save descriptor pointer low byte","46203":"save descriptor pointer high byte","46205":"make space in string memory for string A long","46208":"save string pointer low byte","46210":"save string pointer high byte","46212":"save length","46215":"set terminator to \"","46217":"set search character, terminator 1","46219":"set terminator 2\nprint search or alternate terminated string to utility pointer\nsource is AY","46221":"store string start low byte","46223":"store string start high byte","46225":"save string pointer low byte","46227":"save string pointer high byte","46229":"set length to -1","46231":"increment length","46232":"get byte from string","46234":"exit loop if null byte [EOS]","46236":"compare with search character, terminator 1","46238":"branch if terminator","46240":"compare with terminator 2","46242":"loop if not terminator 2","46244":"compare with \"","46246":"branch if \" (carry set if = !)","46248":"clear carry for add (only if [EOL] terminated string)","46249":"save length in FAC1 exponent","46251":"copy length to A","46252":"add string start low byte","46254":"save string end low byte","46256":"get string start high byte","46258":"branch if no low byte overflow","46260":"else increment high byte","46261":"save string end high byte","46263":"get string start high byte","46265":"branch if in utility area","46267":"compare with input buffer memory high byte","46269":"branch if not in input buffer memory\nstring in input buffer or utility area, move to string\nmemory","46271":"copy length to A","46272":"copy descriptor pointer and make string space A bytes long","46275":"get string start low byte","46277":"get string start high byte","46279":"store string A bytes long from XY to utility pointer\ncheck for space on descriptor stack then ...\nput string address and length on descriptor stack and update stack pointers","46282":"get the descriptor stack pointer","46284":"compare it with the maximum + 1","46286":"if there is space on the string stack continue\nelse do string too complex error","46288":"error $19, string too complex error","46290":"do error #X then warm start\nput string address and length on descriptor stack and update stack pointers","46293":"get the string length","46295":"put it on the string stack","46297":"get the string pointer low byte","46299":"put it on the string stack","46301":"get the string pointer high byte","46303":"put it on the string stack","46305":"clear Y","46307":"save the string descriptor pointer low byte","46309":"save the string descriptor pointer high byte, always $00","46311":"clear FAC1 rounding byte","46313":"Y = $FF","46314":"save the data type flag, $FF = string","46316":"save the current descriptor stack item pointer low byte","46318":"update the stack pointer","46319":"update the stack pointer","46320":"update the stack pointer","46321":"save the new descriptor stack pointer","46324":"clear garbage collected flag (b7)\nmake space for string A long","46326":"save string length","46327":"complement it","46329":"set carry for subtract, two's complement add","46330":"add bottom of string space low byte, subtract length","46332":"get bottom of string space high byte","46334":"skip decrement if no underflow","46336":"decrement bottom of string space high byte","46337":"compare with end of arrays high byte","46339":"do out of memory error if less","46341":"if not = skip next test","46343":"compare with end of arrays low byte","46345":"do out of memory error if less","46347":"save bottom of string space low byte","46349":"save bottom of string space high byte","46351":"save string utility ptr low byte","46353":"save string utility ptr high byte","46355":"copy low byte to X","46356":"get string length back","46358":"error code $10, out of memory error","46360":"get garbage collected flag","46362":"if set then do error code X","46364":"else go do garbage collection","46367":"flag for garbage collected","46369":"set garbage collected flag","46371":"pull length","46372":"go try again (loop always, length should never be = $00)","46374":"get end of memory low byte","46376":"get end of memory high byte\nre-run routine from last ending","46378":"set bottom of string space low byte","46380":"set bottom of string space high byte","46382":"clear index","46384":"clear working pointer high byte","46386":"clear working pointer low byte","46388":"get end of arrays low byte","46390":"get end of arrays high byte","46392":"save as highest uncollected string pointer low byte","46394":"save as highest uncollected string pointer high byte","46396":"set descriptor stack pointer","46398":"clear X","46400":"save descriptor stack pointer low byte","46402":"save descriptor stack pointer high byte ($00)","46404":"compare with descriptor stack pointer","46406":"branch if =","46408":"check string salvageability","46411":"loop always\ndone stacked strings, now do string variables","46413":"set step size = $07, collecting variables","46415":"save garbage collection step size","46417":"get start of variables low byte","46419":"get start of variables high byte","46421":"save as pointer low byte","46423":"save as pointer high byte","46425":"compare end of variables high byte,\nstart of arrays high byte","46427":"branch if no high byte match","46429":"else compare end of variables low byte,\nstart of arrays low byte","46431":"branch if = variable memory end","46433":"check variable salvageability","46436":"loop always\ndone string variables, now do string arrays","46438":"save start of arrays low byte as working pointer","46440":"save start of arrays high byte as working pointer","46442":"set step size, collecting descriptors","46444":"save step size","46446":"get pointer low byte","46448":"get pointer high byte","46450":"compare with end of arrays high byte","46452":"branch if not at end","46454":"else compare with end of arrays low byte","46456":"branch if not at end","46458":"collect string, tidy up and exit if at end ??","46461":"save pointer low byte","46463":"save pointer high byte","46465":"set index","46467":"get array name first byte","46469":"copy it","46470":"increment index","46471":"get array name second byte","46473":"push the flags","46474":"increment index","46475":"get array size low byte","46477":"add start of this array low byte","46479":"save start of next array low byte","46481":"increment index","46482":"get array size high byte","46484":"add start of this array high byte","46486":"save start of next array high byte","46488":"restore the flags","46489":"skip if not string array\nwas possibly string array so ...","46491":"get name first byte back","46492":"skip if not string array","46494":"increment index","46495":"get # of dimensions","46497":"clear index","46499":"*2","46500":"+5 (array header size)","46502":"add pointer low byte","46504":"save pointer low byte","46506":"branch if no rollover","46508":"else increment pointer hgih byte","46510":"get pointer high byte","46512":"compare pointer high byte with end of this array high byte","46514":"branch if not there yet","46516":"compare pointer low byte with end of this array low byte","46518":"if at end of this array go check next array","46520":"check string salvageability","46523":"loop\ncheck variable salvageability","46525":"get variable name first byte","46527":"add step and exit if not string","46529":"increment index","46530":"get variable name second byte","46532":"add step and exit if not string","46534":"increment index\ncheck string salvageability","46535":"get string length","46537":"add step and exit if null string","46539":"increment index","46540":"get string pointer low byte","46542":"copy to X","46543":"increment index","46544":"get string pointer high byte","46546":"compare string pointer high byte with bottom of string\nspace high byte","46548":"if bottom of string space greater go test against highest\nuncollected string","46550":"if bottom of string space less string has been collected\nso go update pointers, step to next and return\nhigh bytes were equal so test low bytes","46552":"compare string pointer low byte with bottom of string\nspace low byte","46554":"if bottom of string space less string has been collected\nso go update pointers, step to next and return\nelse test string against highest uncollected string so far","46556":"compare string pointer high byte with highest uncollected\nstring high byte","46558":"if highest uncollected string is greater then go update\npointers, step to next and return","46560":"if highest uncollected string is less then go set this\nstring as highest uncollected so far\nhigh bytes were equal so test low bytes","46562":"compare string pointer low byte with highest uncollected\nstring low byte","46564":"if highest uncollected string is greater then go update\npointers, step to next and return\nelse set current string as highest uncollected string","46566":"save string pointer low byte as highest uncollected string\nlow byte","46568":"save string pointer high byte as highest uncollected\nstring high byte","46570":"get descriptor pointer low byte","46572":"get descriptor pointer high byte","46574":"save working pointer high byte","46576":"save working pointer low byte","46578":"get step size","46580":"copy step size","46582":"get step size","46584":"clear carry for add","46585":"add pointer low byte","46587":"save pointer low byte","46589":"branch if no rollover","46591":"else increment pointer high byte","46593":"get pointer high byte","46595":"flag not moved","46598":"get working pointer low byte","46600":"OR working pointer high byte","46602":"exit if nothing to collect","46604":"get copied step size","46606":"mask step size, $04 for variables, $00 for array or stack","46608":"\u003e\u003e 1","46609":"copy to index","46610":"save offset to descriptor start","46612":"get string length low byte","46614":"add string start low byte","46616":"set block end low byte","46618":"get string start high byte","46620":"add carry","46622":"set block end high byte","46624":"get bottom of string space low byte","46626":"get bottom of string space high byte","46628":"save destination end low byte","46630":"save destination end high byte","46632":"open up space in memory, don't set array end. this\ncopies the string from where it is to the end of the\nuncollected string memory","46635":"restore offset to descriptor start","46637":"increment index to string pointer low byte","46638":"get new string pointer low byte","46640":"save new string pointer low byte","46642":"copy string pointer low byte","46643":"increment new string pointer high byte","46645":"get new string pointer high byte","46647":"increment index to string pointer high byte","46648":"save new string pointer high byte","46650":"re-run routine from last ending, XA holds new bottom\nof string memory pointer","46653":"get descriptor pointer high byte","46655":"put on stack","46656":"get descriptor pointer low byte","46658":"put on stack","46659":"get value from line","46662":"check if source is string, else do type mismatch","46665":"get descriptor pointer low byte back","46666":"set pointer low byte","46668":"get descriptor pointer high byte back","46669":"set pointer high byte","46671":"clear index","46673":"get length of first string from descriptor","46675":"clear carry for add","46676":"add length of second string","46678":"branch if no overflow","46680":"else error $17, string too long error","46682":"do error #X then warm start","46685":"copy descriptor pointer and make string space A bytes long","46688":"copy string from descriptor to utility pointer","46691":"get descriptor pointer low byte","46693":"get descriptor pointer high byte","46695":"pop (YA) descriptor off stack or from top of string space\nreturns with A = length, X = pointer low byte,\nY = pointer high byte","46698":"store string from pointer to utility pointer","46701":"get descriptor pointer low byte","46703":"get descriptor pointer high byte","46705":"pop (YA) descriptor off stack or from top of string space\nreturns with A = length, X = pointer low byte,\nY = pointer high byte","46708":"check space on descriptor stack then put string address\nand length on descriptor stack and update stack pointers","46711":"continue evaluation","46714":"clear index","46716":"get string length","46718":"save it","46719":"increment index","46720":"get string pointer low byte","46722":"copy to X","46723":"increment index","46724":"get string pointer high byte","46726":"copy to Y","46727":"get length back","46728":"save string pointer low byte","46730":"save string pointer high byte\nstore string from pointer to utility pointer","46732":"copy length as index","46733":"branch if null string","46735":"save length","46736":"decrement length/index","46737":"get byte from string","46739":"save byte to destination","46741":"copy length/index","46742":"loop if not all done yet","46744":"restore length","46745":"clear carry for add","46746":"add string utility ptr low byte","46748":"save string utility ptr low byte","46750":"branch if no rollover","46752":"increment string utility ptr high byte","46755":"check if source is string, else do type mismatch\npop string off descriptor stack, or from top of string space\nreturns with A = length, X = pointer low byte, Y = pointer high byte","46758":"get descriptor pointer low byte","46760":"get descriptor pointer high byte\npop (YA) descriptor off stack or from top of string space\nreturns with A = length, X = pointer low byte, Y = pointer high byte","46762":"save string pointer low byte","46764":"save string pointer high byte","46766":"clean descriptor stack, YA = pointer","46769":"save status flags","46770":"clear index","46772":"get length from string descriptor","46774":"put on stack","46775":"increment index","46776":"get string pointer low byte from descriptor","46778":"copy to X","46779":"increment index","46780":"get string pointer high byte from descriptor","46782":"copy to Y","46783":"get string length back","46784":"restore status","46785":"branch if pointer \u003c\u003e last_sl,last_sh","46787":"compare with bottom of string space high byte","46789":"branch if \u003c\u003e","46791":"else compare with bottom of string space low byte","46793":"branch if \u003c\u003e","46795":"save string length","46796":"clear carry for add","46797":"add bottom of string space low byte","46799":"set bottom of string space low byte","46801":"skip increment if no overflow","46803":"increment bottom of string space high byte","46805":"restore string length","46806":"save string pointer low byte","46808":"save string pointer high byte","46811":"compare high byte with current descriptor stack item\npointer high byte","46813":"exit if \u003c\u003e","46815":"compare low byte with current descriptor stack item\npointer low byte","46817":"exit if \u003c\u003e","46819":"set descriptor stack pointer","46821":"update last string pointer low byte","46823":"save current descriptor stack item pointer low byte","46825":"clear high byte","46828":"evaluate byte expression, result in X","46831":"copy to A","46832":"save character","46833":"string is single byte","46835":"make string space A bytes long","46838":"get character back","46839":"clear index","46841":"save byte in string - byte IS string!","46843":"dump return address (skip type check)","46844":"dump return address (skip type check)","46845":"check space on descriptor stack then put string address\nand length on descriptor stack and update stack pointers","46848":"pull string data and byte parameter from stack\nreturn pointer in descriptor, byte in A (and X), Y=0","46851":"compare byte parameter with string length","46853":"clear A","46854":"branch if string length \u003e byte parameter","46856":"else make parameter = length","46858":"copy to byte parameter copy","46859":"clear string start offset","46860":"save string start offset","46861":"copy byte parameter (or string length if \u003c)","46862":"save string length","46863":"make string space A bytes long","46866":"get descriptor pointer low byte","46868":"get descriptor pointer high byte","46870":"pop (YA) descriptor off stack or from top of string space\nreturns with A = length, X = pointer low byte,\nY = pointer high byte","46873":"get string length back","46874":"copy length to Y","46875":"get string start offset back","46876":"clear carry for add","46877":"add start offset to string start pointer low byte","46879":"save string start pointer low byte","46881":"branch if no overflow","46883":"else increment string start pointer high byte","46885":"copy length to A","46886":"store string from pointer to utility pointer","46889":"check space on descriptor stack then put string address\nand length on descriptor stack and update stack pointers","46892":"pull string data and byte parameter from stack\nreturn pointer in descriptor, byte in A (and X), Y=0","46895":"clear carry for add-1","46896":"subtract string length","46898":"invert it (A=LEN(expression$)-l)","46900":"go do rest of LEFT$()","46903":"set default length = 255","46905":"save default length","46907":"scan memory","46910":"compare with \")\"","46912":"branch if = \")\" (skip second byte get)","46914":"scan for \",\", else do syntax error then warm start","46917":"get byte parameter","46920":"pull string data and byte parameter from stack\nreturn pointer in descriptor, byte in A (and X), Y=0","46923":"if null do illegal quantity error then warm start","46925":"decrement start index","46926":"copy to A","46927":"save string start offset","46928":"clear carry for sub-1","46929":"clear output string length","46931":"subtract string length","46933":"if start\u003estring length go do null string","46935":"complement -length","46937":"compare byte parameter","46939":"if length\u003eremaining string go do RIGHT$","46941":"get length byte","46943":"go do string copy, branch always","46945":"scan for \")\", else do syntax error then warm start","46948":"pull return address low byte","46949":"save return address low byte","46950":"pull return address high byte","46951":"save return address high byte","46953":"dump call to function vector low byte","46954":"dump call to function vector high byte","46955":"pull byte parameter","46956":"copy byte parameter to X","46957":"pull string pointer low byte","46958":"save it","46960":"pull string pointer high byte","46961":"save it","46963":"get return address high byte","46965":"back on stack","46966":"get return address low byte","46967":"back on stack","46968":"clear index","46970":"copy byte parameter","46972":"evaluate string, get length in A (and Y)","46975":"convert Y to byte in FAC1 and return","46978":"evaluate string","46981":"set data type = numeric","46983":"clear data type flag, $FF = string, $00 = numeric","46985":"copy length to Y","46987":"evaluate string, get length in A (and Y)","46990":"if null do illegal quantity error then warm start","46992":"set index to first character","46994":"get byte","46996":"copy to Y","46997":"convert Y to byte in FAC1 and return","47000":"do illegal quantity error then warm start","47003":"increment and scan memory","47006":"evaluate expression and check is numeric, else do\ntype mismatch","47009":"evaluate integer expression, sign check","47012":"get FAC1 mantissa 3","47014":"if not null do illegal quantity error then warm start","47016":"get FAC1 mantissa 4","47018":"scan memory and return","47021":"evaluate string, get length in A (and Y)","47024":"branch if not null string\nstring was null so set result = $00","47026":"clear FAC1 exponent and sign and return","47029":"get BASIC execute pointer low byte","47031":"get BASIC execute pointer high byte","47033":"save BASIC execute pointer low byte","47035":"save BASIC execute pointer high byte","47037":"get string pointer low byte","47039":"save BASIC execute pointer low byte","47041":"clear carry for add","47042":"add string length","47044":"save string end low byte","47046":"get string pointer high byte","47048":"save BASIC execute pointer high byte","47050":"branch if no high byte increment","47052":"increment string end high byte","47053":"save string end high byte","47055":"set index to $00","47057":"get string end byte","47059":"push it","47060":"clear A","47061":"terminate string with $00","47063":"scan memory","47066":"get FAC1 from string","47069":"restore string end byte","47070":"clear index","47072":"put string end byte back","47074":"get BASIC execute pointer low byte back","47076":"get BASIC execute pointer high byte back","47078":"save BASIC execute pointer low byte","47080":"save BASIC execute pointer high byte","47083":"evaluate expression and check is numeric, else do\ntype mismatch","47086":"convert FAC_1 to integer in temporary integer","47089":"scan for \",\", else do syntax error then warm start","47092":"get byte parameter and return","47095":"get FAC1 sign","47097":"if -ve do illegal quantity error then warm start","47099":"get FAC1 exponent","47101":"compare with exponent = 2^16","47103":"if \u003e= do illegal quantity error then warm start","47105":"convert FAC1 floating to fixed","47108":"get FAC1 mantissa 3","47110":"get FAC1 mantissa 4","47112":"save temporary integer low byte","47114":"save temporary integer high byte","47117":"get line number high byte","47119":"save line number high byte","47120":"get line number low byte","47122":"save line number low byte","47123":"convert FAC_1 to integer in temporary integer","47126":"clear index","47128":"read byte","47130":"copy byte to A","47131":"pull byte","47132":"restore line number low byte","47134":"pull byte","47135":"restore line number high byte","47137":"convert Y to byte in FAC_1 and return","47140":"get parameters for POKE/WAIT","47143":"copy byte to A","47144":"clear index","47146":"write byte","47149":"get parameters for POKE/WAIT","47152":"save byte","47154":"clear mask","47156":"scan memory","47159":"skip if no third argument","47161":"scan for \",\" and get byte, else syntax error then\nwarm start","47164":"save EOR argument","47166":"clear index","47168":"get byte via temporary integer (address)","47170":"EOR with second argument       (mask)","47172":"AND with first argument        (byte)","47174":"loop if result is zero","47177":"set 0.5 pointer low byte","47179":"set 0.5 pointer high byte","47181":"add (AY) to FAC1","47184":"unpack memory (AY) into FAC2","47187":"get FAC1 sign (b7)","47189":"complement it","47191":"save FAC1 sign (b7)","47193":"EOR with FAC2 sign (b7)","47195":"save sign compare (FAC1 EOR FAC2)","47197":"get FAC1 exponent","47199":"add FAC2 to FAC1 and return","47202":"shift FACX A times right (\u003e8 shifts)","47205":"go subtract mantissas","47207":"unpack memory (AY) into FAC2","47210":"branch if FAC1 is not zero","47212":"FAC1 was zero so copy FAC2 to FAC1 and return\nFAC1 is non zero","47215":"get FAC1 rounding byte","47217":"save as FAC2 rounding byte","47219":"set index to FAC2 exponent address","47221":"get FAC2 exponent","47223":"copy exponent","47224":"exit if zero","47226":"set carry for subtract","47227":"subtract FAC1 exponent","47229":"if equal go add mantissas","47231":"if FAC2 \u003c FAC1 then go shift FAC2 right\nelse FAC2 \u003e FAC1","47233":"save FAC1 exponent","47235":"get FAC2 sign (b7)","47237":"save FAC1 sign (b7)","47239":"complement A","47241":"+1, twos complement, carry is set","47243":"clear Y","47245":"clear FAC2 rounding byte","47247":"set index to FAC1 exponent address","47249":"branch always\nFAC2 \u003c FAC1","47251":"clear Y","47253":"clear FAC1 rounding byte","47255":"compare exponent diff with $F9","47257":"branch if range $79-$F8","47259":"copy exponent difference to Y","47260":"get FAC1 rounding byte","47262":"shift FAC? mantissa 1","47264":"shift FACX Y times right\nexponents are equal now do mantissa subtract","47267":"test sign compare (FAC1 EOR FAC2)","47269":"if = add FAC2 mantissa to FAC1 mantissa and return","47271":"set the Y index to FAC1 exponent address","47273":"compare X to FAC2 exponent address","47275":"if = continue, Y = FAC1, X = FAC2","47277":"else set the Y index to FAC2 exponent address\nsubtract the smaller from the bigger (take the sign of\nthe bigger)","47279":"set carry for subtract","47280":"ones complement A","47282":"add FAC2 rounding byte","47284":"save FAC1 rounding byte","47286":"get FACY mantissa 4","47289":"subtract FACX mantissa 4","47291":"save FAC1 mantissa 4","47293":"get FACY mantissa 3","47296":"subtract FACX mantissa 3","47298":"save FAC1 mantissa 3","47300":"get FACY mantissa 2","47303":"subtract FACX mantissa 2","47305":"save FAC1 mantissa 2","47307":"get FACY mantissa 1","47310":"subtract FACX mantissa 1","47312":"save FAC1 mantissa 1","47314":"branch if number is +ve","47316":"negate FAC1","47319":"clear Y","47321":"clear A","47322":"clear carry for add","47323":"get FAC1 mantissa 1","47325":"if not zero normalise FAC1","47327":"get FAC1 mantissa 2","47329":"save FAC1 mantissa 1","47331":"get FAC1 mantissa 3","47333":"save FAC1 mantissa 2","47335":"get FAC1 mantissa 4","47337":"save FAC1 mantissa 3","47339":"get FAC1 rounding byte","47341":"save FAC1 mantissa 4","47343":"clear FAC1 rounding byte","47345":"add x to exponent offset","47347":"compare with $20, max offset, all bits would be = 0","47349":"loop if not max","47351":"clear A","47353":"set FAC1 exponent","47355":"save FAC1 sign (b7)","47358":"add FAC2 rounding byte","47360":"save FAC1 rounding byte","47362":"get FAC1 mantissa 4","47364":"add FAC2 mantissa 4","47366":"save FAC1 mantissa 4","47368":"get FAC1 mantissa 3","47370":"add FAC2 mantissa 3","47372":"save FAC1 mantissa 3","47374":"get FAC1 mantissa 2","47376":"add FAC2 mantissa 2","47378":"save FAC1 mantissa 2","47380":"get FAC1 mantissa 1","47382":"add FAC2 mantissa 1","47384":"save FAC1 mantissa 1","47386":"test and normalise FAC1 for C=0/1","47389":"add 1 to exponent offset","47391":"shift FAC1 rounding byte","47393":"shift FAC1 mantissa 4","47395":"shift FAC1 mantissa 3","47397":"shift FAC1 mantissa 2","47399":"shift FAC1 mantissa 1\nnormalise FAC1","47401":"loop if not normalised","47403":"set carry for subtract","47404":"subtract FAC1 exponent","47406":"branch if underflow (set result = $0)","47408":"complement exponent","47410":"+1 (twos complement)","47412":"save FAC1 exponent\ntest and normalise FAC1 for C=0/1","47414":"exit if no overflow\nnormalise FAC1 for C=1","47416":"increment FAC1 exponent","47418":"if zero do overflow error then warm start","47420":"shift FAC1 mantissa 1","47422":"shift FAC1 mantissa 2","47424":"shift FAC1 mantissa 3","47426":"shift FAC1 mantissa 4","47428":"shift FAC1 rounding byte","47431":"get FAC1 sign (b7)","47433":"complement it","47435":"save FAC1 sign (b7)\ntwos complement FAC1 mantissa","47437":"get FAC1 mantissa 1","47439":"complement it","47441":"save FAC1 mantissa 1","47443":"get FAC1 mantissa 2","47445":"complement it","47447":"save FAC1 mantissa 2","47449":"get FAC1 mantissa 3","47451":"complement it","47453":"save FAC1 mantissa 3","47455":"get FAC1 mantissa 4","47457":"complement it","47459":"save FAC1 mantissa 4","47461":"get FAC1 rounding byte","47463":"complement it","47465":"save FAC1 rounding byte","47467":"increment FAC1 rounding byte","47469":"exit if no overflow\nincrement FAC1 mantissa","47471":"increment FAC1 mantissa 4","47473":"finished if no rollover","47475":"increment FAC1 mantissa 3","47477":"finished if no rollover","47479":"increment FAC1 mantissa 2","47481":"finished if no rollover","47483":"increment FAC1 mantissa 1","47486":"error $0F, overflow error","47488":"do error #X then warm start","47491":"set the offset to FACtemp","47493":"get FACX mantissa 4","47495":"save as FAC1 rounding byte","47497":"get FACX mantissa 3","47499":"save FACX mantissa 4","47501":"get FACX mantissa 2","47503":"save FACX mantissa 3","47505":"get FACX mantissa 1","47507":"save FACX mantissa 2","47509":"get FAC1 overflow byte","47511":"save FACX mantissa 1\nshift FACX -A times right (\u003e 8 shifts)","47513":"add 8 to shift count","47515":"go do 8 shift if still -ve","47517":"go do 8 shift if zero","47519":"else subtract 8 again","47521":"save count to Y","47522":"get FAC1 rounding byte","47526":"shift FACX mantissa 1","47528":"branch if +ve","47530":"this sets b7 eventually","47532":"shift FACX mantissa 1 (correct for ASL)","47534":"shift FACX mantissa 1 (put carry in b7)\nshift FACX Y times right","47536":"shift FACX mantissa 2","47538":"shift FACX mantissa 3","47540":"shift FACX mantissa 4","47542":"shift FACX rounding byte","47543":"increment exponent diff","47544":"branch if range adjust not complete","47546":"just clear it","47594":"test sign and zero","47597":"if zero do illegal quantity error then warm start","47599":"skip error if +ve","47601":"do illegal quantity error then warm start","47604":"get FAC1 exponent","47606":"normalise it","47608":"save it","47609":"set exponent to zero","47611":"save FAC1 exponent","47613":"pointer to 1/root 2 low byte","47615":"pointer to 1/root 2 high byte","47617":"add (AY) to FAC1 (1/root2)","47620":"pointer to root 2 low byte","47622":"pointer to root 2 high byte","47624":"convert AY and do (AY)/FAC1 (root2/(x+(1/root2)))","47627":"pointer to 1 low byte","47629":"pointer to 1 high byte","47631":"subtract FAC1 ((root2/(x+(1/root2)))-1) from (AY)","47634":"pointer to series for LOG(n) low byte","47636":"pointer to series for LOG(n) high byte","47638":"^2 then series evaluation","47641":"pointer to -0.5 low byte","47643":"pointer to -0.5 high byte","47645":"add (AY) to FAC1","47648":"restore FAC1 exponent","47649":"evaluate new ASCII digit","47652":"pointer to LOG(2) low byte","47654":"pointer to LOG(2) high byte","47656":"unpack memory (AY) into FAC2","47659":"multiply FAC1 by FAC2 ??","47661":"exit if zero","47664":"test and adjust accumulators","47667":"clear A","47669":"clear temp mantissa 1","47671":"clear temp mantissa 2","47673":"clear temp mantissa 3","47675":"clear temp mantissa 4","47677":"get FAC1 rounding byte","47679":"go do shift/add FAC2","47682":"get FAC1 mantissa 4","47684":"go do shift/add FAC2","47687":"get FAC1 mantissa 3","47689":"go do shift/add FAC2","47692":"get FAC1 mantissa 2","47694":"go do shift/add FAC2","47697":"get FAC1 mantissa 1","47699":"go do shift/add FAC2","47702":"copy temp to FAC1, normalise and return","47705":"branch if byte \u003c\u003e zero","47707":"shift FCAtemp \u003c\u003c A+8 times\nelse do shift and add","47710":"shift byte","47711":"set top bit (mark for 8 times)","47713":"copy result","47714":"skip next if bit was zero","47716":"clear carry for add","47717":"get temp mantissa 4","47719":"add FAC2 mantissa 4","47721":"save temp mantissa 4","47723":"get temp mantissa 3","47725":"add FAC2 mantissa 3","47727":"save temp mantissa 3","47729":"get temp mantissa 2","47731":"add FAC2 mantissa 2","47733":"save temp mantissa 2","47735":"get temp mantissa 1","47737":"add FAC2 mantissa 1","47739":"save temp mantissa 1","47741":"shift temp mantissa 1","47743":"shift temp mantissa 2","47745":"shift temp mantissa 3","47747":"shift temp mantissa 4","47749":"shift temp rounding byte","47751":"get byte back","47752":"shift byte","47753":"loop if all bits not done","47756":"save pointer low byte","47758":"save pointer high byte","47760":"5 bytes to get (0-4)","47762":"get mantissa 4","47764":"save FAC2 mantissa 4","47766":"decrement index","47767":"get mantissa 3","47769":"save FAC2 mantissa 3","47771":"decrement index","47772":"get mantissa 2","47774":"save FAC2 mantissa 2","47776":"decrement index","47777":"get mantissa 1 + sign","47779":"save FAC2 sign (b7)","47781":"EOR with FAC1 sign (b7)","47783":"save sign compare (FAC1 EOR FAC2)","47785":"recover FAC2 sign (b7)","47787":"set 1xxx xxx (set normal bit)","47789":"save FAC2 mantissa 1","47791":"decrement index","47792":"get exponent byte","47794":"save FAC2 exponent","47796":"get FAC1 exponent","47799":"get FAC2 exponent","47801":"branch if FAC2 = $00 (handle underflow)","47803":"clear carry for add","47804":"add FAC1 exponent","47806":"branch if sum of exponents \u003c $0100","47808":"do overflow error","47810":"clear carry for the add","47812":"if +ve go handle underflow","47814":"adjust exponent","47816":"save FAC1 exponent","47818":"branch if not zero","47820":"save FAC1 sign and return","47823":"get sign compare (FAC1 EOR FAC2)","47825":"save FAC1 sign (b7)","47828":"get FAC1 sign (b7)","47830":"complement it","47832":"do overflow error\nhandle underflow","47834":"pop return address low byte","47835":"pop return address high byte","47836":"clear FAC1 exponent and sign and return","47839":"do overflow error then warm start","47842":"round and copy FAC1 to FAC2","47845":"copy exponent (set the flags)","47846":"exit if zero","47848":"clear carry for add","47849":"add two to exponent (*4)","47851":"do overflow error if \u003e $FF\nFAC1 = (FAC1 + FAC2) * 2","47853":"clear byte","47855":"clear sign compare (FAC1 EOR FAC2)","47857":"add FAC2 to FAC1 (*5)","47860":"increment FAC1 exponent (*10)","47862":"if exponent now zero go do overflow error","47870":"round and copy FAC1 to FAC2","47873":"set 10 pointer low byte","47875":"set 10 pointer high byte","47877":"clear sign","47879":"save sign compare (FAC1 EOR FAC2)","47881":"unpack memory (AY) into FAC1","47884":"do FAC2/FAC1\nPerform divide-by","47887":"unpack memory (AY) into FAC2","47890":"if zero go do /0 error","47892":"round FAC1","47895":"clear A","47897":"set carry for subtract","47898":"subtract FAC1 exponent (2s complement)","47900":"save FAC1 exponent","47902":"test and adjust accumulators","47905":"increment FAC1 exponent","47907":"if zero do overflow error","47909":"set index to FAC temp","47911":"set byte","47913":"get FAC2 mantissa 1","47915":"compare FAC1 mantissa 1","47917":"branch if \u003c\u003e","47919":"get FAC2 mantissa 2","47921":"compare FAC1 mantissa 2","47923":"branch if \u003c\u003e","47925":"get FAC2 mantissa 3","47927":"compare FAC1 mantissa 3","47929":"branch if \u003c\u003e","47931":"get FAC2 mantissa 4","47933":"compare FAC1 mantissa 4","47935":"save FAC2-FAC1 compare status","47936":"shift byte","47937":"skip next if no carry","47939":"increment index to FAC temp","47948":"restore FAC2-FAC1 compare status","47949":"if FAC2 \u003e= FAC1 then do subtract\nFAC2 = FAC2*2","47951":"shift FAC2 mantissa 4","47953":"shift FAC2 mantissa 3","47955":"shift FAC2 mantissa 2","47957":"shift FAC2 mantissa 1","47959":"loop with no compare","47961":"loop with compare","47963":"loop with no compare, branch always","47965":"save FAC2-FAC1 compare status","47966":"get FAC2 mantissa 4","47968":"subtract FAC1 mantissa 4","47970":"save FAC2 mantissa 4","47972":"get FAC2 mantissa 3","47974":"subtract FAC1 mantissa 3","47976":"save FAC2 mantissa 3","47978":"get FAC2 mantissa 2","47980":"subtract FAC1 mantissa 2","47982":"save FAC2 mantissa 2","47984":"get FAC2 mantissa 1","47986":"subtract FAC1 mantissa 1","47988":"save FAC2 mantissa 1","47990":"restore FAC2-FAC1 compare status","47996":"branch always\ndo A\u003c\u003c6, save as FAC1 rounding byte, normalise and return","48004":"save FAC1 rounding byte","48006":"dump FAC2-FAC1 compare status","48007":"copy temp to FAC1, normalise and return\ndo \"Divide by zero\" error","48010":"error $14, divide by zero error","48012":"do error #X then warm start","48015":"get temp mantissa 1","48017":"save FAC1 mantissa 1","48019":"get temp mantissa 2","48021":"save FAC1 mantissa 2","48023":"get temp mantissa 3","48025":"save FAC1 mantissa 3","48027":"get temp mantissa 4","48029":"save FAC1 mantissa 4","48031":"normalise FAC1 and return","48034":"save pointer low byte","48036":"save pointer high byte","48038":"5 bytes to do","48040":"get fifth byte","48042":"save FAC1 mantissa 4","48044":"decrement index","48045":"get fourth byte","48047":"save FAC1 mantissa 3","48049":"decrement index","48050":"get third byte","48052":"save FAC1 mantissa 2","48054":"decrement index","48055":"get second byte","48057":"save FAC1 sign (b7)","48059":"set 1xxx xxxx (add normal bit)","48061":"save FAC1 mantissa 1","48063":"decrement index","48064":"get first byte (exponent)","48066":"save FAC1 exponent","48068":"clear FAC1 rounding byte","48071":"set pointer low byte","48074":"set pointer low byte","48076":"set pointer high byte","48078":"pack FAC1 into (XY) and return, branch always","48080":"get destination pointer low byte","48082":"get destination pointer high byte","48084":"round FAC1","48087":"save pointer low byte","48089":"save pointer high byte","48091":"set index","48093":"get FAC1 mantissa 4","48095":"store in destination","48097":"decrement index","48098":"get FAC1 mantissa 3","48100":"store in destination","48102":"decrement index","48103":"get FAC1 mantissa 2","48105":"store in destination","48107":"decrement index","48108":"get FAC1 sign (b7)","48110":"set bits x111 1111","48112":"AND in FAC1 mantissa 1","48114":"store in destination","48116":"decrement index","48117":"get FAC1 exponent","48119":"store in destination","48121":"clear FAC1 rounding byte","48124":"get FAC2 sign (b7)\nsave FAC1 sign and copy ABS(FAC2) to FAC1","48126":"save FAC1 sign (b7)","48128":"5 bytes to copy","48130":"get byte from FAC2,X","48132":"save byte at FAC1,X","48134":"decrement count","48135":"loop if not all done","48137":"clear FAC1 rounding byte","48140":"round FAC1\ncopy FAC1 to FAC2","48143":"6 bytes to copy","48145":"get byte from FAC1,X","48147":"save byte at FAC2,X","48149":"decrement count","48150":"loop if not all done","48152":"clear FAC1 rounding byte","48155":"get FAC1 exponent","48157":"exit if zero","48159":"shift FAC1 rounding byte","48161":"exit if no overflow\nround FAC1 (no check)","48163":"increment FAC1 mantissa","48166":"branch if no overflow","48168":"nornalise FAC1 for C=1 and return","48171":"get FAC1 exponent","48173":"exit if zero (allready correct SGN(0)=0)","48175":"else get FAC1 sign (b7)","48177":"move sign bit to carry","48178":"set byte for -ve result","48180":"return if sign was set (-ve)","48182":"else set byte for +ve result","48185":"get FAC1 sign, return A = $FF -ve, A = $01 +ve","48188":"save FAC1 mantissa 1","48190":"clear A","48192":"clear FAC1 mantissa 2","48194":"set exponent\nset exponent = X, clear FAC1 3 and 4 and normalise","48196":"get FAC1 mantissa 1","48198":"complement it","48200":"sign bit into carry\nset exponent = X, clear mantissa 4 and 3 and normalise FAC1","48201":"clear A","48203":"clear FAC1 mantissa 4","48205":"clear FAC1 mantissa 3\nset exponent = X and normalise FAC1","48207":"set FAC1 exponent","48209":"clear FAC1 rounding byte","48211":"clear FAC1 sign (b7)","48213":"do ABS and normalise FAC1","48216":"clear FAC1 sign, put zero in b7","48219":"save pointer low byte","48221":"save pointer high byte","48223":"clear index","48225":"get exponent","48227":"increment index","48228":"copy (AY) exponent to X","48229":"branch if (AY) exponent=0 and get FAC1 sign\nA = $FF, Cb = 1/-ve A = $01, Cb = 0/+ve","48231":"get (AY) mantissa 1, with sign","48233":"EOR FAC1 sign (b7)","48235":"if signs \u003c\u003e do return A = $FF, Cb = 1/-ve\nA = $01, Cb = 0/+ve and return","48237":"compare (AY) exponent with FAC1 exponent","48239":"branch if different","48241":"get (AY) mantissa 1, with sign","48243":"normalise top bit","48245":"compare with FAC1 mantissa 1","48247":"branch if different","48249":"increment index","48250":"get mantissa 2","48252":"compare with FAC1 mantissa 2","48254":"branch if different","48256":"increment index","48257":"get mantissa 3","48259":"compare with FAC1 mantissa 3","48261":"branch if different","48263":"increment index","48264":"set for 1/2 value rounding byte","48266":"compare with FAC1 rounding byte (set carry)","48268":"get mantissa 4","48270":"subtract FAC1 mantissa 4","48272":"exit if mantissa 4 equal\ngets here if number \u003c\u003e FAC1","48274":"get FAC1 sign (b7)","48276":"branch if FAC1 \u003e (AY)","48278":"else toggle FAC1 sign","48280":"return A = $FF, Cb = 1/-ve A = $01, Cb = 0/+ve","48283":"get FAC1 exponent","48285":"if zero go clear FAC1 and return","48287":"set carry for subtract","48288":"subtract maximum integer range exponent","48290":"test FAC1 sign (b7)","48292":"branch if FAC1 +ve\nFAC1 was -ve","48294":"copy subtracted exponent","48295":"overflow for -ve number","48297":"set FAC1 overflow byte","48299":"twos complement FAC1 mantissa","48302":"restore subtracted exponent","48303":"set index to FAC1","48305":"compare exponent result","48307":"if \u003c 8 shifts shift FAC1 A times right and return","48309":"shift FAC1 A times right (\u003e 8 shifts)","48312":"clear FAC1 overflow byte","48315":"copy shift count","48316":"get FAC1 sign (b7)","48318":"mask sign bit only (x000 0000)","48320":"shift FAC1 mantissa 1","48322":"OR sign in b7 FAC1 mantissa 1","48324":"save FAC1 mantissa 1","48326":"shift FAC1 Y times right","48329":"clear FAC1 overflow byte","48332":"get FAC1 exponent","48334":"compare with max int","48336":"exit if \u003e= (allready int, too big for fractional part!)","48338":"convert FAC1 floating to fixed","48341":"save FAC1 rounding byte","48343":"get FAC1 sign (b7)","48345":"save FAC1 sign (b7)","48347":"toggle FAC1 sign","48349":"shift into carry","48350":"set new exponent","48352":"save FAC1 exponent","48354":"get FAC1 mantissa 4","48356":"save FAC1 mantissa 4 for power function","48358":"do ABS and normalise FAC1","48361":"clear FAC1 mantissa 1","48363":"clear FAC1 mantissa 2","48365":"clear FAC1 mantissa 3","48367":"clear FAC1 mantissa 4","48369":"clear Y","48371":"clear Y","48373":"set index","48375":"clear byte","48377":"decrement index","48378":"loop until numexp to negnum (and FAC1) = $00","48380":"branch if first character is numeric","48382":"else compare with \"-\"","48384":"branch if not \"-\"","48386":"set flag for -ve n (negnum = $FF)","48388":"branch always","48390":"else compare with \"+\"","48392":"branch if not \"+\"","48394":"increment and scan memory","48397":"branch if numeric character","48399":"else compare with \".\"","48401":"branch if \".\"","48403":"else compare with \"E\"","48405":"branch if not \"E\"\nwas \"E\" so evaluate exponential part","48407":"increment and scan memory","48410":"branch if numeric character","48412":"else compare with token for -","48414":"branch if token for -","48416":"else compare with \"-\"","48418":"branch if \"-\"","48420":"else compare with token for +","48422":"branch if token for +","48424":"else compare with \"+\"","48426":"branch if \"+\"","48428":"branch always","48430":"set exponent -ve flag (C, which=1, into b7)","48432":"increment and scan memory","48435":"branch if numeric character","48437":"test exponent -ve flag","48439":"if +ve go evaluate exponent\nelse do exponent = -exponent","48441":"clear result","48443":"set carry for subtract","48444":"subtract exponent byte","48446":"go evaluate exponent","48449":"set decimal point flag","48451":"test decimal point flag","48453":"branch if only one decimal point so far\nevaluate exponent","48455":"get exponent count byte","48457":"set carry for subtract","48458":"subtract numerator exponent","48460":"save exponent count byte","48462":"branch if no adjustment","48464":"else if +ve go do FAC1*10^expcnt\nelse go do FAC1/10^(0-expcnt)","48466":"divide FAC1 by 10","48469":"increment exponent count byte","48471":"loop until all done","48473":"branch always","48475":"multiply FAC1 by 10","48478":"decrement exponent count byte","48480":"loop until all done","48482":"get -ve flag","48484":"if -ve do - FAC1 and return","48487":"do - FAC1\ndo unsigned FAC1*10+number","48490":"save character","48491":"test decimal point flag","48493":"skip exponent increment if not set","48495":"else increment number exponent","48497":"multiply FAC1 by 10","48500":"restore character","48501":"set carry for subtract","48502":"convert to binary","48504":"evaluate new ASCII digit","48507":"go do next character\nevaluate new ASCII digit\nmultiply FAC1 by 10 then (ABS) add in new digit","48510":"save digit","48511":"round and copy FAC1 to FAC2","48514":"restore digit","48515":"save A as integer byte","48518":"get FAC2 sign (b7)","48520":"toggle with FAC1 sign (b7)","48522":"save sign compare (FAC1 EOR FAC2)","48524":"get FAC1 exponent","48526":"add FAC2 to FAC1 and return\nevaluate next character of exponential part of number","48529":"get exponent count byte","48531":"compare with 10 decimal","48533":"branch if less","48535":"make all -ve exponents = -100 decimal (causes underflow)","48537":"test exponent -ve flag","48539":"branch if -ve","48541":"else do overflow error then warm start","48544":"*2","48545":"*4","48546":"clear carry for add","48547":"*5","48549":"*10","48550":"clear carry for add","48551":"set index","48553":"add character (will be $30 too much!)","48555":"set carry for subtract","48556":"convert character to binary","48558":"save exponent count byte","48560":"go get next character","48578":"set \" IN \" pointer low byte","48580":"set \" IN \" pointer high byte","48582":"print null terminated string","48585":"get the current line number high byte","48587":"get the current line number low byte","48589":"save high byte as FAC1 mantissa1","48591":"save low byte as FAC1 mantissa2","48593":"set exponent to 16d bits","48595":"set integer is +ve flag","48596":"set exponent = X, clear mantissa 4 and 3 and normalise\nFAC1","48599":"convert FAC1 to string","48602":"print null terminated string","48605":"set index = 1","48607":"character = \" \" (assume +ve)","48609":"test FAC1 sign (b7)","48611":"branch if +ve","48613":"else character = \"-\"","48615":"save leading character (\" \" or \"-\")","48618":"save FAC1 sign (b7)","48620":"save index","48622":"increment index","48623":"set character = \"0\"","48625":"get FAC1 exponent","48627":"branch if FAC1\u003c\u003e0\nexponent was $00 so FAC1 is 0","48629":"save last character, [EOT] and exit\nFAC1 is some non zero value","48632":"clear (number exponent count)","48634":"compare FAC1 exponent with $80 (\u003c1.00000)","48636":"branch if 0.5 \u003c= FAC1 \u003c 1.0","48638":"branch if FAC1=\u003e1","48640":"set 1000000000 pointer low byte","48642":"set 1000000000 pointer high byte","48644":"do convert AY, FCA1*(AY)","48647":"set number exponent count","48649":"save number exponent count","48651":"set 999999999.25 pointer low byte (max before sci note)","48653":"set 999999999.25 pointer high byte","48655":"compare FAC1 with (AY)","48658":"exit if FAC1 = (AY)","48660":"go do /10 if FAC1 \u003e (AY)\nFAC1 \u003c (AY)","48662":"set 99999999.90625 pointer low byte","48664":"set 99999999.90625 pointer high byte","48666":"compare FAC1 with (AY)","48669":"branch if FAC1 = (AY) (allow decimal places)","48671":"branch if FAC1 \u003e (AY) (no decimal places)\nFAC1 \u003c= (AY)","48673":"multiply FAC1 by 10","48676":"decrement number exponent count","48678":"go test again, branch always","48680":"divide FAC1 by 10","48683":"increment number exponent count","48685":"go test again, branch always\nnow we have just the digits to do","48687":"add 0.5 to FAC1 (round FAC1)","48690":"convert FAC1 floating to fixed","48693":"set default digits before dp = 1","48695":"get number exponent count","48697":"clear carry for add","48698":"up to 9 digits before point","48700":"if -ve then 1 digit before dp","48702":"A\u003e=$0B if n\u003e=1E9","48704":"branch if \u003e= $0B\ncarry is clear","48706":"take 1 from digit count","48708":"copy to X","48709":"set exponent adjust","48711":"set carry for subtract","48712":"-2","48714":"save exponent adjust","48716":"save digits before dp count","48718":"copy to A","48719":"branch if no digits before dp","48721":"branch if digits before dp","48723":"get output string index","48725":"character \".\"","48727":"increment index","48728":"save to output string","48734":"character \"0\"","48736":"increment index","48737":"save to output string","48740":"save output string index","48742":"clear index (point to 100,000)","48746":"get FAC1 mantissa 4","48748":"clear carry for add","48749":"add byte 4, least significant","48752":"save FAC1 mantissa4","48754":"get FAC1 mantissa 3","48756":"add byte 3","48759":"save FAC1 mantissa3","48761":"get FAC1 mantissa 2","48763":"add byte 2","48766":"save FAC1 mantissa2","48768":"get FAC1 mantissa 1","48770":"add byte 1, most significant","48773":"save FAC1 mantissa1","48775":"increment the digit, set the sign on the test sense bit","48776":"if the carry is set go test if the result was positive\nelse the result needs to be negative","48778":"not -ve so try again","48780":"else done so return the digit","48782":"not +ve so try again\nelse done so return the digit","48784":"copy the digit","48785":"if Cb=0 just use it","48787":"else make the 2's complement ..","48789":".. and subtract it from 10","48791":"add \"0\"-1 to result","48793":"increment ..","48794":".. index to..","48795":".. next less ..","48796":".. power of ten","48797":"save current variable pointer low byte","48799":"get output string index","48801":"increment output string index","48802":"copy character to X","48803":"mask out top bit","48805":"save to output string","48808":"decrement # of characters before the dp","48810":"branch if still characters to do\nelse output the point","48812":"character \".\"","48814":"increment output string index","48815":"save to output string","48818":"save output string index","48820":"get current variable pointer low byte","48822":"get character back","48823":"toggle the test sense bit","48825":"clear the digit","48827":"copy it to the new digit","48830":"if at the max exit the digit loop","48834":"loop if not at the max\nnow remove trailing zeroes","48836":"restore the output string index","48838":"get character from output string","48841":"decrement output string index","48842":"compare with \"0\"","48844":"loop until non \"0\" character found","48846":"compare with \".\"","48848":"branch if was dp\nrestore last character","48850":"increment output string index","48851":"character \"+\"","48853":"get exponent count","48855":"if zero go set null terminator and exit\nexponent isn't zero so write exponent","48857":"branch if exponent count +ve","48859":"clear A","48861":"set carry for subtract","48862":"subtract exponent count adjust (convert -ve to +ve)","48864":"copy exponent count to X","48865":"character \"-\"","48867":"save to output string","48870":"character \"E\"","48872":"save exponent sign to output string","48875":"get exponent count back","48876":"one less than \"0\" character","48878":"set carry for subtract","48879":"increment 10's character","48880":"subtract 10 from exponent count","48882":"loop while still \u003e= 0","48884":"add character \":\" ($30+$0A, result is 10 less that value)","48886":"save to output string","48889":"copy 10's character","48890":"save to output string","48893":"set null terminator","48895":"save to output string","48898":"go set string pointer (AY) and exit, branch always\nsave last character, [EOT] and exit","48900":"save last character to output string\nset null terminator and exit","48903":"set null terminator","48905":"save after last character\nset string pointer (AY) and exit","48908":"set result string pointer low byte","48910":"set result string pointer high byte","49009":"round and copy FAC1 to FAC2","49012":"set 0.5 pointer low address","49014":"set 0.5 pointer high address","49016":"unpack memory (AY) into FAC1","49019":"perform EXP()","49021":"get FAC2 exponent","49023":"branch if FAC2\u003c\u003e0","49025":"clear FAC1 exponent and sign and return","49028":"set destination pointer low byte","49030":"set destination pointer high byte","49032":"pack FAC1 into (XY)","49035":"get FAC2 sign (b7)","49037":"branch if FAC2\u003e0\nelse FAC2 is -ve and can only be raised to an\ninteger power which gives an x + j0 result","49039":"perform INT()","49042":"set source pointer low byte","49044":"set source pointer high byte","49046":"compare FAC1 with (AY)","49049":"branch if FAC1 \u003c\u003e (AY) to allow Function Call error\nthis will leave FAC1 -ve and cause a Function Call\nerror when LOG() is called","49051":"clear sign b7","49052":"get FAC1 mantissa 4 from INT() function as sign in\nY for possible later negation, b0 only needed","49054":"save FAC1 sign and copy ABS(FAC2) to FAC1","49057":"copy sign back ..","49058":".. and save it","49059":"perform LOG()","49062":"set pointer low byte","49064":"set pointer high byte","49066":"do convert AY, FCA1*(AY)","49069":"perform EXP()","49072":"pull sign from stack","49073":"b0 is to be tested","49074":"if no bit then exit\ndo - FAC1","49076":"get FAC1 exponent","49078":"exit if FAC1_e = $00","49080":"get FAC1 sign (b7)","49082":"complement it","49084":"save FAC1 sign (b7)","49133":"set 1.443 pointer low byte","49135":"set 1.443 pointer high byte","49137":"do convert AY, FCA1*(AY)","49140":"get FAC1 rounding byte","49142":"+$50/$100","49144":"skip rounding if no carry","49146":"round FAC1 (no check)","49149":"continue EXP()","57344":"save FAC2 rounding byte","57346":"copy FAC1 to FAC2","57349":"get FAC1 exponent","57351":"compare with EXP limit (256d)","57353":"branch if less","57355":"handle overflow and underflow","57358":"perform INT()","57361":"get mantissa 4 from INT()","57363":"clear carry for add","57364":"normalise +1","57366":"if $00 result has overflowed so go handle it","57368":"set carry for subtract","57369":"exponent now correct","57371":"save FAC2 exponent\nswap FAC1 and FAC2","57372":"4 bytes to do","57374":"get FAC2,X","57376":"get FAC1,X","57378":"save FAC1,X","57380":"save FAC2,X","57382":"decrement count/index","57383":"loop if not all done","57385":"get FAC2 rounding byte","57387":"save as FAC1 rounding byte","57389":"perform subtraction, FAC2 from FAC1","57392":"do - FAC1","57395":"set counter pointer low byte","57397":"set counter pointer high byte","57399":"go do series evaluation","57402":"clear A","57404":"clear sign compare (FAC1 EOR FAC2)","57406":"get saved FAC2 exponent","57407":"test and adjust accumulators","57411":"save count pointer low byte","57413":"save count pointer high byte","57415":"pack FAC1 into $57","57418":"set pointer low byte (Y already $00)","57420":"do convert AY, FCA1*(AY)","57423":"go do series evaluation","57426":"pointer to original # low byte","57428":"pointer to original # high byte","57430":"do convert AY, FCA1*(AY)\ndo series evaluation","57433":"save count pointer low byte","57435":"save count pointer high byte\ndo series evaluation","57437":"pack FAC1 into $5C","57440":"get constants count","57442":"save constants count","57444":"get count pointer low byte","57446":"increment it (now constants pointer)","57447":"copy it","57448":"skip next if no overflow","57450":"else increment high byte","57452":"save low byte","57454":"get high byte","57456":"do convert AY, FCA1*(AY)","57459":"get constants pointer low byte","57461":"get constants pointer high byte","57463":"clear carry for add","57464":"+5 to low pointer (5 bytes per constant)","57466":"skip next if no overflow","57468":"increment high byte","57469":"save pointer low byte","57471":"save pointer high byte","57473":"add (AY) to FAC1","57476":"set pointer low byte to partial","57478":"set pointer high byte to partial","57480":"decrement constants count","57482":"loop until all done","57495":"get FAC1 sign\nreturn A = $FF -ve, A = $01 +ve","57498":"if n\u003c0 copy byte swapped FAC1 into RND() seed","57500":"if n\u003e0 get next number in RND() sequence\nelse n=0 so get the RND() number from VIA 1 timers","57502":"return base address of I/O devices","57505":"save pointer low byte","57507":"save pointer high byte","57509":"set index to T1 low byte","57511":"get T1 low byte","57513":"save FAC1 mantissa 1","57515":"increment index","57516":"get T1 high byte","57518":"save FAC1 mantissa 3","57520":"set index to T2 low byte","57522":"get T2 low byte","57524":"save FAC1 mantissa 2","57526":"increment index","57527":"get T2 high byte","57529":"save FAC1 mantissa 4","57531":"set exponent and exit","57534":"set seed pointer low address","57536":"set seed pointer high address","57538":"unpack memory (AY) into FAC1","57541":"set 11879546 pointer low byte","57543":"set 11879546 pointer high byte","57545":"do convert AY, FCA1*(AY)","57548":"set 3.927677739E-8 pointer low byte","57550":"set 3.927677739E-8 pointer high byte","57552":"add (AY) to FAC1","57555":"get FAC1 mantissa 4","57557":"get FAC1 mantissa 1","57559":"save FAC1 mantissa 4","57561":"save FAC1 mantissa 1","57563":"get FAC1 mantissa 2","57565":"get FAC1 mantissa 3","57567":"save FAC1 mantissa 2","57569":"save FAC1 mantissa 3","57571":"clear byte","57573":"clear FAC1 sign (always +ve)","57575":"get FAC1 exponent","57577":"save FAC1 rounding byte","57579":"set exponent = $80","57581":"save FAC1 exponent","57583":"normalise FAC1","57586":"set seed pointer low address","57588":"set seed pointer high address","57590":"pack FAC1 into (XY)","57593":"compare error with $F0","57595":"branch if not $F0","57597":"set end of memory high byte","57599":"set end of memory low byte","57601":"clear from start to end and return\nerror was not $F0","57604":"copy error #","57605":"branch if not $00","57607":"else error $1E, break error","57609":"do error #X then warm start","57612":"output character to channel","57615":"if error go handle BASIC I/O error","57618":"input character from channel","57621":"if error go handle BASIC I/O error","57624":"open channel for output","57627":"if error go handle BASIC I/O error","57630":"open channel for input","57633":"if error go handle BASIC I/O error","57636":"get character from input device","57639":"if error go handle BASIC I/O error","57642":"evaluate expression and check is numeric, else do\ntype mismatch","57645":"convert FAC_1 to integer in temporary integer","57648":"get return address high byte","57650":"push as return address","57651":"get return address low byte","57653":"push as return address","57654":"get saved status register","57657":"put on stack","57658":"get saved A","57661":"get saved X","57664":"get saved Y","57667":"pull processor status","57668":"call SYS address\ntail end of SYS code","57671":"save status","57672":"save returned A","57675":"save returned X","57678":"save returned Y","57681":"restore saved status","57682":"save status","57686":"get parameters for LOAD/SAVE","57689":"get start of variables low byte","57691":"get start of variables high byte","57693":"index to start of program memory","57695":"save RAM to device, A = index to start address, XY = end\naddress low/high","57698":"if error go handle BASIC I/O error","57701":"flag verify","57704":"flag load","57706":"set load/verify flag","57708":"get parameters for LOAD/SAVE","57711":"get load/verify flag","57713":"get start of memory low byte","57715":"get start of memory high byte","57717":"load RAM from a device","57720":"if error go handle BASIC I/O error","57722":"get load/verify flag","57724":"branch if load","57726":"error $1C, verify error","57728":"read I/O status word","57731":"mask for tape read error","57733":"branch if no read error","57735":"get the BASIC execute pointer low byte\nis this correct ?? won't this mean the \"OK\" prompt\nwhen doing a load from within a program ?","57739":"if ?? skip \"OK\" prompt","57741":"set \"OK\" pointer low byte","57743":"set \"OK\" pointer high byte","57745":"print null terminated string","57749":"read I/O status word","57752":"mask x0xx xxxx, clear read error","57754":"branch if no errors","57756":"error $1D, load error","57758":"do error #X then warm start","57761":"get BASIC execute pointer high byte","57763":"compare with $02xx","57765":"branch if not immediate mode","57767":"set start of variables low byte","57769":"set start of variables high byte","57771":"set \"READY.\" pointer low byte","57773":"set \"READY.\" pointer high byte","57775":"print null terminated string","57778":"reset execution, clear variables, flush stack,\nrebuild BASIC chain and do warm start","57781":"set BASIC execute pointer to start of memory - 1","57784":"rebuild BASIC line chaining","57787":"rebuild BASIC line chaining, do RESTORE and return","57790":"get parameters for OPEN/CLOSE","57793":"open a logical file","57796":"branch if error","57799":"get parameters for OPEN/CLOSE","57802":"get logical file number","57804":"close a specified logical file","57807":"exit if no error","57809":"go handle BASIC I/O error","57812":"clear file name length","57814":"clear the filename","57817":"set default device number, cassette","57819":"set default command","57821":"set logical, first and second addresses","57824":"exit function if [EOT] or \":\"","57827":"set filename","57830":"exit function if [EOT] or \":\"","57833":"scan and get byte, else do syntax error then warm start","57836":"clear command","57838":"save device number","57840":"set logical, first and second addresses","57843":"exit function if [EOT] or \":\"","57846":"scan and get byte, else do syntax error then warm start","57849":"copy command to A","57850":"copy command to Y","57851":"get device number back","57853":"set logical, first and second addresses and return","57856":"scan for \",byte\", else do syntax error then warm start","57859":"get byte parameter and return\nexit function if [EOT] or \":\"","57862":"scan memory","57865":"branch if not [EOL] or \":\"","57867":"dump return address low byte","57868":"dump return address high byte","57870":"scan for \",\", else do syntax error then warm start","57873":"scan memory","57876":"exit if following byte","57878":"else do syntax error then warm start","57881":"clear the filename length","57883":"clear the filename","57886":"scan for valid byte, else do syntax error then warm start","57889":"get byte parameter, logical file number","57892":"save logical file number","57894":"copy logical file number to A","57895":"set default device number, cassette","57897":"set default command","57899":"set logical, first and second addresses","57902":"exit function if [EOT] or \":\"","57905":"scan and get byte, else do syntax error then warm start","57908":"save device number","57910":"clear command","57912":"get logical file number","57914":"compare device number with screen","57916":"branch if less than screen","57918":"else decrement command","57919":"set logical, first and second addresses","57922":"exit function if [EOT] or \":\"","57925":"scan and get byte, else do syntax error then warm start","57928":"copy command to A","57929":"copy command to Y","57930":"get device number","57932":"get logical file number","57934":"set logical, first and second addresses","57937":"exit function if [EOT] or \":\"","57940":"scan for \",byte\", else do syntax error then warm start","57943":"evaluate expression","57946":"evaluate string","57949":"get string pointer low byte","57951":"get string pointer high byte","57953":"set the filename and return","57956":"set pi/2 pointer low byte","57958":"set pi/2 pointer high byte","57960":"add (AY) to FAC1","57963":"round and copy FAC1 to FAC2","57966":"set 2*pi pointer low byte","57968":"set 2*pi pointer high byte","57970":"get FAC2 sign (b7)","57972":"divide by (AY) (X=sign)","57975":"round and copy FAC1 to FAC2","57978":"perform INT()","57981":"clear byte","57983":"clear sign compare (FAC1 EOR FAC2)","57985":"perform subtraction, FAC2 from FAC1","57988":"set 0.25 pointer low byte","57990":"set 0.25 pointer high byte","57992":"perform subtraction, FAC1 from (AY)","57995":"get FAC1 sign (b7)","57997":"save FAC1 sign","57998":"branch if +ve\nFAC1 sign was -ve","58000":"add 0.5 to FAC1 (round FAC1)","58003":"get FAC1 sign (b7)","58005":"branch if -ve","58007":"get the comparison evaluation flag","58009":"toggle flag","58011":"save the comparison evaluation flag","58013":"do - FAC1","58016":"set 0.25 pointer low byte","58018":"set 0.25 pointer high byte","58020":"add (AY) to FAC1","58023":"restore FAC1 sign","58024":"branch if was +ve\nelse correct FAC1","58026":"do - FAC1","58029":"set pointer low byte to counter","58031":"set pointer high byte to counter","58033":"^2 then series evaluation and return","58036":"pack FAC1 into $57","58039":"clear A","58041":"clear the comparison evaluation flag","58043":"perform SIN()","58046":"set sin(n) pointer low byte","58048":"set sin(n) pointer high byte","58050":"pack FAC1 into (XY)","58053":"set n pointer low byte","58055":"set n pointer high byte","58057":"unpack memory (AY) into FAC1","58060":"clear byte","58062":"clear FAC1 sign (b7)","58064":"get the comparison evaluation flag","58066":"save flag and go do series evaluation","58069":"set sin(n) pointer low byte","58071":"set sin(n) pointer high byte","58073":"convert AY and do (AY)/FAC1","58076":"save comparison flag","58077":"add 0.25, ^2 then series evaluation","58126":"get FAC1 sign (b7)","58128":"save sign","58129":"branch if +ve","58131":"else do - FAC1","58134":"get FAC1 exponent","58136":"push exponent","58137":"compare with 1","58139":"branch if FAC1 \u003c 1","58141":"pointer to 1 low byte","58143":"pointer to 1 high byte","58145":"convert AY and do (AY)/FAC1","58148":"pointer to series low byte","58150":"pointer to series high byte","58152":"^2 then series evaluation","58155":"restore old FAC1 exponent","58156":"compare with 1","58158":"branch if FAC1 \u003c 1","58160":"pointer to (pi/2) low byte","58162":"pointer to (pi/2) low byte","58164":"perform subtraction, FAC1 from (AY)","58167":"restore FAC1 sign","58168":"exit if was +ve","58170":"else do - FAC1 and return","58235":"close input and output channels","58238":"clear A","58240":"set current I/O channel, flag default","58242":"flush BASIC stack and clear continue pointer","58245":"enable the interrupts","58246":"set -ve error, just do warm start","58248":"go handle error message, normally $E38B","58251":"copy the error number","58252":"if -ve go do warm start","58254":"else do error #X then warm start","58257":"do warm start","58260":"initialise the BASIC vector table","58263":"initialise the BASIC RAM locations","58266":"print the start up message and initialise the memory\npointers\nnot ok ??","58269":"value for start stack","58271":"set stack pointer","58272":"do \"READY.\" warm start, branch always","58274":"increment BASIC execute pointer low byte","58276":"branch if no carry\nelse","58278":"increment BASIC execute pointer high byte\npage 0 initialisation table from $0079\nscan memory","58280":"get byte to scan, address set by call routine","58283":"compare with \":\"","58285":"exit if\u003e=\npage 0 initialisation table from $0080\nclear Cb if numeric","58287":"compare with \" \"","58289":"if \" \" go do next","58291":"set carry for SBC","58292":"subtract \"0\"","58294":"set carry for SBC","58295":"subtract -\"0\"\nclear carry if byte = \"0\"-\"9\"","58303":"opcode for JMP","58305":"save for functions vector jump","58307":"save for USR() vector jump\nset USR() vector to illegal quantity error","58310":"set USR() vector low byte","58312":"set USR() vector high byte","58314":"save USR() vector low byte","58317":"save USR() vector high byte","58320":"set fixed to float vector low byte","58322":"set fixed to float vector high byte","58324":"save fixed to float vector low byte","58326":"save fixed to float vector high byte","58328":"set float to fixed vector low byte","58330":"set float to fixed vector high byte","58332":"save float to fixed vector low byte","58334":"save float to fixed vector high byte\ncopy the character get subroutine from $E3A2 to $0074","58336":"set the byte count","58338":"get a byte from the table","58341":"save the byte in page zero","58343":"decrement the count","58344":"loop if not all done\nclear descriptors, strings, program area and mamory pointers","58346":"set the step size, collecting descriptors","58348":"save the garbage collection step size","58350":"clear A","58352":"clear FAC1 overflow byte","58354":"clear the current I/O channel, flag default","58356":"clear the current descriptor stack item pointer high byte","58358":"set X","58360":"set the chain link pointer low byte","58363":"set the chain link pointer high byte","58366":"initial the value for descriptor stack","58368":"set descriptor stack pointer","58370":"set Cb = 1 to read the bottom of memory","58371":"read/set the bottom of memory","58374":"save the start of memory low byte","58376":"save the start of memory high byte","58378":"set Cb = 1 to read the top of memory","58379":"read/set the top of memory","58382":"save the end of memory low byte","58384":"save the end of memory high byte","58386":"set the bottom of string space low byte","58388":"set the bottom of string space high byte","58390":"clear the index","58392":"clear the A","58393":"clear the the first byte of memory","58395":"increment the start of memory low byte","58397":"if no rollover skip the high byte increment","58399":"increment start of memory high byte","58402":"get the start of memory low byte","58404":"get the start of memory high byte","58406":"check available memory, do out of memory error if no room","58409":"set \"**** COMMODORE 64 BASIC V2 ****\" pointer low byte","58411":"set \"**** COMMODORE 64 BASIC V2 ****\" pointer high byte","58413":"print a null terminated string","58416":"get the end of memory low byte","58418":"set carry for subtract","58419":"subtract the start of memory low byte","58421":"copy the result to X","58422":"get the end of memory high byte","58424":"subtract the start of memory high byte","58426":"print XA as unsigned integer","58429":"set \" BYTES FREE\" pointer low byte","58431":"set \" BYTES FREE\" pointer high byte","58433":"print a null terminated string","58436":"do NEW, CLEAR, RESTORE and return","58451":"set byte count","58453":"get byte from table","58456":"save byte to RAM","58459":"decrement index","58460":"loop if more to do","58541":"save the flag byte","58542":"open channel for output","58545":"copy the returned flag byte","58546":"restore the alling flag byte","58547":"if there is no error skip copying the error flag","58549":"else copy the error flag","58579":"save the start bit check flag, set start bit received","58581":"set the initial parity state","58583":"save the receiver parity bit","58586":"get the current colour code","58589":"save it to the colour RAM","58592":"set the number of jiffies to wait","58594":"read the stop key column","58596":"test for $FF, no keys pressed","58597":"if any keys were pressed just exit","58599":"compare the wait time with the jiffy clock mid byte","58601":"if not there yet go wait some more","58624":"get the I/O base address low byte","58626":"get the I/O base address high byte","58629":"get the x size","58631":"get the y size","58634":"if read cursor go do read","58636":"save the cursor row","58638":"save the cursor column","58640":"set the screen pointers for the cursor row, column","58643":"get the cursor row","58645":"get the cursor column","58648":"initialise the vic chip","58651":"clear A","58653":"clear the shift mode switch","58656":"clear the cursor blink phase","58658":"get the keyboard decode logic pointer low byte","58660":"save the keyboard decode logic pointer low byte","58663":"get the keyboard decode logic pointer high byte","58665":"save the keyboard decode logic pointer high byte","58668":"set the maximum size of the keyboard buffer","58670":"save the maximum size of the keyboard buffer","58673":"save the repeat delay counter","58676":"set light blue","58678":"save the current colour code","58681":"speed 4","58683":"save the repeat speed counter","58686":"set the cursor flash timing","58688":"save the cursor timing countdown","58690":"save the cursor enable, $00 = flash cursor","58692":"get the screen memory page","58695":"set the high bit, flag every line is a logical line start","58697":"copy to Y","58698":"clear the line start low byte","58700":"clear the index","58701":"save the start of line X pointer high byte","58703":"clear carry for add","58704":"add the line length to the low byte","58706":"if no rollover skip the high byte increment","58708":"else increment the high byte","58709":"increment the line index","58710":"compare it with the number of lines + 1","58712":"loop if not all done","58714":"set the end of table marker","58716":"mark the end of the table","58718":"set the line count, 25 lines to do, 0 to 24","58720":"clear screen line X","58723":"decrement the count","58724":"loop if more to do","58726":"clear Y","58728":"clear the cursor column","58730":"clear the cursor row","58732":"get the cursor row","58734":"get the cursor column","58736":"get start of line X pointer high byte","58738":"if it is the logical line start continue","58740":"else clear carry for add","58741":"add one line length","58743":"save the cursor column","58745":"decrement the cursor row","58746":"loop, branch always","58748":"fetch a screen address","58751":"set the line length","58753":"increment the cursor row","58754":"get the start of line X pointer high byte","58756":"if logical line start exit","58758":"else clear carry for add","58759":"add one line length to the current line length","58761":"increment the cursor row","58762":"loop, branch always","58764":"save current screen line length","58766":"calculate the pointer to colour RAM and return","58769":"compare it with the input cursor row","58771":"if there just exit","58773":"else go ??","58777":"huh","58778":"initialise the vic chip","58781":"home the cursor and return","58784":"set the screen as the output device","58786":"save the output device number","58788":"set the keyboard as the input device","58790":"save the input device number","58792":"set the count/index","58794":"get a vic ii chip initialisation value","58797":"save it to the vic ii chip","58800":"decrement the count/index","58801":"loop if more to do","58804":"get the current character from the buffer","58807":"clear the index","58809":"get the next character,X from the buffer","58812":"save it as the current character,X in the buffer","58815":"increment the index","58816":"compare it with the keyboard buffer index","58818":"loop if more to do","58820":"decrement keyboard buffer index","58822":"copy the key to A","58823":"enable the interrupts","58824":"flag got byte","58826":"output character","58829":"get the keyboard buffer index","58831":"cursor enable, $00 = flash cursor, $xx = no flash","58833":"screen scrolling flag, $00 = scroll, $xx = no scroll\nthis disables both the cursor flash and the screen scroll\nwhile there are characters in the keyboard buffer","58836":"loop if the buffer is empty","58838":"disable the interrupts","58839":"get the cursor blink phase","58841":"if cursor phase skip the overwrite\nelse it is the character phase","58843":"get the character under the cursor","58845":"get the colour under the cursor","58848":"clear Y","58850":"clear the cursor blink phase","58852":"print character A and colour X","58855":"input from the keyboard buffer","58858":"compare with [SHIFT][RUN]","58860":"if not [SHIFT][RUN] skip the buffer fill\nkeys are [SHIFT][RUN] so put \"LOAD\",$0D,\"RUN\",$0D into\nthe buffer","58862":"set the byte count","58864":"disable the interrupts","58865":"set the keyboard buffer index","58867":"get byte from the auto load/run table","58870":"save it to the keyboard buffer","58873":"decrement the count/index","58874":"loop while more to do","58876":"loop for the next key, branch always\nwas not [SHIFT][RUN]","58878":"compare the key with [CR]","58880":"if not [CR] print the character and get the next key\nelse it was [CR]","58882":"get the current screen line length","58884":"input from keyboard or screen, $xx = screen,\n$00 = keyboard","58886":"get the character from the current screen line","58888":"compare it with [SPACE]","58890":"if not [SPACE] continue","58892":"else eliminate the space, decrement end of input line","58893":"loop, branch always","58895":"increment past the last non space character on line","58896":"save the input [EOL] pointer","58898":"clear A","58900":"clear the screen scrolling flag, $00 = scroll","58903":"clear the cursor column","58905":"clear the cursor quote flag, $xx = quote, $00 = no quote","58907":"get the input cursor row","58911":"get the cursor row","58913":"find and set the pointers for the start of logical line","58916":"compare with input cursor row","58920":"get the input cursor column","58922":"save the cursor column","58924":"compare the cursor column with input [EOL] pointer","58926":"if less, cursor is in line, go ??","58928":"else the cursor is beyond the line end, branch always","58930":"copy Y","58931":"save Y","58932":"copy X","58933":"save X","58934":"input from keyboard or screen, $xx = screen,\n$00 = keyboard","58936":"if keyboard go wait for key","58938":"get the cursor column","58940":"get character from the current screen line","58942":"save temporary last character","58944":"mask key bits","58946":"\u003c\u003c temporary last character","58948":"test it","58950":"branch if not [NO KEY]","58956":"get the cursor quote flag, $xx = quote, $00 = no quote","58958":"if in quote mode go ??","58964":"increment the cursor column","58966":"if open quote toggle the cursor quote flag","58969":"compare ?? with input [EOL] pointer","58971":"if not at line end go ??","58973":"clear A","58975":"clear input from keyboard or screen, $xx = screen,\n$00 = keyboard","58977":"set character [CR]","58979":"get the input device number","58981":"compare the input device with the screen","58983":"if screen go ??","58985":"get the output device number","58987":"compare the output device with the screen","58989":"if screen go ??","58991":"output the character","58994":"set character [CR]","58996":"save character","58998":"pull X","58999":"restore X","59000":"pull Y","59001":"restore Y","59002":"restore character","59010":"flag ok","59012":"comapre byte with \"","59014":"exit if not \"","59016":"get cursor quote flag, $xx = quote, $00 = no quote","59018":"toggle it","59020":"save cursor quote flag","59022":"restore the \"","59025":"change to uppercase/graphic","59027":"get the reverse flag","59029":"branch if not reverse\nelse ..\ninsert reversed character","59031":"reverse character","59033":"get the insert count","59035":"branch if none","59037":"else decrement the insert count","59039":"get the current colour code","59042":"print character A and colour X","59045":"advance the cursor\nrestore the registers, set the quote flag and exit","59048":"pull Y","59049":"restore Y","59050":"get the insert count","59052":"skip quote flag clear if inserts to do","59054":"clear cursor quote flag, $xx = quote, $00 = no quote","59056":"pull X","59057":"restore X","59058":"restore A","59060":"enable the interrupts","59062":"test for line increment","59065":"increment the cursor column","59067":"get current screen line length","59069":"compare ?? with the cursor column","59071":"exit if line length \u003e= cursor column","59073":"compare with max length","59075":"if at max clear column, back cursor up and do newline","59077":"get the autoscroll flag","59080":"branch if autoscroll on","59082":"else open space on screen","59085":"get the cursor row","59087":"compare with max + 1","59089":"if less than max + 1 go add this row to the current\nlogical line","59091":"else scroll the screen","59094":"decrement the cursor row","59096":"get the cursor row\nadd this row to the current logical line","59098":"shift start of line X pointer high byte","59100":"shift start of line X pointer high byte back,\nmake next screen line start of logical line, increment line length and set pointers\nclear b7, start of logical line","59102":"increment screen row","59103":"get start of line X pointer high byte","59105":"mark as start of logical line","59107":"set start of line X pointer high byte","59109":"restore screen row","59110":"get current screen line length\nadd one line length and set the pointers for the start of the line","59112":"clear carry for add","59113":"add one line length","59115":"save current screen line length","59117":"get start of line X pointer high byte","59119":"exit loop if start of logical line","59121":"else back up one line","59122":"loop if not on first line","59124":"fetch a screen address","59127":"decrement the cursor row","59129":"do newline","59132":"clear A","59134":"clear the cursor column","59137":"get the cursor row","59139":"branch if not top row","59141":"clear cursor column","59143":"dump return address low byte","59144":"dump return address high byte","59145":"restore registers, set quote flag and exit, branch always","59147":"decrement the cursor row","59148":"save the cursor row","59150":"set the screen pointers for cursor row, column","59153":"get current screen line length","59155":"save the cursor column","59158":"save character","59159":"save temporary last character","59161":"copy X","59162":"save X","59163":"copy Y","59164":"save Y","59165":"clear A","59167":"clear input from keyboard or screen, $xx = screen,\n$00 = keyboard","59169":"get cursor column","59171":"restore last character","59173":"branch if unshifted","59175":"do shifted characters and return","59178":"compare with [CR]","59180":"branch if not [CR]","59182":"else output [CR] and return","59185":"compare with [SPACE]","59187":"branch if \u003c [SPACE]","59191":"branch if $20 to $5F\ncharacter is $60 or greater","59199":"if open quote toggle cursor direct/programmed flag","59205":"get the insert count","59207":"if no characters to insert continue","59209":"insert reversed character","59212":"compare the character with [INSERT]/[DELETE]","59214":"if not [INSERT]/[DELETE] go ??","59219":"back onto the previous line if possible","59225":"test for line decrement\nnow close up the line","59228":"decrement index to previous character","59229":"save the cursor column","59231":"calculate the pointer to colour RAM","59234":"increment index to next character","59235":"get character from current screen line","59237":"decrement index to previous character","59238":"save character to current screen line","59240":"increment index to next character","59241":"get colour RAM byte","59243":"decrement index to previous character","59244":"save colour RAM byte","59246":"increment index to next character","59247":"compare with current screen line length","59249":"loop if not there yet","59251":"set [SPACE]","59253":"clear last character on current screen line","59255":"get the current colour code","59258":"save to colour RAM","59260":"branch always","59262":"get cursor quote flag, $xx = quote, $00 = no quote","59264":"branch if not quote mode","59266":"insert reversed character","59269":"compare with [RVS ON]","59271":"if not [RVS ON] skip setting the reverse flag","59273":"else set the reverse flag","59275":"compare with [CLR HOME]","59277":"if not [CLR HOME] continue","59279":"home the cursor","59282":"compare with [CURSOR RIGHT]","59284":"if not [CURSOR RIGHT] go ??","59286":"increment the cursor column","59287":"test for line increment","59290":"save the cursor column","59292":"decrement the cursor column","59293":"compare cursor column with current screen line length","59295":"exit if less\nelse the cursor column is \u003e= the current screen line\nlength so back onto the current line and do a newline","59297":"decrement the cursor row","59299":"do newline","59302":"clear cursor column","59304":"save the cursor column","59306":"restore the registers, set the quote flag and exit","59309":"compare with [CURSOR DOWN]","59311":"if not [CURSOR DOWN] go ??","59313":"clear carry for add","59314":"copy the cursor column","59315":"add one line","59317":"copy back to Y","59318":"increment the cursor row","59320":"compare cursor column with current screen line length","59322":"if less go save cursor column and exit","59324":"if equal go save cursor column and exit\nelse the cursor has moved beyond the end of this line\nso back it up until it's on the start of the logical line","59326":"decrement the cursor row","59328":"subtract one line","59330":"if on previous line exit the loop","59332":"else save the cursor column","59334":"loop if not at the start of the line","59336":"do newline","59339":"restore the registers, set the quote flag and exit","59342":"set the colour code","59345":"go check for special character codes","59348":"mask 0xxx xxxx, clear b7","59350":"was it $FF before the mask","59352":"branch if not","59354":"else make it $5E","59356":"compare the character with [SPACE]","59358":"if \u003c [SPACE] go ??","59360":"insert uppercase/graphic character and return\ncharacter was $80 to $9F and is now $00 to $1F","59363":"compare with [CR]","59365":"if not [CR] continue","59367":"else output [CR] and return\nwas not [CR]","59370":"get the cursor quote flag, $xx = quote, $00 = no quote","59372":"branch if quote mode","59374":"compare with [INSERT DELETE]","59376":"if not [INSERT DELETE] go ??","59378":"get current screen line length","59380":"get character from current screen line","59382":"compare the character with [SPACE]","59384":"if not [SPACE] continue","59386":"compare the current column with the cursor column","59388":"if not cursor column go open up space on line","59390":"compare current column with max line length","59392":"if at line end just exit","59394":"else open up a space on the screen\nnow open up space on the line to insert a character","59397":"get current screen line length","59399":"calculate the pointer to colour RAM","59402":"decrement the index to previous character","59403":"get the character from the current screen line","59405":"increment the index to next character","59406":"save the character to the current screen line","59408":"decrement the index to previous character","59409":"get the current screen line colour RAM byte","59411":"increment the index to next character","59412":"save the current screen line colour RAM byte","59414":"decrement the index to the previous character","59415":"compare the index with the cursor column","59417":"loop if not there yet","59419":"set [SPACE]","59421":"clear character at cursor position on current screen line","59423":"get current colour code","59426":"save to cursor position on current screen line colour RAM","59428":"increment insert count","59430":"restore the registers, set the quote flag and exit","59433":"get the insert count","59435":"branch if no insert space","59437":"change to uppercase/graphic","59439":"insert reversed character","59442":"compare with [CURSOR UP]","59444":"branch if not [CURSOR UP]","59446":"get the cursor row","59448":"if on the top line go restore the registers, set the\nquote flag and exit","59450":"decrement the cursor row","59452":"get the cursor column","59454":"set carry for subtract","59455":"subtract one line length","59457":"branch if stepped back to previous line","59459":"else save the cursor column ..","59461":".. and exit, branch always","59463":"set the screen pointers for cursor row, column ..","59466":".. and exit, branch always","59468":"compare with [RVS OFF]","59470":"if not [RVS OFF] continue","59472":"else clear A","59474":"clear the reverse flag","59476":"compare with [CURSOR LEFT]","59478":"if not [CURSOR LEFT] go ??","59480":"copy the cursor column","59481":"if at start of line go back onto the previous line","59483":"test for line decrement","59486":"decrement the cursor column","59487":"save the cursor column","59489":"restore the registers, set the quote flag and exit","59492":"back onto the previous line if possible","59495":"restore the registers, set the quote flag and exit","59498":"compare with [CLR]","59500":"if not [CLR] continue","59502":"clear the screen","59505":"restore the registers, set the quote flag and exit","59508":"restore b7, colour can only be black, cyan, magenta\nor yellow","59510":"set the colour code","59513":"go check for special character codes except fro switch\nto lower case","59516":"shift \u003e\u003e input cursor row","59518":"get the cursor row","59520":"increment the row","59521":"compare it with last row + 1","59523":"if not last row + 1 skip the screen scroll","59525":"else scroll the screen","59528":"get start of line X pointer high byte","59530":"loop if not start of logical line","59532":"save the cursor row","59534":"set the screen pointers for cursor row, column and return","59537":"clear X","59539":"clear the insert count","59541":"clear the reverse flag","59543":"clear the cursor quote flag, $xx = quote, $00 = no quote","59545":"save the cursor column","59547":"do newline","59550":"restore the registers, set the quote flag and exit","59553":"set the count","59555":"set the column","59557":"compare the column with the cursor column","59559":"if at the start of the line go decrement the cursor row\nand exit","59561":"else clear carry for add","59562":"increment to next line","59564":"decrement loop count","59565":"loop if more to test","59568":"else decrement the cursor row","59571":"set the count","59573":"set the column","59575":"compare the column with the cursor column","59577":"if at end of line test and possibly increment cursor row","59579":"else clear carry for add","59580":"increment to the next line","59582":"decrement the loop count","59583":"loop if more to test","59586":"get the cursor row","59588":"compare it with the end of the screen","59590":"if at the end of screen just exit","59592":"else increment the cursor row","59597":"compare the character with a table code","59600":"if a match go save the colour and exit","59602":"else decrement the index","59603":"loop if more to do","59606":"save the current colour code","59626":"copy the tape buffer start pointer","59628":"save it","59629":"copy the tape buffer start pointer","59631":"save it","59632":"copy the tape buffer end pointer","59634":"save it","59635":"copy the tape buffer end pointer","59637":"save it","59638":"set to -1 for pre increment loop","59640":"decrement the cursor row","59642":"decrement the input cursor row","59644":"decrement the screen row marker","59647":"increment the line number","59648":"fetch a screen address, set the start of line X","59651":"compare with last line","59653":"branch if \u003e= $16","59655":"get the start of the next line pointer low byte","59658":"save the next line pointer low byte","59660":"get the start of the next line pointer high byte","59662":"shift the screen line up","59665":"loop, branch always","59667":"clear screen line X\nnow shift up the start of logical line bits","59670":"clear index","59672":"get the start of line X pointer high byte","59674":"clear the line X start of logical line bit","59676":"get the start of the next line pointer high byte","59678":"if next line is not a start of line skip the start set","59680":"set line X start of logical line bit","59682":"set start of line X pointer high byte","59684":"increment line number","59685":"compare with last line","59687":"loop if not last line","59689":"get start of last line pointer high byte","59691":"mark as start of logical line","59693":"set start of last line pointer high byte","59695":"get start of first line pointer high byte","59697":"if not start of logical line loop back and\nscroll the screen up another line","59699":"increment the cursor row","59701":"increment screen row marker","59704":"set keyboard column c7","59706":"save VIA 1 DRA, keyboard column drive","59709":"read VIA 1 DRB, keyboard row port","59712":"compare with row r2 active, [CTL]","59714":"save status","59715":"set keyboard column c7","59717":"save VIA 1 DRA, keyboard column drive","59720":"restore status","59721":"skip delay if ??\nfirst time round the inner loop X will be $16","59723":"clear delay outer loop count, do this 256 times","59725":"waste cycles","59726":"decrement inner loop count","59727":"loop if not all done","59729":"decrement outer loop count","59730":"loop if not all done","59732":"clear the keyboard buffer index","59734":"get the cursor row\nrestore the tape buffer pointers and exit","59736":"pull tape buffer end pointer","59737":"restore it","59739":"pull tape buffer end pointer","59740":"restore it","59742":"pull tape buffer pointer","59743":"restore it","59745":"pull tape buffer pointer","59746":"restore it","59749":"get the cursor row","59751":"increment the row","59752":"get the start of line X pointer high byte","59754":"loop if not start of logical line","59756":"save the screen row marker","59759":"compare it with the last line","59761":"if = last line go ??","59763":"if \u003c last line go ??\nelse it was \u003e last line","59765":"scroll the screen","59768":"get the screen row marker","59771":"decrement the screen row marker","59772":"decrement the cursor row","59774":"add this row to the current logical line and return","59777":"copy tape buffer pointer","59779":"save it","59780":"copy tape buffer pointer","59782":"save it","59783":"copy tape buffer end pointer","59785":"save it","59786":"copy tape buffer end pointer","59788":"save it","59789":"set to end line + 1 for predecrement loop","59791":"decrement the line number","59792":"fetch a screen address","59795":"compare it with the screen row marker","59798":"if \u003c screen row marker go ??","59800":"if = screen row marker go ??","59802":"else get the start of the previous line low byte from the\nROM table","59805":"save previous line pointer low byte","59807":"get the start of the previous line pointer high byte","59809":"shift the screen line down","59812":"loop, branch always","59814":"clear screen line X","59819":"compare it with the screen row marker","59828":"get start of line X pointer high byte","59839":"get the screen row marker","59842":"add this row to the current logical line","59845":"restore the tape buffer pointers and exit","59848":"mask 0000 00xx, line memory page","59850":"OR with screen memory page","59853":"save next/previous line pointer high byte","59855":"calculate pointers to screen lines colour RAM","59858":"set the column count","59860":"get character from next/previous screen line","59862":"save character to current screen line","59864":"get colour from next/previous screen line colour RAM","59866":"save colour to current screen line colour RAM","59868":"decrement column index/count","59869":"loop if more to do","59872":"calculate the pointer to the current screen line colour\nRAM","59875":"get the next screen line pointer low byte","59877":"save the next screen line colour RAM pointer low byte","59879":"get the next screen line pointer high byte","59881":"mask 0000 00xx, line memory page","59883":"set  1101 01xx, colour memory page","59885":"save the next screen line colour RAM pointer high byte","59888":"get the start of line low byte from the ROM table","59891":"set the current screen line pointer low byte","59893":"get the start of line high byte from the RAM table","59895":"mask 0000 00xx, line memory page","59897":"OR with the screen memory page","59900":"save the current screen line pointer high byte","59903":"set number of columns to clear","59905":"fetch a screen address","59908":"calculate the pointer to colour RAM","59911":"save the current colour to the colour RAM","59914":"set [SPACE]","59916":"clear character in current screen line","59918":"decrement index","59919":"loop if more to do","59922":"unused","59923":"copy the character","59924":"count to $02, usually $14 ??","59926":"save the cursor countdown","59928":"calculate the pointer to colour RAM","59931":"get the character back","59932":"get the cursor column","59934":"save the character from current screen line","59936":"copy the colour to A","59937":"save to colour RAM","59940":"get current screen line pointer low byte","59942":"save pointer to colour RAM low byte","59944":"get current screen line pointer high byte","59946":"mask 0000 00xx, line memory page","59948":"set  1101 01xx, colour memory page","59950":"save pointer to colour RAM high byte","59953":"increment the real time clock","59956":"get the cursor enable, $00 = flash cursor","59958":"if flash not enabled skip the flash","59960":"decrement the cursor timing countdown","59962":"if not counted out skip the flash","59964":"set the flash count","59966":"save the cursor timing countdown","59968":"get the cursor column","59970":"shift b0 cursor blink phase into carry","59972":"get the colour under the cursor","59975":"get the character from current screen line","59977":"branch if cursor phase b0 was 1","59979":"set the cursor blink phase to 1","59981":"save the character under the cursor","59983":"calculate the pointer to colour RAM","59986":"get the colour RAM byte","59988":"save the colour under the cursor","59991":"get the current colour code","59994":"get the character under the cursor","59996":"toggle b7 of character under cursor","59998":"save the character and colour to the screen @ the cursor","60001":"read the 6510 I/O port","60003":"mask 000x 0000, the cassette switch sense","60005":"if the cassette sense is low skip the motor stop\nthe cassette sense was high, the switch was open, so turn\noff the motor and clear the interlock","60007":"clear Y","60009":"clear the tape motor interlock","60011":"read the 6510 I/O port","60013":"mask xxxx xx1x, turn off the motor","60015":"go save the port value, branch always\nthe cassette sense was low so turn the motor on, perhaps","60017":"get the tape motor interlock","60019":"if the cassette interlock \u003c\u003e 0 don't turn on motor","60021":"read the 6510 I/O port","60023":"mask xxxx xx0x, turn on the motor","60025":"save the 6510 I/O port","60027":"scan the keyboard","60030":"read VIA 1 ICR, clear the timer interrupt flag","60033":"pull Y","60034":"restore Y","60035":"pull X","60036":"restore X","60037":"restore A","60039":"clear A","60041":"clear the keyboard shift/control/c= flag","60044":"set no key","60046":"save which key","60048":"clear VIA 1 DRA, keyboard column drive","60051":"read VIA 1 DRB, keyboard row port","60054":"compare with all bits set","60056":"if no key pressed clear current key and exit (does\nfurther BEQ to $EBBA)","60058":"clear the key count","60059":"get the decode table low byte","60061":"save the keyboard pointer low byte","60063":"get the decode table high byte","60065":"save the keyboard pointer high byte","60067":"set column 0 low","60069":"save VIA 1 DRA, keyboard column drive","60072":"set the row count","60074":"save the column","60075":"read VIA 1 DRB, keyboard row port","60078":"compare it with itself","60081":"loop if changing","60083":"shift row to Cb","60084":"if no key closed on this row go do next row","60086":"save row","60087":"get character from decode table","60089":"compare with $05, there is no $05 key but the control\nkeys are all less than $05","60091":"if not shift/control/c=/stop go save key count\nelse was shift/control/c=/stop key","60093":"compare with $03, stop","60095":"if stop go save key count and continue\ncharacter is $01 - shift, $02 - c= or $04 - control","60097":"OR it with the keyboard shift/control/c= flag","60100":"save the keyboard shift/control/c= flag","60103":"skip save key, branch always","60105":"save key count","60107":"restore row","60108":"increment key count","60109":"compare with max+1","60111":"exit loop if \u003e= max+1\nelse still in matrix","60113":"decrement row count","60114":"loop if more rows to do","60116":"set carry for keyboard column shift","60117":"restore the column","60118":"shift the keyboard column","60119":"save VIA 1 DRA, keyboard column drive","60122":"loop for next column, branch always","60124":"dump the saved column","60125":"evaluate the SHIFT/CTRL/C= keys, $EBDC\nkey decoding continues here after the SHIFT/CTRL/C= keys are evaluated","60128":"get saved key count","60130":"get character from decode table","60132":"copy character to X","60133":"compare key count with last key count","60135":"if this key = current key, key held, go test repeat","60137":"set the repeat delay count","60139":"save the repeat delay count","60142":"go save key to buffer and exit, branch always","60144":"clear b7","60146":"test key repeat","60149":"if repeat all go ??","60151":"if repeat none go ??","60153":"compare with end marker","60155":"if $00/end marker go save key to buffer and exit","60157":"compare with [INSERT]/[DELETE]","60159":"if [INSERT]/[DELETE] go test for repeat","60161":"compare with [SPACE]","60163":"if [SPACE] go test for repeat","60165":"compare with [CURSOR RIGHT]","60167":"if [CURSOR RIGHT] go test for repeat","60169":"compare with [CURSOR DOWN]","60171":"if not [CURSOR DOWN] just exit\nwas one of the cursor movement keys, insert/delete\nkey or the space bar so always do repeat tests","60173":"get the repeat delay counter","60176":"if delay expired go ??","60178":"else decrement repeat delay counter","60181":"if delay not expired go ??\nrepeat delay counter has expired","60183":"decrement the repeat speed counter","60186":"branch if repeat speed count not expired","60188":"set for 4/60ths of a second","60190":"save the repeat speed counter","60193":"get the keyboard buffer index","60195":"decrement it","60196":"if the buffer isn't empty just exit\nelse repeat the key immediately\npossibly save the key to the keyboard buffer. if there was no key pressed or the key\nwas not found during the scan (possibly due to key bounce) then X will be $FF here","60198":"get the key count","60200":"save it as the current key count","60202":"get the keyboard shift/control/c= flag","60205":"save it as last keyboard shift pattern","60208":"compare the character with the table end marker or no key","60210":"if it was the table end marker or no key just exit","60212":"copy the character to A","60213":"get the keyboard buffer index","60215":"compare it with the keyboard buffer size","60218":"if the buffer is full just exit","60220":"save the character to the keyboard buffer","60223":"increment the index","60224":"save the keyboard buffer index","60226":"enable column 7 for the stop key","60228":"save VIA 1 DRA, keyboard column drive","60232":"get the keyboard shift/control/c= flag","60235":"compare with [SHIFT][C=]","60237":"if not [SHIFT][C=] go ??","60239":"compare with last","60242":"exit if still the same","60244":"get the shift mode switch $00 = enabled, $80 = locked","60247":"if locked continue keyboard decode\ntoggle text mode","60249":"get the start of character memory address","60252":"toggle address b1","60254":"save the start of character memory address","60257":"continue the keyboard decode\nselect keyboard table","60260":"\u003c\u003c 1","60261":"compare with [CTRL]","60263":"if [CTRL] is not pressed skip the index change","60265":"else [CTRL] was pressed so make the index = $06","60267":"copy the index to X","60268":"get the decode table pointer low byte","60271":"save the decode table pointer low byte","60273":"get the decode table pointer high byte","60276":"save the decode table pointer high byte","60278":"continue the keyboard decode","60484":"compare with [SWITCH TO LOWER CASE]","60486":"if not [SWITCH TO LOWER CASE] skip the switch","60488":"get the start of character memory address","60491":"mask xxxx xx1x, set lower case characters","60493":"go save the new value, branch always\ncheck for special character codes except fro switch to lower case","60495":"compare with [SWITCH TO UPPER CASE]","60497":"if not [SWITCH TO UPPER CASE] go do the [SHIFT]+[C=] key\ncheck","60499":"get the start of character memory address","60502":"mask xxxx xx0x, set upper case characters","60504":"save the start of character memory address","60507":"restore the registers, set the quote flag and exit\ndo the [SHIFT]+[C=] key check","60510":"compare with disable [SHIFT][C=]","60512":"if not disable [SHIFT][C=] skip the set","60514":"set to lock shift mode switch","60516":"OR it with the shift mode switch","60519":"go save the value, branch always","60521":"compare with enable [SHIFT][C=]","60523":"exit if not enable [SHIFT][C=]","60525":"set to unlock shift mode switch","60527":"AND it with the shift mode switch","60530":"save the shift mode switch $00 = enabled, $80 = locked","60533":"restore the registers, set the quote flag and exit","60681":"OR with the TALK command","60684":"OR with the LISTEN command","60686":"check RS232 bus idle","60689":"save device address","60690":"test deferred character flag","60692":"if no defered character continue","60694":"else flag EOI","60695":"rotate into EOI flag byte","60697":"Tx byte on serial bus","60700":"clear deferred character flag","60702":"clear EOI flag","60704":"restore the device address","60705":"save as serial defered character","60707":"disable the interrupts","60708":"set the serial data out high","60711":"compare read byte with $3F","60713":"branch if not $3F, this branch will always be taken as\nafter VIA 2's PCR is read it is ANDed with $DF, so the\nresult can never be $3F ??","60715":"set the serial clock out high","60718":"read VIA 2 DRA, serial port and video address","60721":"mask xxxx 1xxx, set serial ATN low","60723":"save VIA 2 DRA, serial port and video address\nif the code drops through to here the serial clock is low and the serial data has been\nreleased so the following code will have no effect apart from delaying the first byte\nby 1ms\nset the serial clk/data, wait and Tx byte on the serial bus","60726":"disable the interrupts","60727":"set the serial clock out low","60730":"set the serial data out high","60733":"1ms delay","60736":"disable the interrupts","60737":"set the serial data out high","60740":"get the serial data status in Cb","60743":"if the serial data is high go do 'device not present'","60745":"set the serial clock out high","60748":"test the EOI flag","60750":"if not EOI go ??\nI think this is the EOI sequence so the serial clock has been released and the serial\ndata is being held low by the peripheral. first up wait for the serial data to rise","60752":"get the serial data status in Cb","60755":"loop if the data is low\nnow the data is high, EOI is signalled by waiting for at least 200us without pulling\nthe serial clock line low again. the listener should respond by pulling the serial\ndata line low","60757":"get the serial data status in Cb","60760":"loop if the data is high\nthe serial data has gone low ending the EOI sequence, now just wait for the serial\ndata line to go high again or, if this isn't an EOI sequence, just wait for the serial\ndata to go high the first time","60762":"get the serial data status in Cb","60765":"loop if the data is low\nserial data is high now pull the clock low, preferably within 60us","60767":"set the serial clock out low\nnow the C64 has to send the eight bits, LSB first. first it sets the serial data line\nto reflect the bit in the byte, then it sets the serial clock to high. The serial\nclock is left high for 26 cycles, 23us on a PAL Vic, before it is again pulled low\nand the serial data is allowed high again","60770":"eight bits to do","60772":"set serial bus bit count","60774":"read VIA 2 DRA, serial port and video address","60777":"compare it with itself","60780":"if changed go try again","60782":"shift the serial data into Cb","60783":"if the serial data is low go do serial bus timeout","60785":"rotate the transmit byte","60787":"if the bit = 1 go set the serial data out high","60789":"else set the serial data out low","60792":"continue, branch always","60794":"set the serial data out high","60797":"set the serial clock out high","60800":"waste ..","60801":".. a ..","60802":".. cycle ..","60803":".. or two","60804":"read VIA 2 DRA, serial port and video address","60807":"mask xx0x xxxx, set the serial data out high","60809":"mask xxx1 xxxx, set the serial clock out low","60811":"save VIA 2 DRA, serial port and video address","60814":"decrement the serial bus bit count","60816":"loop if not all done\nnow all eight bits have been sent it's up to the peripheral to signal the byte was\nreceived by pulling the serial data low. this should be done within one milisecond","60818":"wait for up to about 1ms","60820":"save VIA 1 timer B high byte","60823":"load timer B, timer B single shot, start timer B","60825":"save VIA 1 CRB","60828":"read VIA 1 ICR","60831":"read VIA 1 ICR","60834":"mask 0000 00x0, timer A interrupt","60836":"if timer A interrupt go do serial bus timeout","60838":"get the serial data status in Cb","60841":"if the serial data is high go wait some more","60843":"enable the interrupts","60845":"error $80, device not present","60848":"error $03, read timeout, write timeout","60850":"OR into the serial status byte","60853":"enable the interrupts","60854":"clear for branch","60855":"ATN high, delay, clock high then data high, branch always","60857":"save the defered Tx byte","60859":"set the serial clk/data, wait and Tx the byte","60862":"read VIA 2 DRA, serial port and video address","60865":"mask xxxx 0xxx, set serial ATN high","60867":"save VIA 2 DRA, serial port and video address","60871":"save the defered Tx byte","60873":"set the serial clk/data, wait and Tx the byte","60876":"disable the interrupts","60877":"set the serial data out low","60880":"set serial ATN high","60883":"set the serial clock out high","60886":"get the serial data status in Cb","60889":"loop if the clock is high","60891":"enable the interrupts","60893":"test the deferred character flag","60895":"if there is a defered character go send it","60897":"set carry","60898":"shift into the deferred character flag","60900":"save the byte and exit, branch always","60902":"save the byte","60903":"Tx byte on serial bus","60906":"restore the byte","60907":"save the defered Tx byte","60909":"flag ok","60911":"disable the interrupts","60912":"set the serial clock out low","60915":"read VIA 2 DRA, serial port and video address","60918":"mask xxxx 1xxx, set the serial ATN low","60920":"save VIA 2 DRA, serial port and video address","60923":"set the UNTALK command","60926":"set the UNLISTEN command","60928":"send a control character","60931":"set serial ATN high\n1ms delay, clock high then data high","60934":"save the device number","60935":"short delay","60937":"decrement the count","60938":"loop if not all done","60940":"restore the device number","60941":"set the serial clock out high","60944":"set the serial data out high and return","60947":"disable the interrupts","60948":"set 0 bits to do, will flag EOI on timeour","60950":"save the serial bus bit count","60952":"set the serial clock out high","60955":"get the serial data status in Cb","60958":"loop if the serial clock is low","60960":"set the timeout count high byte","60962":"save VIA 1 timer B high byte","60965":"load timer B, timer B single shot, start timer B","60967":"save VIA 1 CRB","60970":"set the serial data out high","60973":"read VIA 1 ICR","60976":"read VIA 1 ICR","60979":"mask 0000 00x0, timer A interrupt","60981":"if timer A interrupt go ??","60983":"get the serial data status in Cb","60986":"loop if the serial clock is low","60988":"else go set 8 bits to do, branch always\ntimer A timed out","60990":"get the serial bus bit count","60992":"if not already EOI then go flag EOI","60994":"else error $02, read timeour","60996":"set the serial status and exit","60999":"set the serial data out low","61002":"set the serial clock out high","61005":"set EOI","61007":"OR into the serial status byte","61010":"increment the serial bus bit count, do error on the next\ntimeout","61012":"go try again, branch always","61014":"set 8 bits to do","61016":"save the serial bus bit count","61018":"read VIA 2 DRA, serial port and video address","61021":"compare it with itself","61024":"if changing go try again","61026":"shift the serial data into the carry","61027":"loop while the serial clock is low","61029":"shift the data bit into the receive byte","61031":"read VIA 2 DRA, serial port and video address","61034":"compare it with itself","61037":"if changing go try again","61039":"shift the serial data into the carry","61040":"loop while the serial clock is high","61042":"decrement the serial bus bit count","61044":"loop if not all done","61046":"set the serial data out low","61049":"test the serial status byte","61051":"if EOI not set skip the bus end sequence","61053":"1ms delay, clock high then data high","61056":"get the receive byte","61058":"enable the interrupts","61059":"flag ok","61061":"read VIA 2 DRA, serial port and video address","61064":"mask xxx0 xxxx, set serial clock out high","61066":"save VIA 2 DRA, serial port and video address","61070":"read VIA 2 DRA, serial port and video address","61073":"mask xxx1 xxxx, set serial clock out low","61075":"save VIA 2 DRA, serial port and video address","61079":"read VIA 2 DRA, serial port and video address","61082":"mask xx0x xxxx, set serial data out high","61084":"save VIA 2 DRA, serial port and video address","61088":"read VIA 2 DRA, serial port and video address","61091":"mask xx1x xxxx, set serial data out low","61093":"save VIA 2 DRA, serial port and video address","61097":"read VIA 2 DRA, serial port and video address","61100":"compare it with itself","61103":"if changing got try again","61105":"shift the serial data into Cb","61107":"save X","61108":"set the loop count","61110":"decrement the loop count","61111":"loop if more to do","61113":"restore X","61115":"get RS232 bit count","61117":"if zero go setup next RS232 Tx byte and return","61119":"if -ve go do stop bit(s)\nelse bit count is non zero and +ve","61121":"shift RS232 output byte buffer","61123":"set $00 for bit = 0","61125":"branch if bit was 0","61127":"set $FF for bit = 1","61128":"copy bit to A","61129":"EOR with RS232 parity byte","61131":"save RS232 parity byte","61133":"decrement RS232 bit count","61135":"if RS232 bit count now zero go do parity bit\nsave bit and exit","61137":"copy bit to A","61138":"mask 0000 0x00, RS232 Tx DATA bit","61140":"save the next RS232 data bit to send","61143":"mask 00x0 0000, parity enable bit","61145":"test the pseudo 6551 command register","61148":"if parity disabled go ??","61150":"if fixed mark or space parity go ??","61152":"if even parity go ??\nelse odd parity","61154":"get RS232 parity byte","61156":"if parity not zero leave parity bit = 0","61158":"make parity bit = 1","61159":"decrement RS232 bit count, 1 stop bit","61161":"get pseudo 6551 control register","61164":"if 1 stop bit save parity bit and exit\nelse two stop bits ..","61166":"decrement RS232 bit count, 2 stop bits","61168":"save bit and exit, branch always\nparity is disabled so the parity bit becomes the first,\nand possibly only, stop bit. to do this increment the bit\ncount which effectively decrements the stop bit count.","61170":"increment RS232 bit count, = -1 stop bit","61172":"set stop bit = 1 and exit\ndo even parity","61174":"get RS232 parity byte","61176":"if parity zero leave parity bit = 0","61178":"else make parity bit = 1, branch always\nfixed mark or space parity","61180":"if fixed space parity leave parity bit = 0","61182":"else fixed mark parity make parity bit = 1, branch always\ndecrement stop bit count, set stop bit = 1 and exit. $FF is one stop bit, $FE is two\nstop bits","61184":"decrement RS232 bit count","61186":"set stop bit = 1","61188":"save stop bit and exit, branch always","61190":"read the 6551 pseudo command register","61193":"handshake bit inot Cb","61194":"if 3 line interface go ??","61196":"test VIA 2 DRB, RS232 port","61199":"if DSR = 0 set DSR signal not present and exit","61201":"if CTS = 0 set CTS signal not present and exit\nwas 3 line interface","61203":"clear A","61205":"clear the RS232 parity byte","61207":"clear the RS232 next bit to send","61209":"get the number of bits to be sent/received","61212":"set the RS232 bit count","61214":"get the index to the Tx buffer start","61217":"compare it with the index to the Tx buffer end","61220":"if all done go disable T?? interrupt and return","61222":"else get a byte from the buffer","61224":"save it to the RS232 output byte buffer","61226":"increment the index to the Tx buffer start","61230":"set DSR signal not present","61233":"set CTS signal not present","61235":"OR it with the RS232 status register","61238":"save the RS232 status register","61241":"disable timer A interrupt","61243":"save VIA 2 ICR","61246":"EOR with the RS-232 interrupt enable byte","61249":"set the interrupts enable bit","61251":"save the RS-232 interrupt enable byte","61254":"save VIA 2 ICR","61258":"set bit count to 9, 8 data + 1 stop bit","61260":"mask for 8/7 data bits","61262":"test pseudo 6551 control register","61265":"branch if 8 bits","61267":"else decrement count for 7 data bits","61268":"branch if 7 bits","61270":"else decrement count ..","61271":".. for 5 data bits","61273":"get start bit check flag","61275":"if no start bit received go ??","61277":"decrement receiver bit count in","61279":"if the byte is complete go add it to the buffer","61283":"get the RS232 received data bit","61285":"EOR with the receiver parity bit","61287":"save the receiver parity bit","61289":"shift the RS232 received data bit","61294":"decrement receiver bit count in","61296":"get the RS232 received data bit","61300":"get pseudo 6551 control register","61303":"shift the stop bit flag to Cb","61304":"+ 1","61306":"add receiver bit count in","61308":"exit, branch always","61310":"enable FLAG interrupt","61312":"save VIA 2 ICR","61315":"OR with the RS-232 interrupt enable byte","61318":"save the RS-232 interrupt enable byte","61321":"set start bit check flag, set no start bit received","61323":"disable timer B interrupt","61325":"set VIA 2 ICR from A and return","61328":"get the RS232 received data bit","61330":"if ?? go setup to receive an RS232 bit and return","61332":"flag the RS232 start bit and set the parity","61335":"get index to Rx buffer end","61338":"increment index","61339":"compare with index to Rx buffer start","61342":"if buffer full go do Rx overrun error","61344":"save index to Rx buffer end","61347":"decrement index","61348":"get assembled byte","61350":"get bit count","61353":"compare with byte + stop","61355":"branch if all nine bits received","61357":"else shift byte","61358":"increment bit count","61359":"loop, branch always","61361":"save received byte to Rx buffer","61363":"mask 00x0 0000, parity enable bit","61365":"test the pseudo 6551 command register","61368":"branch if parity disabled","61370":"branch if mark or space parity","61372":"get the RS232 received data bit","61374":"EOR with the receiver parity bit","61378":"if ?? just exit","61381":"if ?? just exit","61383":"set Rx parity error","61386":"set Rx overrun error","61389":"set Rx break error","61392":"set Rx frame error","61394":"OR it with the RS232 status byte","61397":"save the RS232 status byte","61400":"setup to receive an RS232 bit and return","61405":"if ?? do frame error","61407":"else do break error, branch always","61409":"save the output device number","61411":"read the pseudo 6551 command register","61414":"shift handshake bit to carry","61415":"if 3 line interface go ??","61417":"mask 0000 00x0, RTS out","61419":"test VIA 2 DRB, RS232 port","61422":"if DSR = 0 set DSR not present and exit","61424":"if RTS = 1 just exit","61426":"get the RS-232 interrupt enable byte","61429":"mask 0000 00x0, timer B interrupt","61431":"loop while the timer B interrupt is enebled","61433":"test VIA 2 DRB, RS232 port","61436":"loop while CTS high","61438":"read VIA 2 DRB, RS232 port","61441":"mask xxxx xx1x, set RTS high","61443":"save VIA 2 DRB, RS232 port","61446":"test VIA 2 DRB, RS232 port","61449":"exit if CTS high","61451":"loop while DSR high\nset no DSR and exit","61453":"set DSR signal not present","61455":"save the RS232 status register","61458":"flag ok","61460":"setup for RS232 transmit\nsend byte to the RS232 buffer, no setup","61463":"get index to Tx buffer end","61466":"+ 1","61467":"compare with index to Tx buffer start","61470":"loop while buffer full","61472":"set index to Tx buffer end","61475":"index to available buffer byte","61476":"read the RS232 character buffer","61478":"save the byte to the buffer","61480":"get the RS-232 interrupt enable byte","61483":"shift the enable bit to Cb","61484":"if interrupts are enabled just exit","61486":"start timer A","61488":"save VIA 2 CRA","61491":"get the baud rate bit time low byte","61494":"save VIA 2 timer A low byte","61497":"get the baud rate bit time high byte","61500":"save VIA 2 timer A high byte","61503":"enable timer A interrupt","61505":"set VIA 2 ICR from A","61508":"setup next RS232 Tx byte","61511":"load timer A, start timer A","61513":"save VIA 2 CRA","61517":"save the input device number","61519":"get pseudo 6551 command register","61522":"shift the handshake bit to Cb","61523":"if 3 line interface go ??","61525":"mask the duplex bit, pseudo 6551 command is \u003e\u003e 1","61527":"if full duplex go ??","61529":"mask 0000 00x0, RTS out","61531":"test VIA 2 DRB, RS232 port","61534":"if DSR = 0 set no DSR and exit","61536":"if RTS = 0 just exit","61538":"get the RS-232 interrupt enable byte","61541":"shift the timer A interrupt enable bit to Cb","61542":"loop while the timer A interrupt is enabled","61544":"read VIA 2 DRB, RS232 port","61547":"mask xxxx xx0x, clear RTS out","61549":"save VIA 2 DRB, RS232 port","61552":"read VIA 2 DRB, RS232 port","61555":"mask xxxx x1xx, DTR in","61557":"loop while DTR low","61559":"enable the FLAG interrupt","61561":"flag ok","61562":"set VIA 2 ICR from A and return","61565":"get the RS-232 interrupt enable byte","61568":"mask 000x 00x0","61570":"if FLAG or timer B bits set go enable the FLAG inetrrupt","61572":"flag ok","61574":"get the RS232 status register","61577":"get index to Rx buffer start","61580":"compare with index to Rx buffer end","61583":"return null if buffer empty","61585":"clear the Rx buffer empty bit","61587":"save the RS232 status register","61590":"get byte from Rx buffer","61592":"increment index to Rx buffer start","61596":"set the Rx buffer empty bit","61598":"save the RS232 status register","61601":"return null","61604":"save A","61605":"get the RS-232 interrupt enable byte","61608":"if no interrupts enabled just exit","61610":"get the RS-232 interrupt enable byte","61613":"mask 0000 00xx, the error bits","61615":"if there are errors loop","61617":"disable FLAG interrupt","61619":"save VIA 2 ICR","61622":"clear A","61624":"clear the RS-232 interrupt enable byte","61627":"restore A","61739":"test message mode flag","61741":"exit if control messages off\ndisplay kernel I/O message","61743":"get byte from message table","61746":"save status","61747":"clear b7","61749":"output character to channel","61752":"increment index","61753":"restore status","61754":"loop if not end of message","61758":"get the input device number","61760":"if not the keyboard go handle other devices\nthe input device was the keyboard","61762":"get the keyboard buffer index","61764":"if the buffer is empty go flag no byte and return","61766":"disable the interrupts","61767":"get input from the keyboard buffer and return\nthe input device was not the keyboard","61770":"compare the device with the RS232 device","61772":"if not the RS232 device go ??\nthe input device is the RS232 device","61774":"save Y","61776":"get a byte from RS232 buffer","61779":"restore Y","61781":"flag no error","61783":"get the input device number","61785":"if not the keyboard continue\nthe input device was the keyboard","61787":"get the cursor column","61789":"set the input cursor column","61791":"get the cursor row","61793":"set the input cursor row","61795":"input from screen or keyboard\nthe input device was not the keyboard","61798":"compare device number with screen","61800":"if not screen continue\nthe input device was the screen","61802":"input from keyboard or screen, $xx = screen,\n$00 = keyboard","61804":"get current screen line length","61806":"save input [EOL] pointer","61808":"input from screen or keyboard\nthe input device was not the screen","61811":"if input device \u003e screen go do IEC devices\nthe input device was \u003c screen","61813":"compare the device with the RS232 device","61815":"if RS232 device go get a byte from the RS232 device\nonly the tape device left ..","61817":"save X","61819":"get a byte from tape","61822":"if error just exit","61824":"save the byte","61825":"get the next byte from tape","61828":"if error just exit","61830":"if end reached ??","61832":"set EOI","61834":"OR into the serial status byte","61837":"decrement tape buffer index","61839":"restore X","61841":"restore the saved byte","61843":"copy the error byte","61844":"dump the saved byte","61845":"restore error byte","61846":"restore X","61849":"bump tape pointer","61852":"if not end get next byte and exit","61854":"initiate tape read","61857":"exit if error flagged","61859":"clear A","61861":"clear tape buffer index","61863":"loop, branch always","61865":"get next byte from buffer","61867":"flag no error","61869":"get the serial status byte","61871":"if no errors flagged go input byte and return","61873":"else return [EOL]","61875":"flag no error","61877":"input byte from serial bus and return\ninput device was RS232 device","61880":"get byte from RS232 device","61883":"branch if error, this doesn't get taken as the last\ninstruction in the get byte from RS232 device routine\nis CLC ??","61885":"compare with null","61887":"exit if not null","61889":"get the RS232 status register","61892":"mask 0xx0 0000, DSR detected and ??","61894":"if ?? return null","61896":"else loop, branch always","61898":"save the character to output","61899":"get the output device number","61901":"compare the output device with the screen","61903":"if not the screen go ??","61905":"else restore the output character","61906":"go output the character to the screen","61909":"if \u003c screen go ??","61911":"else restore the output character","61912":"go output the character to the serial bus","61915":"shift b0 of the device into Cb","61916":"restore the output character","61917":"save the character to the character buffer","61919":"copy X","61920":"save X","61921":"copy Y","61922":"save Y","61923":"if Cb is clear it must be the RS232 device\noutput the character to the cassette","61925":"bump the tape pointer","61928":"if not end save next byte and exit","61930":"initiate tape write","61933":"exit if error","61935":"set data block type ??","61937":"clear index","61939":"save type to buffer ??","61941":"increment index","61942":"save tape buffer index","61944":"restore character from character buffer","61946":"save to buffer","61948":"flag no error","61949":"pull Y","61950":"restore Y","61951":"pull X","61952":"restore X","61953":"get the character from the character buffer","61955":"exit if no error","61957":"else clear A","61960":"send byte to the RS232 buffer, no setup","61963":"do no error exit","61966":"find a file","61969":"if the file is open continue","61971":"else do 'file not open' error and return","61974":"set file details from table,X","61977":"get the device number","61979":"if the device was the keyboard save the device #, flag\nok and exit","61981":"compare the device number with the screen","61983":"if the device was the screen save the device #, flag ok\nand exit","61985":"if the device was a serial bus device go ??","61987":"else compare the device with the RS232 device","61989":"if not the RS232 device continue","61991":"else go get input from the RS232 buffer and return","61994":"get the secondary address","62000":"go do 'not input file' error and return","62003":"save the input device number","62005":"flag ok","62007":"copy device number to X","62008":"command serial bus device to TALK","62011":"get the secondary address","62015":"wait for the serial bus end after send","62021":"send secondary address after TALK","62024":"copy device back to A","62025":"test the serial status byte","62027":"if device present save device number and exit","62029":"do 'device not present' error and return","62032":"find a file","62035":"if file found continue","62037":"else do 'file not open' error and return","62040":"set file details from table,X","62043":"get the device number","62045":"if the device is not the keyboard go ??","62047":"go do 'not output file' error and return","62050":"compare the device with the screen","62052":"if the device is the screen go save output the output\ndevice number and exit","62054":"if \u003e screen then go handle a serial bus device","62056":"compare the device with the RS232 device","62058":"if not the RS232 device then it must be the tape device","62060":"else go open RS232 channel for output\nopen a tape channel for output","62063":"get the secondary address","62067":"if ?? do not output file error and return","62069":"save the output device number","62071":"flag ok","62073":"copy the device number","62074":"command devices on the serial bus to LISTEN","62077":"get the secondary address","62079":"if address to send go ??","62081":"else set serial ATN high","62084":"go ??, branch always","62086":"send secondary address after LISTEN","62089":"copy device number back to A","62090":"test the serial status byte","62092":"if the device is present go save the output device number\nand exit","62094":"else do 'device not present error' and return","62097":"find file A","62100":"if file found go close it","62102":"else the file was closed so just flag ok","62104":"set file details from table,X","62107":"copy file index to A","62108":"save file index","62109":"get the device number","62111":"if it is the keyboard go restore the index and close the\nfile","62113":"compare the device number with the screen","62115":"if it is the screen go restore the index and close the\nfile","62117":"if \u003e screen go do serial bus device close","62119":"compare the device with the RS232 device","62121":"if not the RS232 device go ??\nelse close RS232 device","62123":"restore file index","62124":"close file index X","62127":"initialise RS232 output","62130":"read the top of memory","62133":"get the RS232 input buffer pointer high byte","62135":"if no RS232 input buffer go ??","62137":"else reclaim RS232 input buffer memory","62138":"get the RS232 output buffer pointer high byte","62140":"if no RS232 output buffer skip the reclaim","62142":"else reclaim the RS232 output buffer memory","62143":"clear A","62145":"clear the RS232 input buffer pointer high byte","62147":"clear the RS232 output buffer pointer high byte","62149":"go set the top of memory to F0xx\nis not the RS232 device","62152":"get the secondary address","62154":"mask the device #","62156":"if ?? restore index and close file","62158":"get tape buffer start pointer in XY","62161":"character $00","62163":"flag the tape device","62164":"output the character to the cassette or RS232 device","62167":"initiate tape write","62176":"get the secondary address","62180":"if not ?? restore index and close file","62182":"set logical end of the tape","62184":"write tape header","62187":"restore index and close file","62190":"close serial bus device","62193":"restore file index","62194":"copy index to file to close","62195":"decrement the open file count","62197":"compare the index with the open file count","62199":"exit if equal, last entry was closing file\nelse entry was not last in list so copy last table entry\nfile details over the details of the closing one","62201":"get the open file count as index","62203":"get last+1 logical file number from logical file table","62206":"save logical file number over closed file","62209":"get last+1 device number from device number table","62212":"save device number over closed file","62215":"get last+1 secondary address from secondary address table","62218":"save secondary address over closed file","62221":"flag ok","62223":"clear A","62225":"clear the serial status byte","62227":"copy the logical file number to A","62228":"get the open file count","62230":"decrememnt the count to give the index","62231":"if no files just exit","62233":"compare the logical file number with the table logical\nfile number","62236":"if no match go try again","62239":"get logical file from logical file table","62242":"save the logical file","62244":"get device number from device number table","62247":"save the device number","62249":"get secondary address from secondary address table","62252":"save the secondary address","62255":"clear A","62257":"clear the open file count","62259":"set the screen device","62261":"compare the screen with the output device number","62263":"if \u003c= screen skip the serial bus unlisten","62265":"else command the serial bus to UNLISTEN","62268":"compare the screen with the input device number","62270":"if \u003c= screen skip the serial bus untalk","62272":"else command the serial bus to UNTALK","62275":"save the screen as the output device number","62277":"set the keyboard as the input device","62279":"save the input device number","62282":"get the logical file","62284":"if there is a file continue","62286":"else do 'not input file error' and return","62289":"find a file","62292":"if file not found continue","62294":"else do 'file already open' error and return","62297":"get the open file count","62299":"compare it with the maximum + 1","62301":"if less than maximum + 1 go open the file","62303":"else do 'too many files error' and return","62306":"increment the open file count","62308":"get the logical file","62310":"save it to the logical file table","62313":"get the secondary address","62315":"OR with the OPEN CHANNEL command","62317":"save the secondary address","62319":"save it to the secondary address table","62322":"get the device number","62324":"save it to the device number table","62327":"if it is the keyboard go do the ok exit","62329":"compare the device number with the screen","62331":"if it is the screen go do the ok exit","62333":"if tape or RS232 device go ??\nelse it is a serial bus device","62335":"send the secondary address and filename","62338":"go do ok exit, branch always","62344":"go open RS232 device and return","62347":"get tape buffer start pointer in XY","62350":"if \u003e= $0200 go ??","62352":"else do 'illegal device number' and return","62355":"get the secondary address","62361":"wait for PLAY","62364":"exit if STOP was pressed","62366":"print \"Searching...\"","62369":"get file name length","62371":"if null file name just go find header","62373":"find specific tape header","62376":"branch if no error","62378":"exit if ??","62380":"do file not found error and return","62383":"find tape header, exit with header in buffer","62386":"exit if end of tape found","62392":"wait for PLAY/RECORD","62395":"exit if STOP was pressed","62397":"set data file header","62399":"write tape header","62404":"get the secondary address","62410":"clear index","62414":"save to tape buffer","62416":"clear A","62417":"save tape buffer index","62419":"flag ok","62421":"get the secondary address","62423":"ok exit if -ve","62425":"get file name length","62427":"ok exit if null","62429":"clear A","62431":"clear the serial status byte","62433":"get the device number","62435":"command devices on the serial bus to LISTEN","62438":"get the secondary address","62440":"OR with the OPEN command","62442":"send secondary address after LISTEN","62445":"get the serial status byte","62447":"if device present skip the 'device not present' error","62449":"else dump calling address low byte","62450":"dump calling address high byte","62451":"do 'device not present' error and return","62454":"get file name length","62456":"branch if null name","62458":"clear index","62460":"get file name byte","62462":"output byte to serial bus","62465":"increment index","62466":"compare with file name length","62468":"loop if not all done","62470":"command serial bus to UNLISTEN and return","62473":"initialise RS232 output","62476":"save the RS232 status register","62479":"compare with file name length","62481":"exit loop if done","62483":"get file name byte","62485":"copy to 6551 register set","62488":"increment index","62489":"compare with $04","62491":"loop if not to 4 yet","62493":"compute bit count","62496":"save bit count","62499":"get pseudo 6551 control register","62502":"mask 0000 xxxx, baud rate","62504":"if zero skip the baud rate setup","62506":"* 2 bytes per entry","62507":"copy to the index","62508":"get the PAL/NTSC flag","62511":"if PAL go set PAL timing","62513":"get the NTSC baud rate value high byte","62516":"get the NTSC baud rate value low byte","62519":"go save the baud rate values","62522":"get the PAL baud rate value high byte","62525":"get the PAL baud rate value low byte","62528":"save the nonstandard bit timing high byte","62531":"save the nonstandard bit timing low byte","62534":"get the nonstandard bit timing low byte","62537":"* 2","62541":"read the pseudo 6551 command register","62544":"shift the X line/3 line bit into Cb","62545":"if 3 line skip the DRS test","62547":"read VIA 2 DRB, RS232 port","62550":"shift DSR in into Cb","62551":"if DSR present skip the error set","62553":"set no DSR","62556":"get index to Rx buffer end","62559":"set index to Rx buffer start, clear Rx buffer","62562":"get index to Tx buffer end","62565":"set index to Tx buffer start, clear Tx buffer","62568":"read the top of memory","62571":"get the RS232 input buffer pointer high byte","62573":"if buffer already set skip the save","62575":"decrement top of memory high byte, 256 byte buffer","62576":"save the RS232 input buffer pointer high byte","62578":"save the RS232 input buffer pointer low byte","62580":"get the RS232 output buffer pointer high byte","62582":"if ?? go set the top of memory to F0xx","62585":"save the RS232 output buffer pointer high byte","62587":"save the RS232 output buffer pointer low byte","62589":"read the top of memory","62590":"set $F000","62592":"set the top of memory and return","62595":"disable all interrupts","62597":"save VIA 2 ICR","62600":"set RS232 DTR output, RS232 RTS output","62602":"save VIA 2 DDRB, RS232 port","62605":"save VIA 2 DRB, RS232 port","62608":"mask xxxx x1xx, set RS232 Tx DATA high","62610":"OR it with VIA 2 DRA, serial port and video address","62613":"save VIA 2 DRA, serial port and video address","62616":"clear Y","62618":"clear the RS-232 interrupt enable byte","62622":"set kernal setup pointer low byte","62624":"set kernal setup pointer high byte","62626":"do LOAD vector, usually points to $F4A5","62629":"save load/verify flag","62631":"clear A","62633":"clear the serial status byte","62635":"get the device number","62637":"if not the keyboard continue\ndo 'illegal device number'","62639":"else do 'illegal device number' and return","62648":"get file name length","62650":"if not null name go ??","62652":"else do 'missing file name' error and return","62655":"get the secondary address","62657":"print \"Searching...\"","62662":"save the secondary address","62664":"send secondary address and filename","62667":"get the device number","62669":"command serial bus device to TALK","62672":"get the secondary address","62674":"send secondary address after TALK","62677":"input byte from serial bus","62680":"save program start address low byte","62682":"get the serial status byte","62684":"shift time out read ..","62685":".. into carry bit","62686":"if timed out go do file not found error and return","62688":"input byte from serial bus","62691":"save program start address high byte","62693":"copy secondary address","62694":"load location not set in LOAD call, so continue with the\nload","62696":"get the load address low byte","62698":"save the program start address low byte","62700":"get the load address high byte","62702":"save the program start address high byte","62707":"mask xxxx xx0x, clear time out read bit","62709":"mask the serial status byte","62711":"set the serial status byte","62713":"scan stop key, return Zb = 1 = [STOP]","62716":"if not [STOP] go ??","62718":"else close the serial bus device and flag stop","62721":"input byte from serial bus","62724":"copy byte","62725":"get the serial status byte","62727":"shift time out read ..","62728":".. into carry bit","62729":"if timed out go try again","62731":"copy received byte back","62732":"get load/verify flag","62734":"if load go load\nelse is verify","62736":"clear index","62738":"compare byte with previously loaded byte","62740":"if match go ??","62742":"flag read error","62744":"OR into the serial status byte","62748":"save byte to memory","62750":"increment save pointer low byte","62752":"if no rollover go ??","62754":"else increment save pointer high byte","62756":"test the serial status byte","62758":"loop if not end of file\nclose file and exit","62760":"command serial bus to UNTALK","62763":"close serial bus device","62766":"if ?? go flag ok and exit","62768":"do file not found error and return","62774":"else do 'illegal device number' and return","62777":"get tape buffer start pointer in XY","62780":"if ??","62782":"else do 'illegal device number' and return","62785":"wait for PLAY","62788":"exit if STOP was pressed","62790":"print \"Searching...\"","62793":"get file name length","62797":"find specific tape header","62800":"if no error continue","62802":"exit if ??","62804":", branch always","62806":"find tape header, exit with header in buffer","62809":"exit if ??","62813":"get the serial status byte","62815":"mask 000x 0000, read error","62817":"flag fail","62818":"if read error just exit","62841":"get the secondary address","62876":"set I/O start addresses low byte","62880":"set I/O start addresses high byte","62882":"display \"LOADING\" or \"VERIFYING\"","62885":"do the tape read","62889":"flag ok","62890":"get the LOAD end pointer low byte","62892":"get the LOAD end pointer high byte","62895":"get message mode flag","62897":"exit if control messages off","62901":"display kernel I/O message","62904":"get file name length","62906":"exit if null name","62910":"display kernel I/O message","62913":"get file name length","62915":"exit if null file name","62917":"clear index","62919":"get file name byte","62921":"output character to channel","62924":"increment index","62925":"compare with file name length","62927":"loop if more to do","62932":"get load/verify flag","62934":"branch if load","62938":"display kernel I/O message if in direct mode and return","62941":"save end address low byte","62943":"save end address high byte","62945":"copy index to start pointer","62946":"get start address low byte","62948":"set I/O start addresses low byte","62950":"get start address high byte","62952":"set I/O start addresses high byte","62954":"go save, usually points to $F685","62957":"get the device number","62959":"if not keyboard go ??\nelse ..","62961":"else do 'illegal device number' and return","62964":"compare device number with screen","62966":"if screen do illegal device number and return","62968":"branch if \u003c screen\nis greater than screen so is serial bus","62970":"set secondary address to $01\nwhen a secondary address is to be sent to a device on\nthe serial bus the address must first be ORed with $60","62972":"save the secondary address","62974":"get the file name length","62976":"if filename not null continue","62978":"else do 'missing file name' error and return","62981":"send secondary address and filename","62984":"print saving \u003cfile name\u003e","62987":"get the device number","62989":"command devices on the serial bus to LISTEN","62992":"get the secondary address","62994":"send secondary address after LISTEN","62997":"clear index","62999":"copy I/O start address to buffer address","63002":"get buffer address low byte","63004":"output byte to serial bus","63007":"get buffer address high byte","63009":"output byte to serial bus","63012":"check read/write pointer, return Cb = 1 if pointer \u003e= end","63015":"go do UNLISTEN if at end","63017":"get byte from buffer","63019":"output byte to serial bus","63022":"scan stop key","63025":"if stop not pressed go increment pointer and loop for next\nelse ..\nclose the serial bus device and flag stop","63027":"close serial bus device","63032":"flag stop","63034":"increment read/write pointer","63037":"loop, branch always","63039":"command serial bus to UNLISTEN\nclose serial bus device","63042":"test the secondary address","63044":"if already closed just exit","63046":"get the device number","63048":"command devices on the serial bus to LISTEN","63051":"get the secondary address","63053":"mask the channel number","63055":"OR with the CLOSE command","63057":"send secondary address after LISTEN","63060":"command serial bus to UNLISTEN","63063":"flag ok","63066":"if not RS232 device ??","63068":"else do 'illegal device number' and return","63071":"get tape buffer start pointer in XY","63074":"if \u003c $0200 do illegal device number and return","63076":"wait for PLAY/RECORD","63079":"exit if STOP was pressed","63081":"print saving \u003cfile name\u003e","63084":"set header for a non relocatable program file","63086":"get the secondary address","63088":"mask non relocatable bit","63090":"if non relocatable program go ??","63092":"else set header for a relocatable program file","63094":"copy header type to A","63095":"write tape header","63098":"exit if error","63100":"do tape write, 20 cycle count","63103":"exit if error","63105":"get the secondary address","63107":"mask end of tape flag","63109":"if not end of tape go ??","63111":"else set logical end of the tape","63113":"write tape header","63117":"flag ok","63119":"get message mode flag","63121":"exit if control messages off","63125":"display kernel I/O message","63128":"print file name and return","63131":"clear X","63133":"increment the jiffy clock low byte","63135":"if no rollover ??","63137":"increment the jiffy clock mid byte","63139":"branch if no rollover","63141":"increment the jiffy clock high byte\nnow subtract a days worth of jiffies from current count\nand remember only the Cb result","63143":"set carry for subtract","63144":"get the jiffy clock low byte","63146":"subtract $4F1A01 low byte","63148":"get the jiffy clock mid byte","63150":"subtract $4F1A01 mid byte","63152":"get the jiffy clock high byte","63154":"subtract $4F1A01 high byte","63156":"if less than $4F1A01 jiffies skip the clock reset\nelse ..","63158":"clear the jiffy clock high byte","63160":"clear the jiffy clock mid byte","63162":"clear the jiffy clock low byte\nthis is wrong, there are $4F1A00 jiffies in a day so\nthe reset to zero should occur when the value reaches\n$4F1A00 and not $4F1A01. this would give an extra jiffy\nevery day and a possible TI value of 24:00:00","63164":"read VIA 1 DRB, keyboard row port","63167":"compare it with itself","63170":"loop if changing","63175":"set c6","63177":"save VIA 1 DRA, keyboard column drive","63180":"read VIA 1 DRB, keyboard row port","63183":"compare it with itself","63186":"loop if changing","63188":"save VIA 1 DRA, keyboard column drive","63194":"save the stop key column","63197":"disable the interrupts","63198":"get the jiffy clock low byte","63200":"get the jiffy clock mid byte","63202":"get the jiffy clock high byte","63204":"disable the interrupts","63205":"save the jiffy clock low byte","63207":"save the jiffy clock mid byte","63209":"save the jiffy clock high byte","63211":"enable the interrupts","63213":"read the stop key column","63215":"compare with [STP] down","63217":"if not [STP] or not just [STP] exit\njust [STP] was pressed","63219":"save status","63220":"close input and output channels","63223":"save the keyboard buffer index","63225":"restore status","63227":"'too many files' error","63230":"'file already open' error","63233":"'file not open' error","63236":"'file not found' error","63239":"'device not present' error","63242":"'not input file' error","63245":"'not output file' error","63248":"'missing file name' error","63251":"do 'illegal device number'","63253":"save the error #","63254":"close input and output channels","63259":"test message mode flag","63261":"exit if kernal messages off","63263":"display kernel I/O message","63266":"restore error #","63267":"copy error #","63268":"convert to ASCII","63270":"output character to channel","63273":"pull error number","63274":"flag error","63276":"get load/verify flag","63278":"save load/verify flag","63279":"initiate tape read","63282":"restore load/verify flag","63283":"save load/verify flag","63285":"exit if error","63287":"clear the index","63289":"read first byte from tape buffer","63291":"compare with logical end of the tape","63293":"if end of the tape exit","63295":"compare with header for a relocatable program file","63297":"if program file header go ??","63299":"compare with header for a non relocatable program file","63301":"if program file header go  ??","63303":"compare with data file header","63305":"if data file loop to find the tape header\nwas a program file header","63307":"copy header type","63308":"get message mode flag","63310":"exit if control messages off","63314":"display kernel I/O message","63317":"index to the tape filename","63319":"get byte from tape buffer","63321":"output character to channel","63324":"increment the index","63325":"compare it with end+1","63327":"loop if more to do","63329":"get the jiffy clock mid byte","63331":"wait ~8.5 seconds for any key from the STOP key column","63334":"waste cycles","63335":"flag no error","63336":"decrement the index","63338":"save header type","63340":"get tape buffer start pointer in XY","63343":"if \u003c $0200 just exit ??","63345":"get I/O start address high byte","63347":"save it","63348":"get I/O start address low byte","63350":"save it","63351":"get tape end address high byte","63353":"save it","63354":"get tape end address low byte","63356":"save it","63357":"index to header end","63359":"clear byte, [SPACE]","63361":"clear header byte","63363":"decrement index","63364":"loop if more to do","63366":"get the header type back","63368":"write it to header","63370":"increment the index","63371":"get the I/O start address low byte","63373":"write it to header","63375":"increment the index","63376":"get the I/O start address high byte","63378":"write it to header","63380":"increment the index","63381":"get the tape end address low byte","63383":"write it to header","63385":"increment the index","63386":"get the tape end address high byte","63388":"write it to header","63390":"increment the index","63391":"save the index","63393":"clear Y","63395":"clear the name index","63397":"get name index","63399":"compare with file name length","63401":"if all done exit the loop","63403":"get file name byte","63405":"get buffer index","63407":"save file name byte to buffer","63409":"increment file name index","63411":"increment tape buffer index","63413":"loop, branch always","63415":"set tape buffer start and end pointers","63418":"set write lead cycle count","63420":"save write lead cycle count","63422":"do tape write, no cycle count set","63426":"pull tape end address low byte","63427":"restore it","63429":"pull tape end address high byte","63430":"restore it","63432":"pull I/O start addresses low byte","63433":"restore it","63435":"pull I/O start addresses high byte","63436":"restore it","63440":"get tape buffer start pointer low byte","63442":"get tape buffer start pointer high byte","63444":"compare high byte with $02xx","63447":"get tape buffer start pointer in XY","63450":"copy tape buffer start pointer low byte","63451":"save as I/O address pointer low byte","63453":"clear carry for add","63454":"add buffer length low byte","63456":"save tape buffer end pointer low byte","63458":"copy tape buffer start pointer high byte","63459":"save as I/O address pointer high byte","63461":"add buffer length high byte","63463":"save tape buffer end pointer high byte","63466":"find tape header, exit with header in buffer","63469":"just exit if error","63471":"index to name","63473":"save as tape buffer index","63475":"clear Y","63477":"save as name buffer index","63479":"compare with file name length","63481":"ok exit if match","63483":"get file name byte","63485":"get index to tape buffer","63487":"compare with tape header name byte","63489":"if no match go get next header","63491":"else increment name buffer index","63493":"increment tape buffer index","63495":"get name buffer index","63497":"loop, branch always","63499":"flag ok","63501":"get tape buffer start pointer in XY","63504":"increment tape buffer index","63506":"get tape buffer index","63508":"compare with buffer length","63511":"return cassette sense in Zb","63514":"if switch closed just exit\ncassette switch was open","63518":"display kernel I/O message","63521":"scan stop key and flag abort if pressed\nnote if STOP was pressed the return is to the\nroutine that called this one and not here","63524":"return cassette sense in Zb","63527":"loop if the cassette switch is open","63531":"display kernel I/O message and return","63534":"set the mask for the cassette switch","63536":"test the 6510 I/O port","63538":"branch if cassette sense high","63540":"test the 6510 I/O port","63544":"return the cassette sense in Zb","63547":"exit if switch closed\ncassette switch was open","63551":"display message and wait for switch, branch always","63553":"clear A","63555":"clear serial status byte","63557":"clear the load/verify flag","63559":"set the tape buffer start and end pointers","63562":"wait for PLAY","63565":"exit if STOP was pressed, uses a further BCS at the\ntarget address to reach final target at $F8DC","63567":"disable interrupts","63568":"clear A","63574":"clear tape timing constant min byte","63576":"clear tape pass 1 error log/char buffer","63578":"clear tape pass 2 error log corrected","63580":"clear byte received flag","63582":"enable CA1 interrupt ??","63584":"set index for tape read vector","63586":"go do tape read/write, branch always","63588":"set tape buffer start and end pointers\ndo tape write, 20 cycle count","63591":"set write lead cycle count","63593":"save write lead cycle count\ndo tape write, no cycle count set","63595":"wait for PLAY/RECORD","63598":"if STOPped clear save IRQ address and exit","63600":"disable interrupts","63601":"enable ?? interrupt","63603":"set index for tape write tape leader vector","63605":"disable all interrupts","63607":"save VIA 1 ICR, disable all interrupts","63610":"save VIA 1 ICR, enable interrupts according to A\ncheck RS232 bus idle","63613":"read VIA 1 CRA","63616":"load timer B, timer B single shot, start timer B","63618":"save VIA 1 CRB","63621":"mask x00x 000x, TOD clock, load timer A, start timer A","63623":"save VIA 1 CRB shadow copy","63629":"read the vertical fine scroll and control register","63632":"mask xxx0 xxxx, blank the screen","63634":"save the vertical fine scroll and control register","63637":"get IRQ vector low byte","63640":"save IRQ vector low byte","63643":"get IRQ vector high byte","63646":"save IRQ vector high byte","63649":"set the tape vector","63652":"set copies count. the first copy is the load copy, the\nsecond copy is the verify copy","63654":"save copies count","63656":"new tape byte setup","63659":"read the 6510 I/O port","63661":"mask 000x xxxx, cassette motor on ??","63663":"save the 6510 I/O port","63665":"set the tape motor interlock\n326656 cycle delay, allow tape motor speed to stabilise","63667":"outer loop count","63669":"inner loop count","63671":"decrement inner loop count","63672":"loop if more to do","63674":"decrement outer loop count","63675":"loop if more to do","63677":"enable tape interrupts","63678":"get saved IRQ high byte","63681":"compare with the current IRQ high byte","63684":"flag ok","63685":"if tape write done go clear saved IRQ address and exit","63687":"scan stop key and flag abort if pressed\nnote if STOP was pressed the return is to the\nroutine that called this one and not here","63690":"increment real time clock","63693":"loop","63696":"scan stop key","63699":"flag no stop","63700":"exit if no stop","63702":"restore everything for STOP","63705":"flag stopped","63706":"dump return address low byte","63707":"dump return address high byte","63708":"clear A","63710":"clear saved IRQ address high byte","63714":"save tape timing constant max byte","63716":"get tape timing constant min byte","63718":"*2","63719":"*4","63720":"clear carry for add","63721":"add tape timing constant min byte *5","63723":"clear carry for add","63724":"add tape timing constant max byte","63726":"save tape timing constant max byte","63730":"test tape timing constant min byte","63732":"branch if b7 set","63734":"else shift carry into ??","63735":"shift tape timing constant max byte","63738":"shift tape timing constant max byte","63742":"get VIA 1 timer B low byte","63745":"compare with ??","63747":"loop if less","63749":"add tape timing constant max byte","63751":"save VIA 1 timer A low byte","63755":"add VIA 1 timer B high byte","63758":"save VIA 1 timer A high byte","63761":"read VIA 1 CRB shadow copy","63764":"save VIA 1 CRA","63767":"save VIA 1 CRA shadow copy","63770":"read VIA 1 ICR","63773":"mask 000x 0000, FLAG interrupt","63775":"if no FLAG interrupt just exit\nelse first call the IRQ routine","63777":"set the return address high byte","63779":"push the return address high byte","63780":"set the return address low byte","63782":"push the return address low byte","63783":"save the status and do the IRQ routine","63786":"enable interrupts","63788":"read VIA 1 timer B high byte","63791":"set $FF","63793":"A = $FF","63794":"subtract VIA 1 timer B low byte","63797":"compare it with VIA 1 timer B high byte","63800":"if timer low byte rolled over loop","63802":"save tape timing constant max byte","63804":"copy $FF - T2C_l","63805":"save VIA 1 timer B low byte","63808":"save VIA 1 timer B high byte","63811":"load timer B, timer B single shot, start timer B","63813":"save VIA 1 CRB","63816":"read VIA 1 ICR","63819":"save VIA 1 ICR shadow copy","63822":"y = $FF","63823":"subtract tape timing constant max byte\nA = $FF - T2C_h","63825":"save tape timing constant max byte\n$B1 = $FF - T2C_l","63827":"A = $FF - T2C_h \u003e\u003e 1","63828":"shift tape timing constant max byte\n$B1 = $FF - T2C_l \u003e\u003e 1","63830":"A = $FF - T2C_h \u003e\u003e 1","63831":"shift tape timing constant max byte\n$B1 = $FF - T2C_l \u003e\u003e 1","63833":"get tape timing constant min byte","63835":"clear carry for add","63838":"compare with tape timing constant max byte\ncompare with ($FFFF - T2C) \u003e\u003e 2","63840":"branch if min + $3C \u003e= ($FFFF - T2C) \u003e\u003e 2\nmin + $3C \u003c ($FFFF - T2C) \u003e\u003e 2","63842":"get byte received flag","63844":"if not byte received ??","63846":"store the tape character","63849":"get EOI flag byte","63857":"add tape timing constant min byte","63859":"compare with tape timing constant max byte","63866":"add tape timing constant min byte","63868":"compare with tape timing constant max byte","63874":"add tape timing constant min byte","63876":"compare with tape timing constant max byte","63883":"get the bit count","63885":"if all done go ??","63887":"save receiver bit count in","63889":"branch always","63891":"increment ?? start bit check flag","63895":"decrement ?? start bit check flag","63900":"subtract tape timing constant max byte","63902":"add timing constant for tape","63904":"save timing constant for tape","63906":"get tape bit cycle phase","63910":"save tape bit cycle phase","63916":"get the bit count","63918":"if all done go ??","63920":"read VIA 1 ICR shadow copy","63923":"mask 0000 000x, timer A interrupt enabled","63925":"if timer A is enabled go ??","63927":"read VIA 1 CRA shadow copy","63930":"if ?? just exit","63932":"clear A","63934":"clear the tape bit cycle phase","63936":"save VIA 1 CRA shadow copy","63939":"get EOI flag byte","63945":"set timimg max byte","63947":"set timing","63954":"restore registers and exit interrupt","63957":"get timing constant for tape","63963":"decrement tape timing constant min byte","63966":"increment tape timing constant min byte","63970":"clear timing constant for tape","63979":"get start bit check flag","63987":"save cassette block synchronization number","64000":"decrement EOI flag byte","64006":"parity count","64008":"set timimg max byte","64010":"set timing","64013":"restore registers and exit interrupt","64016":"get cassette block synchronization number","64024":"get EOI flag byte","64031":"shift tape timing constant max byte","64036":"subtract tape timing constant max byte","64038":"add tape timing constant min byte","64041":"copy timimg high byte","64042":"set timing","64051":"get cassette block synchronization number","64055":"save receiver bit count in","64057":"clear A","64059":"clear cassette block synchronization number","64061":"enable timer A interrupt","64063":"save VIA 1 ICR","64068":"get cassette block synchronization number","64078":"disable timer A interrupt","64080":"save VIA 1 ICR","64083":"parity count","64085":"save RS232 parity byte","64087":"get receiver bit count in","64089":"OR with start bit check flag","64093":"restore registers and exit interrupt","64096":"new tape byte setup","64099":"clear byte received flag","64101":"set timimg max byte","64103":"set timing","64106":"get copies count","64110":"save receiver input bit temporary storage","64122":"get copies count","64125":"if ?? restore registers and exit interrupt","64127":"set short block","64129":"OR into serial status byte","64132":"restore registers and exit interrupt, branch always","64138":"restore registers and exit interrupt","64153":"get receiver input bit temporary storage","64156":"get RS232 parity byte","64177":"copy I/O start address to buffer address","64190":"restore registers and exit interrupt, branch always","64198":"OR into serial status byte","64206":"check read/write pointer, return Cb = 1 if pointer \u003e= end","64214":"get receiver input bit temporary storage","64219":"get load/verify flag","64221":"if load go ??","64223":"clear index","64225":"get RS232 parity byte","64288":"get load/verify flag","64290":"if load ??","64292":"get RS232 parity byte","64309":"OR into serial status byte","64314":"get load/verify flag","64316":"if verify go ??","64319":"get RS232 parity byte","64323":"increment read/write pointer","64326":"restore registers and exit interrupt, branch always","64333":"disable timer A interrupt","64335":"save VIA 1 ICR","64338":"read VIA 1 ICR","64341":"get copies count","64346":"save copies count","64348":"decrement receiver input bit temporary storage","64354":"if ?? restore registers and exit interrupt","64356":"save copies count","64358":"restore registers and exit interrupt, branch always","64360":"restore everything for STOP","64363":"copy I/O start address to buffer address","64366":"clear index","64368":"clear checksum","64370":"get byte from buffer","64372":"XOR with checksum","64374":"save new checksum","64376":"increment read/write pointer","64379":"check read/write pointer, return Cb = 1 if pointer \u003e= end","64382":"loop if not at end","64384":"get computed checksum","64386":"compare with stored checksum ??","64388":"if checksum ok restore registers and exit interrupt","64390":"else set checksum error","64392":"OR into the serial status byte","64395":"restore registers and exit interrupt","64398":"get I/O start address high byte","64400":"set buffer address high byte","64402":"get I/O start address low byte","64404":"set buffer address low byte","64407":"eight bits to do","64409":"set bit count","64411":"clear A","64413":"clear tape bit cycle phase","64415":"clear start bit first cycle done flag","64417":"clear byte parity","64419":"clear start bit check flag, set no start bit yet","64422":"get tape write byte","64424":"shift lsb into Cb","64425":"set time constant low byte for bit = 0","64427":"branch if bit was 0\nset time constant for bit = 1 and toggle tape","64429":"set time constant low byte for bit = 1\nwrite time constant and toggle tape","64431":"set time constant high byte\nwrite time constant and toggle tape","64433":"save VIA 1 timer B low byte","64436":"save VIA 1 timer B high byte","64439":"read VIA 1 ICR","64442":"load timer B, timer B single shot, start timer B","64444":"save VIA 1 CRB","64447":"read the 6510 I/O port","64449":"toggle tape out bit","64451":"save the 6510 I/O port","64453":"mask tape out bit","64456":"set carry flag","64457":"set buffer address high byte negative, flag all sync,\ndata and checksum bytes written","64459":"restore registers and exit interrupt, branch always","64461":"get start bit first cycle done flag","64463":"if first cycle done go do rest of byte\neach byte sent starts with two half cycles of $0110 ststem clocks and the whole block\nends with two more such half cycles","64465":"set first start cycle time constant low byte","64467":"set first start cycle time constant high byte","64469":"write time constant and toggle tape","64472":"if first half cycle go restore registers and exit\ninterrupt","64474":"set start bit first start cycle done flag","64476":"get buffer address high byte","64478":"if block not complete go restore registers and exit\ninterrupt. the end of a block is indicated by the tape\nbuffer high byte b7 being set to 1","64480":"else do tape routine, block complete exit\ncontinue tape byte write. the first start cycle, both half cycles of it, is complete\nso the routine drops straight through to here","64483":"get start bit check flag","64485":"if the start bit is complete go send the byte bits\nafter the two half cycles of $0110 ststem clocks the start bit is completed with two\nhalf cycles of $00B0 system clocks. this is the same as the first part of a 1 bit","64487":"set time constant for bit = 1 and toggle tape","64490":"if first half cycle go restore registers and exit\ninterrupt","64492":"set start bit check flag","64494":"restore registers and exit interrupt, branch always\ncontinue tape byte write. the start bit, both cycles of it, is complete so the routine\ndrops straight through to here. now the cycle pairs for each bit, and the parity bit,\nare sent","64496":"send lsb from tape write byte to tape","64499":"if first half cycle go restore registers and exit\ninterrupt\nelse two half cycles have been done","64501":"get tape bit cycle phase","64503":"toggle b0","64505":"save tape bit cycle phase","64507":"if bit cycle phase complete go setup for next bit\neach bit is written as two full cycles. a 1 is sent as a full cycle of $0160 system\nclocks then a full cycle of $00C0 system clocks. a 0 is sent as a full cycle of $00C0\nsystem clocks then a full cycle of $0160 system clocks. to do this each bit from the\nwrite byte is inverted during the second bit cycle phase. as the bit is inverted it\nis also added to the, one bit, parity count for this byte","64509":"get tape write byte","64511":"invert bit being sent","64513":"save tape write byte","64515":"mask b0","64517":"EOR with tape write byte parity bit","64519":"save tape write byte parity bit","64521":"restore registers and exit interrupt\nthe bit cycle phase is complete so shift out the just written bit and test for byte\nend","64524":"shift bit out of tape write byte","64526":"decrement tape write bit count","64528":"get tape write bit count","64530":"if all the data bits have been written go setup for\nsending the parity bit next and exit the interrupt","64532":"if all the data bits are not yet sent just restore the\nregisters and exit the interrupt\ndo next tape byte\nthe byte is complete. the start bit, data bits and parity bit have been written to\nthe tape so setup for the next byte","64534":"new tape byte setup","64537":"enable the interrupts","64538":"get cassette synchronization character count","64540":"if synchronisation characters done go do block data\nat the start of each block sent to tape there are a number of synchronisation bytes\nthat count down to the actual data. the commodore tape system saves two copies of all\nthe tape data, the first is loaded and is indicated by the synchronisation bytes\nhaving b7 set, and the second copy is indicated by the synchronisation bytes having b7\nclear. the sequence goes $09, $08, ..... $02, $01, data bytes","64542":"clear X","64544":"clear checksum byte","64546":"decrement cassette synchronization byte count","64548":"get cassette copies count","64550":"compare with load block indicator","64552":"branch if not the load block","64554":"this is the load block so make the synchronisation count\ngo $89, $88, ..... $82, $81","64556":"save the synchronisation byte as the tape write byte","64558":"restore registers and exit interrupt, branch always\nthe synchronization bytes have been done so now check and do the actual block data","64560":"check read/write pointer, return Cb = 1 if pointer \u003e= end","64563":"if not all done yet go get the byte to send","64565":"if pointer \u003e end go flag block done and exit interrupt\nelse the block is complete, it only remains to write the\nchecksum byte to the tape so setup for that","64567":"increment buffer pointer high byte, this means the block\ndone branch will always be taken next time without having\nto worry about the low byte wrapping to zero","64569":"get checksum byte","64571":"save checksum as tape write byte","64573":"restore registers and exit interrupt, branch always\nthe block isn't finished so get the next byte to write to tape","64575":"clear index","64577":"get byte from buffer","64579":"save as tape write byte","64581":"XOR with checksum byte","64583":"save new checksum byte","64585":"increment read/write pointer","64588":"restore registers and exit interrupt, branch always\nset parity as next bit and exit interrupt","64590":"get parity bit","64592":"toggle it","64594":"save as tape write byte","64596":"restore registers and exit interrupt\ntape routine, block complete exit","64599":"decrement copies remaining to read/write","64601":"branch if more to do","64603":"stop the cassette motor","64606":"set tape write leader count","64608":"save tape write leader count","64610":"set index for write tape leader vector","64612":"disable the interrupts","64613":"set the tape vector","64616":"restore registers and exit interrupt, branch always","64618":"set time constant low byte for bit = leader","64620":"write time constant and toggle tape","64623":"if tape bit high restore registers and exit interrupt","64625":"decrement cycle count","64627":"if not all done restore registers and exit interrupt","64629":"new tape byte setup","64632":"decrement cassette leader count","64634":"if not all done restore registers and exit interrupt","64636":"set index for tape write vector","64638":"set the tape vector","64641":"enable the interrupts","64642":"clear cassette leader counter, was $FF","64644":"get cassette block count","64646":"if all done restore everything for STOP and exit the\ninterrupt","64648":"copy I/O start address to buffer address","64651":"set nine synchronisation bytes","64653":"save cassette synchronization byte count","64657":"go do the next tape byte, branch always","64659":"save status","64660":"disable the interrupts","64661":"read the vertical fine scroll and control register","64664":"mask xxx1 xxxx, unblank the screen","64666":"save the vertical fine scroll and control register","64669":"stop the cassette motor","64672":"disable all interrupts","64674":"save VIA 1 ICR","64680":"get saved IRQ vector high byte","64683":"branch if null","64685":"restore IRQ vector high byte","64688":"get saved IRQ vector low byte","64691":"restore IRQ vector low byte","64694":"restore status","64696":"restore everything for STOP","64699":"restore registers and exit interrupt, branch always","64701":"get tape IRQ vector low byte","64704":"set IRQ vector low byte","64707":"get tape IRQ vector high byte","64710":"set IRQ vector high byte","64714":"read the 6510 I/O port","64716":"mask xxxx xx1x, turn the cassette motor off","64718":"save the 6510 I/O port","64721":"set carry for subtract","64722":"get buffer address low byte","64724":"subtract buffer end low byte","64726":"get buffer address high byte","64728":"subtract buffer end high byte","64731":"increment buffer address low byte","64733":"branch if no overflow","64735":"increment buffer address low byte","64738":"set X for stack","64740":"disable the interrupts","64741":"clear stack","64742":"clear decimal mode","64743":"scan for autostart ROM at $8000","64746":"if not there continue startup","64748":"else call ROM start code","64751":"read the horizontal fine scroll and control register","64754":"initialise SID, CIA and IRQ","64757":"RAM test and find RAM end","64760":"restore default I/O vectors","64763":"initialise VIC and screen editor","64766":"enable the interrupts","64767":"execute BASIC","64770":"five characters to test","64772":"get test character","64775":"compare wiith byte in ROM space","64778":"exit if no match","64780":"decrement index","64781":"loop if not all done","64789":"pointer to vector table low byte","64791":"pointer to vector table high byte","64793":"flag set vectors","64794":"save pointer low byte","64796":"save pointer high byte","64798":"set byte count","64800":"read vector byte from vectors","64803":"branch if read vectors","64805":"read vector byte from (XY)","64807":"save byte to (XY)","64809":"save byte to vector","64812":"decrement index","64813":"loop if more to do","64848":"clear A","64850":"clear index","64851":"clear page 0, don't do $0000 or $0001","64854":"clear page 2","64857":"clear page 3","64860":"increment index","64861":"loop if more to do","64863":"set cassette buffer pointer low byte","64865":"set cassette buffer pointer high byte","64867":"save tape buffer start pointer low byte","64869":"save tape buffer start pointer high byte","64871":"clear Y","64872":"set RAM test pointer high byte","64874":"save RAM test pointer high byte","64876":"increment RAM test pointer high byte","64909":"set the top of memory","64914":"save the OS start of memory high byte","64919":"save the screen memory page","64931":"disable all interrupts","64933":"save VIA 1 ICR","64936":"save VIA 2 ICR","64939":"save VIA 1 DRA, keyboard column drive","64942":"set timer single shot","64944":"save VIA 1 CRA","64947":"save VIA 2 CRA","64950":"save VIA 1 CRB","64953":"save VIA 2 CRB","64956":"set all inputs","64958":"save VIA 1 DDRB, keyboard row","64961":"save VIA 2 DDRB, RS232 port","64964":"clear the volume and filter select register","64967":"set X = $FF","64968":"save VIA 1 DDRA, keyboard column","64971":"DATA out high, CLK out high, ATN out high, RE232 Tx DATA\nhigh, video address 15 = 1, video address 14 = 1","64973":"save VIA 2 DRA, serial port and video address","64976":"set serial DATA input, serial CLK input","64978":"save VIA 2 DDRA, serial port and video address","64981":"set 1110 0111, motor off, enable I/O, enable KERNAL,\nenable BASIC","64983":"save the 6510 I/O port","64985":"set 0010 1111, 0 = input, 1 = output","64987":"save the 6510 I/O port direction register","64989":"get the PAL/NTSC flag","64992":"if NTSC go set NTSC timing\nelse set PAL timing","64996":"save VIA 1 timer A low byte","65006":"save VIA 1 timer A low byte","65011":"save VIA 1 timer A high byte","65017":"set file name length","65019":"set file name pointer low byte","65021":"set file name pointer high byte","65024":"save the logical file","65026":"save the device number","65028":"save the secondary address","65031":"get the device number","65033":"compare device with RS232 device","65035":"if not RS232 device go ??\nget RS232 device status","65037":"get the RS232 status register","65040":"save the RS232 status value","65041":"clear A","65043":"clear the RS232 status register","65046":"restore the RS232 status value","65048":"set message mode flag","65050":"read the serial status byte","65052":"OR with the serial status byte","65054":"save the serial status byte","65057":"save serial bus timeout flag","65061":"if Cb clear go set the top of memory","65063":"get memory top low byte","65066":"get memory top high byte","65069":"set memory top low byte","65072":"set memory top high byte","65076":"if Cb clear go set the bottom of memory","65078":"get the OS start of memory low byte","65081":"get the OS start of memory high byte","65084":"save the OS start of memory low byte","65087":"save the OS start of memory high byte","65091":"disable the interrupts","65092":"do NMI vector","65095":"save A","65096":"copy X","65097":"save X","65098":"copy Y","65099":"save Y","65100":"disable all interrupts","65102":"save VIA 2 ICR","65105":"save VIA 2 ICR","65110":"scan for autostart ROM at $8000","65113":"branch if no autostart ROM","65115":"else do autostart ROM break entry","65118":"increment real time clock","65121":"scan stop key","65124":"if not [STOP] restore registers and exit interrupt","65126":"restore default I/O vectors","65129":"initialise SID, CIA and IRQ","65132":"initialise the screen and keyboard","65135":"do BASIC break entry","65139":"AND with the RS-232 interrupt enable byte","65147":"read VIA 2 DRA, serial port and video address","65150":"mask xxxx x0xx, clear RS232 Tx DATA","65152":"OR in the RS232 transmit data bit","65154":"save VIA 2 DRA, serial port and video address","65157":"get the RS-232 interrupt enable byte","65160":"save VIA 2 ICR","65187":"get active interrupts back","65188":"mask ?? interrupt","65190":"branch if not ?? interrupt\nwas ?? interrupt","65198":"get active interrupts back","65199":"mask CB1 interrupt, Rx data bit transition","65201":"if no bit restore registers and exit interrupt","65206":"get the RS-232 interrupt enable byte","65209":"save VIA 2 ICR","65212":"pull Y","65213":"restore Y","65214":"pull X","65215":"restore X","65216":"restore A","65238":"read VIA 2 DRB, RS232 port","65241":"mask 0000 000x, RS232 Rx DATA","65243":"save the RS232 received data bit","65245":"get VIA 2 timer B low byte","65253":"save VIA 2 timer B low byte","65256":"get VIA 2 timer B high byte","65262":"save VIA 2 timer B high byte","65265":"set timer B single shot, start timer B","65267":"save VIA 2 CRB","65270":"get the RS-232 interrupt enable byte","65273":"save VIA 2 ICR","65278":"save VIA 2 timer B low byte","65281":"save VIA 2 timer B high byte","65287":"nonstandard bit timing low byte","65290":"save VIA 2 timer B low byte","65293":"nonstandard bit timing high byte","65296":"save VIA 2 timer B high byte","65299":"set timer B single shot, start timer B","65301":"save VIA 2 CRB","65306":"EOR with the RS-232 interrupt enable byte","65309":"save the RS-232 interrupt enable byte","65314":"save VIA 2 timer B low byte","65317":"save VIA 2 timer B high byte","65327":"nonstandard bit timing high byte","65339":"add any carry","65345":"waste cycles","65346":"waste cycles","65347":"save the processor status","65348":"pull the processor status","65349":"mask xxx0 xxxx, clear the break bit","65351":"save the modified processor status","65352":"save A","65353":"copy X","65354":"save X","65355":"copy Y","65356":"save Y","65357":"copy stack pointer","65358":"get stacked status register","65361":"mask BRK flag","65363":"branch if not BRK","65365":"else do BRK vector (iBRK)","65368":"do IRQ vector (iIRQ)","65371":"initialise the screen and keyboard","65374":"read the raster compare register","65377":"loop if not raster line $00","65379":"read the vic interrupt flag register","65382":"mask the raster compare flag","65384":"save the PAL/NTSC flag","65390":"enable timer A interrupt","65392":"save VIA 1 ICR","65395":"read VIA 1 CRA","65398":"mask x000 0000, TOD clock","65400":"mask xxx1 xxx1, load timer A, start timer A","65402":"save VIA 1 CRA","65405":"set the serial clock out low and return","65409":"initialise VIC and screen editor","65412":"initialise SID, CIA and IRQ","65415":"RAM test and find RAM end","65418":"restore default I/O vectors","65421":"read/set vectored I/O","65424":"control kernal messages","65427":"send secondary address after LISTEN","65430":"send secondary address after TALK","65433":"read/set the top of memory","65436":"read/set the bottom of memory","65439":"scan keyboard","65442":"set timeout on serial bus","65445":"input byte from serial bus","65448":"output byte to serial bus","65451":"command serial bus to UNTALK","65454":"command serial bus to UNLISTEN","65457":"command devices on the serial bus to LISTEN","65460":"command serial bus device to TALK","65463":"read I/O status word","65466":"set logical, first and second addresses","65469":"set the filename","65472":"do open a logical file","65475":"do close a specified logical file","65478":"do open channel for input","65481":"do open channel for output","65484":"do close input and output channels","65487":"do input character from channel","65490":"do output character to channel","65493":"load RAM from a device","65496":"save RAM to device","65499":"set real time clock","65502":"read real time clock","65505":"do scan stop key","65508":"do get character from input device","65511":"do close all channels and files","65514":"increment real time clock","65517":"return X,Y organization of screen","65520":"read/set X,Y cursor position","65523":"return the base address of the I/O devices"}}
